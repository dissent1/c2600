!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABOVE_NORMAL_PRIORITY_CLASS	src/openvpnserv/openvpnserv.c	58;"	d	file:
ACF_DISABLED	src/openvpn/ssl_verify.c	728;"	d	file:
ACF_FAILED	src/openvpn/ssl_verify.c	729;"	d	file:
ACF_SUCCEEDED	src/openvpn/ssl_verify.c	727;"	d	file:
ACF_UNDEFINED	src/openvpn/ssl_verify.c	726;"	d	file:
ACK_SIZE	src/openvpn/reliable.c	191;"	d	file:
AC_MIN_BYTES	src/openvpn/lzo.h	127;"	d
AC_OFF_SEC	src/openvpn/lzo.h	133;"	d
AC_SAMP_SEC	src/openvpn/lzo.h	126;"	d
AC_SAVE_PCT	src/openvpn/lzo.h	130;"	d
ADD_CHECKSUM_32	src/openvpn/proto.h	200;"	d
ADJUST_CHECKSUM	src/openvpn/proto.h	185;"	d
ADVANCE	src/openvpn/route.c	2637;"	d	file:
ADVANCE	src/openvpn/route.c	2736;"	d	file:
ADVANCE	src/openvpn/route.c	2958;"	d	file:
AF_DID_PUSH	src/openvpn/manage.c	288;"	d	file:
AF_DID_RESET	src/openvpn/manage.c	289;"	d	file:
ALLOC_ARRAY	src/openvpn/buffer.h	836;"	d
ALLOC_ARRAY_CLEAR	src/openvpn/buffer.h	846;"	d
ALLOC_ARRAY_CLEAR_GC	src/openvpn/buffer.h	852;"	d
ALLOC_ARRAY_GC	src/openvpn/buffer.h	841;"	d
ALLOC_OBJ	src/openvpn/buffer.h	825;"	d
ALLOC_OBJ_CLEAR	src/openvpn/buffer.h	830;"	d
ALLOC_OBJ_CLEAR_GC	src/openvpn/buffer.h	867;"	d
ALLOC_OBJ_GC	src/openvpn/buffer.h	862;"	d
ALLOC_VAR_ARRAY_CLEAR_GC	src/openvpn/buffer.h	857;"	d
ANY_OUT	src/openvpn/forward.h	41;"	d
APA_CAT	src/openvpn/misc.h	343;"	d
ARP_MAC_ADDR_TYPE	src/openvpn/proto.h	68;"	d
ARP_REPLY	src/openvpn/proto.h	76;"	d
ARP_REQUEST	src/openvpn/proto.h	75;"	d
AR_INTERACT	src/openvpn/options.h	763;"	d
AR_NOINTERACT	src/openvpn/options.h	764;"	d
AR_NONE	src/openvpn/options.h	762;"	d
ASSERT	src/openvpn/error.h	214;"	d
AUTO_USERID	src/openvpn/syshead.h	706;"	d
AUTO_USERID	src/openvpn/syshead.h	708;"	d
AddToMessageLog	src/openvpnserv/service.c	/^void AddToMessageLog(DWORD flags, LPTSTR lpszMsg)$/;"	f
BASE_N_EVENTS	src/openvpn/init.h	34;"	d
BASIC_H	src/openvpn/basic.h	26;"	d
BCAP	src/openvpn/buffer.h	118;"	d
BDEF	src/openvpn/buffer.h	116;"	d
BELOW_NORMAL_PRIORITY_CLASS	src/openvpnserv/openvpnserv.c	55;"	d	file:
BEND	src/openvpn/buffer.h	113;"	d
BIG_TIMEOUT	src/openvpn/common.h	51;"	d
BLAST	src/openvpn/buffer.h	114;"	d
BLEN	src/openvpn/buffer.h	115;"	d
BOOL_CAST	src/openvpn/basic.h	28;"	d
BOOTPC_PORT	src/openvpn/dhcp.h	52;"	d
BOOTPS_PORT	src/openvpn/dhcp.h	51;"	d
BOOTREPLY	src/openvpn/dhcp.h	56;"	d
BOOTREQUEST	src/openvpn/dhcp.h	55;"	d
BPTR	src/openvpn/buffer.h	112;"	d
BSTR	src/openvpn/buffer.h	117;"	d
BUFFER_H	src/openvpn/buffer.h	26;"	d
BUF_INIT_TRACKING	src/openvpn/buffer.h	43;"	d
BUF_SIZE	src/openvpn/mtu.h	192;"	d
BUF_SIZE_MAX	src/openvpn/buffer.h	31;"	d
CAPI_DATA	src/openvpn/cryptoapi.c	/^} CAPI_DATA;$/;"	t	typeref:struct:_CAPI_DATA	file:
CAS_FAILED	src/openvpn/openvpn.h	466;"	d
CAS_PARTIAL	src/openvpn/openvpn.h	467;"	d
CAS_PENDING	src/openvpn/openvpn.h	465;"	d
CAS_SUCCEEDED	src/openvpn/openvpn.h	464;"	d
CCD_DEFAULT	src/openvpn/common.h	74;"	d
CC_ALNUM	src/openvpn/buffer.h	711;"	d
CC_ALPHA	src/openvpn/buffer.h	712;"	d
CC_ANY	src/openvpn/buffer.h	708;"	d
CC_ASCII	src/openvpn/buffer.h	713;"	d
CC_ASTERISK	src/openvpn/buffer.h	741;"	d
CC_AT	src/openvpn/buffer.h	735;"	d
CC_BACKSLASH	src/openvpn/buffer.h	725;"	d
CC_BLANK	src/openvpn/buffer.h	721;"	d
CC_CNTRL	src/openvpn/buffer.h	714;"	d
CC_COLON	src/openvpn/buffer.h	730;"	d
CC_COMMA	src/openvpn/buffer.h	729;"	d
CC_CR	src/openvpn/buffer.h	723;"	d
CC_CRLF	src/openvpn/buffer.h	745;"	d
CC_DASH	src/openvpn/buffer.h	727;"	d
CC_DIGIT	src/openvpn/buffer.h	715;"	d
CC_DOT	src/openvpn/buffer.h	728;"	d
CC_DOUBLE_QUOTE	src/openvpn/buffer.h	733;"	d
CC_EQUAL	src/openvpn/buffer.h	736;"	d
CC_EXCLUDE	src/openvpn/buffer.c	895;"	d	file:
CC_GC_FREE	src/openvpn/init.h	95;"	d
CC_GREATER_THAN	src/openvpn/buffer.h	738;"	d
CC_HARD_USR1_TO_HUP	src/openvpn/init.h	97;"	d
CC_INCLUDE	src/openvpn/buffer.c	894;"	d	file:
CC_LESS_THAN	src/openvpn/buffer.h	737;"	d
CC_NAME	src/openvpn/buffer.h	744;"	d
CC_NEWLINE	src/openvpn/buffer.h	722;"	d
CC_NO_CLOSE	src/openvpn/init.h	98;"	d
CC_NULL	src/openvpn/buffer.h	709;"	d
CC_PIPE	src/openvpn/buffer.h	739;"	d
CC_PRINT	src/openvpn/buffer.h	716;"	d
CC_PUNCT	src/openvpn/buffer.h	717;"	d
CC_QUESTION_MARK	src/openvpn/buffer.h	740;"	d
CC_REPLACE	src/openvpn/buffer.c	896;"	d	file:
CC_REVERSE_QUOTE	src/openvpn/buffer.h	734;"	d
CC_SINGLE_QUOTE	src/openvpn/buffer.h	732;"	d
CC_SLASH	src/openvpn/buffer.h	731;"	d
CC_SPACE	src/openvpn/buffer.h	718;"	d
CC_UNDERBAR	src/openvpn/buffer.h	726;"	d
CC_USR1_TO_HUP	src/openvpn/init.h	96;"	d
CC_XDIGIT	src/openvpn/buffer.h	719;"	d
CERT_STORE_OPEN_EXISTING_FLAG	src/openvpn/cryptoapi.c	65;"	d	file:
CERT_STORE_READONLY_FLAG	src/openvpn/cryptoapi.c	62;"	d	file:
CERT_SYSTEM_STORE_CURRENT_USER	src/openvpn/cryptoapi.c	59;"	d	file:
CERT_SYSTEM_STORE_CURRENT_USER_ID	src/openvpn/cryptoapi.c	56;"	d	file:
CERT_SYSTEM_STORE_LOCATION_SHIFT	src/openvpn/cryptoapi.c	53;"	d	file:
CE_DISABLED	src/openvpn/options.h	131;"	d
CE_MAN_QUERY_PROXY	src/openvpn/options.h	132;"	d
CE_MAN_QUERY_REMOTE_ACCEPT	src/openvpn/options.h	135;"	d
CE_MAN_QUERY_REMOTE_MASK	src/openvpn/options.h	138;"	d
CE_MAN_QUERY_REMOTE_MOD	src/openvpn/options.h	136;"	d
CE_MAN_QUERY_REMOTE_QUERY	src/openvpn/options.h	134;"	d
CE_MAN_QUERY_REMOTE_SHIFT	src/openvpn/options.h	139;"	d
CE_MAN_QUERY_REMOTE_SKIP	src/openvpn/options.h	137;"	d
CE_MAN_QUERY_REMOTE_UNDEF	src/openvpn/options.h	133;"	d
CF_INIT_TLS_AUTH_STANDALONE	src/openvpn/init.c	58;"	d	file:
CF_INIT_TLS_MULTI	src/openvpn/init.c	57;"	d	file:
CF_LOAD_PERSISTED_PACKET_ID	src/openvpn/init.c	56;"	d	file:
CHKACC_ACPTSTDIN	src/openvpn/options.c	2559;"	d	file:
CHKACC_DIRPATH	src/openvpn/options.c	2556;"	d	file:
CHKACC_FILE	src/openvpn/options.c	2555;"	d	file:
CHKACC_FILEXSTWR	src/openvpn/options.c	2557;"	d	file:
CHKACC_INLINE	src/openvpn/options.c	2558;"	d	file:
CIPHER_ENABLED	src/openvpn/openvpn.h	590;"	d
CIPHER_ENABLED	src/openvpn/openvpn.h	592;"	d
CIRC_LIST	src/openvpn/circ_list.h	32;"	d
CIRC_LIST_ALLOC	src/openvpn/circ_list.h	65;"	d
CIRC_LIST_FREE	src/openvpn/circ_list.h	75;"	d
CIRC_LIST_H	src/openvpn/circ_list.h	26;"	d
CIRC_LIST_INDEX	src/openvpn/circ_list.h	51;"	d
CIRC_LIST_ITEM	src/openvpn/circ_list.h	56;"	d
CIRC_LIST_PUSH	src/openvpn/circ_list.h	41;"	d
CIRC_LIST_RESET	src/openvpn/circ_list.h	59;"	d
CIRC_LIST_SIZE	src/openvpn/circ_list.h	48;"	d
CLEAR	src/openvpn/basic.h	34;"	d
CLEAR	src/openvpnserv/openvpnserv.c	85;"	d	file:
CLINAT_H	src/openvpn/clinat.h	26;"	d
CM_CHILD_TCP	src/openvpn/openvpn.h	522;"	d
CM_CHILD_UDP	src/openvpn/openvpn.h	521;"	d
CM_P2P	src/openvpn/openvpn.h	518;"	d
CM_TOP	src/openvpn/openvpn.h	519;"	d
CM_TOP_CLONE	src/openvpn/openvpn.h	520;"	d
CN_DNAT	src/openvpn/clinat.h	37;"	d
CN_INCOMING	src/openvpn/clinat.h	33;"	d
CN_OUTGOING	src/openvpn/clinat.h	32;"	d
CN_SNAT	src/openvpn/clinat.h	36;"	d
COMMAND_EXIT	src/openvpn/ps.c	50;"	d	file:
COMMAND_EXIT	src/plugins/auth-pam/auth-pam.c	57;"	d	file:
COMMAND_EXIT	src/plugins/down-root/down-root.c	50;"	d	file:
COMMAND_REDIRECT	src/openvpn/ps.c	49;"	d	file:
COMMAND_RUN_SCRIPT	src/plugins/down-root/down-root.c	49;"	d	file:
COMMAND_VERIFY	src/plugins/auth-pam/auth-pam.c	56;"	d	file:
COMMON_H	src/openvpn/common.h	26;"	d
COMMON_NAME_CHAR_CLASS	src/openvpn/ssl_verify.c	56;"	d	file:
COMPAT_FLAG_QUERY	src/openvpn/misc.h	366;"	d
COMPAT_FLAG_SET	src/openvpn/misc.h	367;"	d
COMPAT_H	src/compat/compat.h	26;"	d
COMPAT_NAMES	src/openvpn/misc.h	368;"	d
COMPAT_NO_NAME_REMAPPING	src/openvpn/misc.h	369;"	d
COMPRESS_THRESHOLD	src/openvpn/lzo.h	105;"	d
CONFIG	build/msvc/msvc-generate/Makefile.mak	/^CONFIG=$(SOURCEBASE)\/version.m4$/;"	m
CONFIGURATIONS	msvc-build.bat	/^set CONFIGURATIONS=Release$/;"	v
CONFIGURE_DEFINES	config-msvc.h	3;"	d
CONNECTION_ESTABLISHED	src/openvpn/forward-inline.h	292;"	d
CONNECTION_LIST_SIZE	src/openvpn/options.h	150;"	d
CONNECT_NONBLOCK	src/openvpn/syshead.h	699;"	d
CONSOLE_H	src/openvpn/console.h	26;"	d
CONTROL_SEND_ACK_MAX	src/openvpn/ssl.h	85;"	d
CO_IGNORE_PACKET_ID	src/openvpn/crypto.h	153;"	d
CO_MUTE_REPLAY_WARNINGS	src/openvpn/crypto.h	159;"	d
CO_PACKET_ID_LONG_FORM	src/openvpn/crypto.h	146;"	d
CO_USE_IV	src/openvpn/crypto.h	149;"	d
CPPFLAGS	msvc-env.bat	/^if exist config-msvc-local.h set CPPFLAGS="%CPPFLAGS%;HAVE_CONFIG_MSVC_LOCAL_H"$/;"	v
CPPFLAGS	msvc-env.bat	/^set CPPFLAGS=%CPPFLAGS%;%EXTRA_CPPFLAGS%$/;"	v
CPPFLAGS	msvc-env.bat	/^set CPPFLAGS=%CPPFLAGS%;NTDDI_VERSION=NTDDI_WINXP;_WIN32_WINNT=_WIN32_WINNT_WINXP$/;"	v
CPPFLAGS	msvc-env.bat	/^set CPPFLAGS=%CPPFLAGS%;_CRT_SECURE_NO_WARNINGS;WIN32_LEAN_AND_MEAN;_CRT_NONSTDC_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS$/;"	v
CPPFLAGS	msvc-env.bat	/^set CPPFLAGS=%CPPFLAGS%;_USE_32BIT_TIME_T$/;"	v
CRYPTOAPI_F_CERT_FIND_CERTIFICATE_IN_STORE	src/openvpn/cryptoapi.c	75;"	d	file:
CRYPTOAPI_F_CERT_OPEN_SYSTEM_STORE	src/openvpn/cryptoapi.c	74;"	d	file:
CRYPTOAPI_F_CRYPT_ACQUIRE_CERTIFICATE_PRIVATE_KEY	src/openvpn/cryptoapi.c	76;"	d	file:
CRYPTOAPI_F_CRYPT_CREATE_HASH	src/openvpn/cryptoapi.c	77;"	d	file:
CRYPTOAPI_F_CRYPT_GET_HASH_PARAM	src/openvpn/cryptoapi.c	78;"	d	file:
CRYPTOAPI_F_CRYPT_SET_HASH_PARAM	src/openvpn/cryptoapi.c	79;"	d	file:
CRYPTOAPI_F_CRYPT_SIGN_HASH	src/openvpn/cryptoapi.c	80;"	d	file:
CRYPTOAPI_F_GET_PROC_ADDRESS	src/openvpn/cryptoapi.c	82;"	d	file:
CRYPTOAPI_F_LOAD_LIBRARY	src/openvpn/cryptoapi.c	81;"	d	file:
CRYPTOAPI_str_functs	src/openvpn/cryptoapi.c	/^static ERR_STRING_DATA CRYPTOAPI_str_functs[] =	{$/;"	v	file:
CRYPTOAPIerr	src/openvpn/cryptoapi.c	73;"	d	file:
CRYPTO_BACKEND_H_	src/openvpn/crypto_backend.h	31;"	d
CRYPTO_H	src/openvpn/crypto.h	31;"	d
CRYPTO_OPENSSL_H_	src/openvpn/crypto_openssl.h	31;"	d
CRYPTO_POLARSSL_H_	src/openvpn/crypto_polarssl.h	31;"	d
CRYPT_ERROR	src/openvpn/crypto.c	65;"	d	file:
CR_ECHO	src/openvpn/misc.h	219;"	d
CR_RESPONSE	src/openvpn/misc.h	220;"	d
CmdDebugService	src/openvpnserv/service.c	/^void CmdDebugService(int argc, char ** argv)$/;"	f
CmdInstallService	src/openvpnserv/service.c	/^int CmdInstallService()$/;"	f
CmdRemoveService	src/openvpnserv/service.c	/^int CmdRemoveService()$/;"	f
CmdStartService	src/openvpnserv/service.c	/^int CmdStartService()$/;"	f
ControlHandler	src/openvpnserv/service.c	/^BOOL WINAPI ControlHandler ( DWORD dwCtrlType )$/;"	f
CreateProcess	ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CvtHex	src/openvpn/httpdigest.c	/^CvtHex($/;"	f	file:
DAF_CONNECTION_CLOSED	src/openvpn/manage.h	49;"	d
DAF_CONNECTION_ESTABLISHED	src/openvpn/manage.h	48;"	d
DAF_INITIAL_AUTH	src/openvpn/manage.h	50;"	d
DEBUG	src/plugins/auth-pam/auth-pam.c	53;"	d	file:
DEBUG	src/plugins/down-root/down-root.c	46;"	d	file:
DEBUG_LEVEL_USEC_TIME	src/openvpn/errlevel.h	34;"	d
DECODE_ERROR	src/openvpn/base64.c	105;"	d	file:
DECODE_MUTE_LEVEL	src/openvpn/error.h	124;"	d
DECRYPT_KEY_ENABLED	src/openvpn/ssl_verify.h	93;"	d
DEFAULT_SEQ_BACKTRACK	src/openvpn/packet_id.h	107;"	d
DEFAULT_TIME_BACKTRACK	src/openvpn/packet_id.h	116;"	d
DES_KEY_LENGTH	src/openvpn/crypto_openssl.h	70;"	d
DES_KEY_LENGTH	src/openvpn/crypto_polarssl.h	73;"	d
DES_cblock	src/openvpn/crypto_openssl.c	74;"	d	file:
DES_check_key_parity	src/openvpn/crypto_openssl.c	76;"	d	file:
DES_is_weak_key	src/openvpn/crypto_openssl.c	75;"	d	file:
DES_set_odd_parity	src/openvpn/crypto_openssl.c	77;"	d	file:
DEV_TYPE_NULL	src/openvpn/proto.h	37;"	d
DEV_TYPE_TAP	src/openvpn/proto.h	39;"	d
DEV_TYPE_TUN	src/openvpn/proto.h	38;"	d
DEV_TYPE_UNDEF	src/openvpn/proto.h	36;"	d
DHCPACK	src/openvpn/dhcp.h	45;"	d
DHCPDECLINE	src/openvpn/dhcp.h	44;"	d
DHCPDISCOVER	src/openvpn/dhcp.h	41;"	d
DHCPINFORM	src/openvpn/dhcp.h	48;"	d
DHCPNAK	src/openvpn/dhcp.h	46;"	d
DHCPOFFER	src/openvpn/dhcp.h	42;"	d
DHCPRELEASE	src/openvpn/dhcp.h	47;"	d
DHCPREQUEST	src/openvpn/dhcp.h	43;"	d
DHCP_END	src/openvpn/dhcp.h	38;"	d
DHCP_H	src/openvpn/dhcp.h	26;"	d
DHCP_MSG_TYPE	src/openvpn/dhcp.h	37;"	d
DHCP_OPTIONS_BUFFER_SIZE	src/openvpn/dhcp.h	79;"	d
DHCP_PAD	src/openvpn/dhcp.h	35;"	d
DHCP_ROUTER	src/openvpn/dhcp.h	36;"	d
DHCP_STATUS_DISABLED	src/openvpn/tun.c	3782;"	d	file:
DHCP_STATUS_ENABLED	src/openvpn/tun.c	3781;"	d	file:
DHCP_STATUS_UNDEF	src/openvpn/tun.c	3780;"	d	file:
DO_VCBUILD	msvc-build.bat	/^if errorlevel 1 set DO_VCBUILD=1$/;"	v
DUP_CN	src/openvpn/pool.c	511;"	d	file:
D_ALIGN_DEBUG	src/openvpn/errlevel.h	140;"	d
D_ALIGN_ERRORS	src/openvpn/errlevel.h	71;"	d
D_ARGV	src/openvpn/errlevel.h	76;"	d
D_ARGV_PARSE_CMD	src/openvpn/errlevel.h	146;"	d
D_AUTH	src/openvpn/errlevel.h	86;"	d
D_AUTO_USERID	src/openvpn/errlevel.h	144;"	d
D_CLIENT_NAT	src/openvpn/errlevel.h	117;"	d
D_CLOSE	src/openvpn/errlevel.h	74;"	d
D_COMP	src/openvpn/errlevel.h	162;"	d
D_COMP_ERRORS	src/openvpn/errlevel.h	62;"	d
D_COMP_LOW	src/openvpn/errlevel.h	127;"	d
D_CONNECTION_LIST	src/openvpn/errlevel.h	128;"	d
D_CRYPTO_DEBUG	src/openvpn/errlevel.h	147;"	d
D_CRYPT_ERRORS	src/openvpn/errlevel.h	59;"	d
D_DHCP_OPT	src/openvpn/errlevel.h	99;"	d
D_EVENT_ERRORS	src/openvpn/errlevel.h	67;"	d
D_EVENT_WAIT	src/openvpn/errlevel.h	158;"	d
D_FRAG_DEBUG	src/openvpn/errlevel.h	122;"	d
D_FRAG_ERRORS	src/openvpn/errlevel.h	70;"	d
D_GENKEY	src/openvpn/errlevel.h	80;"	d
D_GREMLIN	src/openvpn/errlevel.h	79;"	d
D_GREMLIN_VERBOSE	src/openvpn/errlevel.h	156;"	d
D_HANDSHAKE	src/openvpn/errlevel.h	73;"	d
D_HANDSHAKE_VERBOSE	src/openvpn/errlevel.h	152;"	d
D_IFCONFIG_POOL	src/openvpn/errlevel.h	85;"	d
D_IMPORT_ERRORS	src/openvpn/errlevel.h	65;"	d
D_INIT_MEDIUM	src/openvpn/errlevel.h	106;"	d
D_INTERVAL	src/openvpn/errlevel.h	154;"	d
D_LINK_ERRORS	src/openvpn/errlevel.h	58;"	d
D_LINK_RW	src/openvpn/errlevel.h	114;"	d
D_LINK_RW_VERBOSE	src/openvpn/errlevel.h	167;"	d
D_LOG_RW	src/openvpn/errlevel.h	112;"	d
D_LOW	src/openvpn/errlevel.h	98;"	d
D_MANAGEMENT	src/openvpn/errlevel.h	89;"	d
D_MANAGEMENT_DEBUG	src/openvpn/errlevel.h	136;"	d
D_MBUF	src/openvpn/errlevel.h	100;"	d
D_MSS	src/openvpn/errlevel.h	126;"	d
D_MTU_DEBUG	src/openvpn/errlevel.h	124;"	d
D_MTU_INFO	src/openvpn/errlevel.h	107;"	d
D_MULTI_DEBUG	src/openvpn/errlevel.h	125;"	d
D_MULTI_DROPPED	src/openvpn/errlevel.h	103;"	d
D_MULTI_ERRORS	src/openvpn/errlevel.h	66;"	d
D_MULTI_LOW	src/openvpn/errlevel.h	87;"	d
D_MULTI_MEDIUM	src/openvpn/errlevel.h	104;"	d
D_MULTI_TCP	src/openvpn/errlevel.h	159;"	d
D_OPENSSL_LOCK	src/openvpn/errlevel.h	175;"	d
D_OSBUF	src/openvpn/errlevel.h	92;"	d
D_PACKET_CONTENT	src/openvpn/errlevel.h	164;"	d
D_PACKET_TRUNC_DEBUG	src/openvpn/errlevel.h	141;"	d
D_PACKET_TRUNC_ERR	src/openvpn/errlevel.h	101;"	d
D_PF_DEBUG	src/openvpn/errlevel.h	150;"	d
D_PF_DROPPED	src/openvpn/errlevel.h	102;"	d
D_PF_DROPPED_BCAST	src/openvpn/errlevel.h	149;"	d
D_PF_INFO	src/openvpn/errlevel.h	94;"	d
D_PID_DEBUG	src/openvpn/errlevel.h	148;"	d
D_PID_DEBUG_LOW	src/openvpn/errlevel.h	109;"	d
D_PID_DEBUG_MEDIUM	src/openvpn/errlevel.h	110;"	d
D_PID_PERSIST	src/openvpn/errlevel.h	69;"	d
D_PID_PERSIST_DEBUG	src/openvpn/errlevel.h	166;"	d
D_PING	src/openvpn/errlevel.h	142;"	d
D_PKCS11_DEBUG	src/openvpn/errlevel.h	170;"	d
D_PLUGIN	src/openvpn/errlevel.h	88;"	d
D_PLUGIN_DEBUG	src/openvpn/errlevel.h	137;"	d
D_PROXY	src/openvpn/errlevel.h	75;"	d
D_PS_PROXY	src/openvpn/errlevel.h	93;"	d
D_PS_PROXY_DEBUG	src/openvpn/errlevel.h	143;"	d
D_PUSH	src/openvpn/errlevel.h	84;"	d
D_PUSH_ERRORS	src/openvpn/errlevel.h	68;"	d
D_READ_WRITE	src/openvpn/errlevel.h	163;"	d
D_REGISTRY	src/openvpn/errlevel.h	174;"	d
D_REL_DEBUG	src/openvpn/errlevel.h	157;"	d
D_REL_LOW	src/openvpn/errlevel.h	121;"	d
D_REPLAY_ERRORS	src/openvpn/errlevel.h	63;"	d
D_RESOLVE_ERRORS	src/openvpn/errlevel.h	61;"	d
D_RESTART	src/openvpn/errlevel.h	83;"	d
D_ROUTE	src/openvpn/errlevel.h	81;"	d
D_ROUTE_DEBUG	src/openvpn/errlevel.h	131;"	d
D_ROUTE_QUOTA	src/openvpn/errlevel.h	91;"	d
D_SCHEDULER	src/openvpn/errlevel.h	155;"	d
D_SCHED_EXIT	src/openvpn/errlevel.h	90;"	d
D_SCRIPT	src/openvpn/errlevel.h	129;"	d
D_SEMAPHORE	src/openvpn/errlevel.h	134;"	d
D_SEMAPHORE_LOW	src/openvpn/errlevel.h	133;"	d
D_SHAPER_DEBUG	src/openvpn/errlevel.h	172;"	d
D_SHOW_KEYS	src/openvpn/errlevel.h	119;"	d
D_SHOW_KEY_SOURCE	src/openvpn/errlevel.h	120;"	d
D_SHOW_NET	src/openvpn/errlevel.h	130;"	d
D_SHOW_OCC	src/openvpn/errlevel.h	97;"	d
D_SHOW_OCC_HASH	src/openvpn/errlevel.h	108;"	d
D_SHOW_PARMS	src/openvpn/errlevel.h	96;"	d
D_SHOW_PKCS11	src/openvpn/errlevel.h	139;"	d
D_SOCKET_DEBUG	src/openvpn/errlevel.h	138;"	d
D_STREAM_DEBUG	src/openvpn/errlevel.h	168;"	d
D_STREAM_ERRORS	src/openvpn/errlevel.h	64;"	d
D_TAP_WIN_DEBUG	src/openvpn/errlevel.h	116;"	d
D_TEST_FILE	src/openvpn/errlevel.h	135;"	d
D_TLS_DEBUG	src/openvpn/errlevel.h	161;"	d
D_TLS_DEBUG_LOW	src/openvpn/errlevel.h	78;"	d
D_TLS_DEBUG_MED	src/openvpn/errlevel.h	153;"	d
D_TLS_ERRORS	src/openvpn/errlevel.h	60;"	d
D_TLS_KEYSELECT	src/openvpn/errlevel.h	145;"	d
D_TLS_NO_SEND_KEY	src/openvpn/errlevel.h	165;"	d
D_TLS_STATE_ERRORS	src/openvpn/errlevel.h	132;"	d
D_TUNTAP_INFO	src/openvpn/errlevel.h	82;"	d
D_TUN_RW	src/openvpn/errlevel.h	115;"	d
D_WIN32_IO	src/openvpn/errlevel.h	169;"	d
D_WIN32_IO_LOW	src/openvpn/errlevel.h	123;"	d
D_X509_ATTR	src/openvpn/errlevel.h	105;"	d
DigestCalcHA1	src/openvpn/httpdigest.c	/^DigestCalcHA1($/;"	f
DigestCalcResponse	src/openvpn/httpdigest.c	/^DigestCalcResponse($/;"	f
EKS_INPUT	src/openvpn/manage.h	280;"	d
EKS_READY	src/openvpn/manage.h	281;"	d
EKS_SOLICIT	src/openvpn/manage.h	279;"	d
EKS_UNDEF	src/openvpn/manage.h	278;"	d
EMPTY_ARRAY_SIZE	config-msvc.h	86;"	d
EMPTY_ARRAY_SIZE	src/openvpn/syshead.h	385;"	d
EMPTY_ARRAY_SIZE	src/openvpn/syshead.h	386;"	d
ENABLE_BUFFER_LIST	src/openvpn/syshead.h	599;"	d
ENABLE_CLIENT_CR	src/openvpn/syshead.h	715;"	d
ENABLE_CLIENT_NAT	src/openvpn/syshead.h	728;"	d
ENABLE_CLIENT_SERVER	config-msvc.h	7;"	d
ENABLE_CRYPTO	config-msvc.h	8;"	d
ENABLE_CRYPTOAPI	src/openvpn/syshead.h	637;"	d
ENABLE_CRYPTO_OPENSSL	config-msvc.h	9;"	d
ENABLE_DEBUG	config-msvc.h	10;"	d
ENABLE_DEF_AUTH	config-msvc.h	5;"	d
ENABLE_DEF_AUTH	src/openvpn/syshead.h	551;"	d
ENABLE_EUREPHIA	config-msvc.h	11;"	d
ENABLE_FEATURE_EXECVE	src/openvpn/syshead.h	513;"	d
ENABLE_FEATURE_SHAPER	src/openvpn/syshead.h	692;"	d
ENABLE_FRAGMENT	config-msvc.h	12;"	d
ENABLE_HTTP_PROXY	config-msvc.h	13;"	d
ENABLE_IP_PKTINFO	src/openvpn/syshead.h	430;"	d
ENABLE_IP_PKTINFO	src/openvpn/syshead.h	432;"	d
ENABLE_LZO	config-msvc.h	14;"	d
ENABLE_MANAGEMENT	config-msvc.h	15;"	d
ENABLE_MEMSTATS	src/openvpn/syshead.h	734;"	d
ENABLE_MULTIHOME	config-msvc.h	16;"	d
ENABLE_OCC	src/openvpn/syshead.h	605;"	d
ENABLE_PF	config-msvc.h	6;"	d
ENABLE_PF	src/openvpn/syshead.h	584;"	d
ENABLE_PKCS11	config-msvc.h	17;"	d
ENABLE_PLUGIN	config-msvc.h	18;"	d
ENABLE_PORT_SHARE	config-msvc.h	19;"	d
ENABLE_PREDICTION_RESISTANCE	src/openvpn/syshead.h	563;"	d
ENABLE_PUSH_PEER_INFO	src/openvpn/syshead.h	722;"	d
ENABLE_SOCKS	config-msvc.h	20;"	d
ENABLE_SSL	config-msvc.h	21;"	d
ENABLE_SSL	sample/sample-plugins/log/log_v3.c	39;"	d	file:
ENABLE_X509_TRACK	src/openvpn/syshead.h	644;"	d
ENCODE_MUTE_LEVEL	src/openvpn/error.h	123;"	d
EPOLL	src/openvpn/syshead.h	660;"	d
EPOLL	src/openvpn/syshead.h	662;"	d
ERRLEVEL_H	src/openvpn/errlevel.h	26;"	d
ERROR_H	src/openvpn/error.h	26;"	d
ERR_BUF_SIZE	src/openvpn/error.h	33;"	d
ERR_BUF_SIZE	src/openvpn/error.h	35;"	d
ERR_LIB_CRYPTOAPI	src/openvpn/cryptoapi.c	72;"	d	file:
ERR_MAP_SZ	src/openvpn/cryptoapi.c	136;"	d	file:
ES_ERROR	src/openvpn/openvpn.h	245;"	d
ES_TIMEOUT	src/openvpn/openvpn.h	246;"	d
ETHERNET_MTU	src/openvpn/mtu.h	55;"	d
ETT_DEFAULT	src/openvpn/interval.h	199;"	d
EVENT_H	src/openvpn/event.h	26;"	d
EVENT_LOOP_CHECK_SIGNAL	src/openvpn/openvpn.h	554;"	d
EVENT_METHOD_FAST	src/openvpn/event.h	43;"	d
EVENT_METHOD_US_TIMEOUT	src/openvpn/event.h	42;"	d
EVENT_READ	src/openvpn/event.h	37;"	d
EVENT_UNDEF	src/openvpn/event.h	36;"	d
EVENT_WRITE	src/openvpn/event.h	38;"	d
EVP_CIPHER_mode	src/openvpn/crypto_openssl.c	71;"	d	file:
EVP_CIPHER_mode	src/openvpn/crypto_openssl.c	72;"	d	file:
EVP_CIPHER_name	src/openvpn/crypto_openssl.c	89;"	d	file:
EVP_MD_CTX_cleanup	src/openvpn/crypto_openssl.c	82;"	d	file:
EVP_MD_name	src/openvpn/crypto_openssl.c	93;"	d	file:
EXIT_EVENT_NAME	src/openvpnserv/openvpnserv.c	74;"	d	file:
EXPANDED_SIZE	src/openvpn/mtu.h	170;"	d
EXPANDED_SIZE_DYNAMIC	src/openvpn/mtu.h	171;"	d
EXPANDED_SIZE_MIN	src/openvpn/mtu.h	172;"	d
EXPONENTIAL_BACKOFF	src/openvpn/reliable.h	47;"	d
EXTENDED_SOCKET_ERROR_CAPABILITY	src/openvpn/syshead.h	420;"	d
EXTENDED_SOCKET_ERROR_CAPABILITY	src/openvpn/syshead.h	422;"	d
EXTRA_FRAME	src/openvpn/mtu.h	143;"	d
FAILURE	src/openvpn/ssl_verify_backend.h	/^typedef enum { SUCCESS=0, FAILURE=1 } result_t;$/;"	e	enum:__anon10
FORWARD_H	src/openvpn/forward.h	33;"	d
FORWARD_INLINE_H	src/openvpn/forward-inline.h	26;"	d
FRAGMENT_H	src/openvpn/fragment.h	26;"	d
FRAG_ERR	src/openvpn/fragment.c	40;"	d	file:
FRAG_EXTRA_MASK	src/openvpn/fragment.h	251;"	d
FRAG_EXTRA_SHIFT	src/openvpn/fragment.h	253;"	d
FRAG_ID_MASK	src/openvpn/fragment.h	224;"	d
FRAG_ID_SHIFT	src/openvpn/fragment.h	226;"	d
FRAG_MAP_MASK	src/openvpn/fragment.h	72;"	d
FRAG_SEQ_ID_MASK	src/openvpn/fragment.h	220;"	d
FRAG_SEQ_ID_SHIFT	src/openvpn/fragment.h	222;"	d
FRAG_SIZE_MASK	src/openvpn/fragment.h	238;"	d
FRAG_SIZE_ROUND_MASK	src/openvpn/fragment.h	243;"	d
FRAG_SIZE_ROUND_SHIFT	src/openvpn/fragment.h	242;"	d
FRAG_SIZE_SHIFT	src/openvpn/fragment.h	240;"	d
FRAG_TEST	src/openvpn/fragment.h	215;"	d
FRAG_TTL_SEC	src/openvpn/fragment.h	55;"	d
FRAG_TYPE_MASK	src/openvpn/fragment.h	203;"	d
FRAG_TYPE_SHIFT	src/openvpn/fragment.h	205;"	d
FRAG_WAKEUP_INTERVAL	src/openvpn/fragment.h	58;"	d
FRAG_WHOLE	src/openvpn/fragment.h	207;"	d
FRAG_YES_LAST	src/openvpn/fragment.h	212;"	d
FRAG_YES_NOTLAST	src/openvpn/fragment.h	209;"	d
FRAME_HEADROOM	src/openvpn/mtu.h	185;"	d
FRAME_HEADROOM_ADJ	src/openvpn/mtu.h	186;"	d
FRAME_HEADROOM_BASE	src/openvpn/mtu.h	184;"	d
FRAME_HEADROOM_MARKER_DECRYPT	src/openvpn/mtu.h	130;"	d
FRAME_HEADROOM_MARKER_FRAGMENT	src/openvpn/mtu.h	131;"	d
FRAME_HEADROOM_MARKER_READ_LINK	src/openvpn/mtu.h	132;"	d
FRAME_HEADROOM_MARKER_READ_STREAM	src/openvpn/mtu.h	133;"	d
FULL_SYNC	src/openvpn/ssl.c	1667;"	d	file:
F_OK	config-msvc.h	108;"	d
ForReading	build/msvc/msvc-generate/msvc-generate.js	/^var ForReading = 1;$/;"	v
GENERAL_PROXY_SUPPORT	src/openvpn/syshead.h	630;"	d
GETADDR_FATAL	src/openvpn/socket.h	475;"	d
GETADDR_FATAL_ON_SIGNAL	src/openvpn/socket.h	478;"	d
GETADDR_HOST_ORDER	src/openvpn/socket.h	476;"	d
GETADDR_MENTION_RESOLVE_RETRY	src/openvpn/socket.h	477;"	d
GETADDR_MSG_VIRT_OUT	src/openvpn/socket.h	480;"	d
GETADDR_RANDOMIZE	src/openvpn/socket.h	483;"	d
GETADDR_RESOLVE	src/openvpn/socket.h	474;"	d
GETADDR_TRY_ONCE	src/openvpn/socket.h	481;"	d
GETADDR_UPDATE_MANAGEMENT_STATE	src/openvpn/socket.h	482;"	d
GETADDR_WARN_ON_SIGNAL	src/openvpn/socket.h	479;"	d
GET_USER_PASS_DYNAMIC_CHALLENGE	src/openvpn/misc.h	256;"	d
GET_USER_PASS_MANAGEMENT	src/openvpn/misc.h	248;"	d
GET_USER_PASS_NEED_OK	src/openvpn/misc.h	251;"	d
GET_USER_PASS_NEED_STR	src/openvpn/misc.h	253;"	d
GET_USER_PASS_NOFATAL	src/openvpn/misc.h	252;"	d
GET_USER_PASS_PASSWORD_ONLY	src/openvpn/misc.h	250;"	d
GET_USER_PASS_PREVIOUS_CREDS_FAILED	src/openvpn/misc.h	254;"	d
GET_USER_PASS_SENSITIVE	src/openvpn/misc.h	249;"	d
GET_USER_PASS_STATIC_CHALLENGE	src/openvpn/misc.h	257;"	d
GET_USER_PASS_STATIC_CHALLENGE_ECHO	src/openvpn/misc.h	258;"	d
GHK_INLINE	src/openvpn/crypto.h	348;"	d
GREMLIN_CONNECTION_FLOOD_LEVEL	src/openvpn/gremlin.h	53;"	d
GREMLIN_CONNECTION_FLOOD_MASK	src/openvpn/gremlin.h	35;"	d
GREMLIN_CONNECTION_FLOOD_SHIFT	src/openvpn/gremlin.h	34;"	d
GREMLIN_CORRUPT_LEVEL	src/openvpn/gremlin.h	55;"	d
GREMLIN_CORRUPT_MASK	src/openvpn/gremlin.h	41;"	d
GREMLIN_CORRUPT_SHIFT	src/openvpn/gremlin.h	40;"	d
GREMLIN_DROP_LEVEL	src/openvpn/gremlin.h	57;"	d
GREMLIN_DROP_MASK	src/openvpn/gremlin.h	49;"	d
GREMLIN_DROP_SHIFT	src/openvpn/gremlin.h	48;"	d
GREMLIN_H	src/openvpn/gremlin.h	26;"	d
GREMLIN_PACKET_FLOOD_LEVEL	src/openvpn/gremlin.h	54;"	d
GREMLIN_PACKET_FLOOD_MASK	src/openvpn/gremlin.h	38;"	d
GREMLIN_PACKET_FLOOD_SHIFT	src/openvpn/gremlin.h	37;"	d
GREMLIN_UP_DOWN_LEVEL	src/openvpn/gremlin.h	56;"	d
GREMLIN_UP_DOWN_MASK	src/openvpn/gremlin.h	44;"	d
GREMLIN_UP_DOWN_SHIFT	src/openvpn/gremlin.h	43;"	d
GetLastErrorText	src/openvpnserv/service.c	/^LPTSTR GetLastErrorText( LPTSTR lpszBuf, DWORD dwSize )$/;"	f
HANDLE_DEFINED	src/openvpn/win32.h	60;"	d
HASH	src/openvpn/httpdigest.h	/^typedef unsigned char HASH[HASHLEN];$/;"	t
HASHHEX	src/openvpn/httpdigest.h	/^typedef unsigned char HASHHEX[HASHHEXLEN+1];$/;"	t
HASHHEXLEN	src/openvpn/httpdigest.h	29;"	d
HASHLEN	src/openvpn/httpdigest.h	27;"	d
HAVE_ACCEPT	config-msvc.h	66;"	d
HAVE_ACCESS	config-msvc.h	49;"	d
HAVE_BIND	config-msvc.h	68;"	d
HAVE_CHDIR	config-msvc.h	50;"	d
HAVE_CHSIZE	config-msvc.h	51;"	d
HAVE_CONNECT	config-msvc.h	67;"	d
HAVE_CPP_VARARG_MACRO_GCC	src/openvpn/syshead.h	383;"	d
HAVE_CPP_VARARG_MACRO_ISO	config-msvc.h	52;"	d
HAVE_CPP_VARARG_MACRO_ISO	src/openvpn/syshead.h	384;"	d
HAVE_CTIME	config-msvc.h	53;"	d
HAVE_CTYPE_H	config-msvc.h	25;"	d
HAVE_DECL_SO_MARK	config-msvc.h	90;"	d
HAVE_DIRECT_H	config-msvc.h	43;"	d
HAVE_ERRNO_H	config-msvc.h	23;"	d
HAVE_EVP_CIPHER_CTX_SET_KEY_LENGTH	config-msvc.h	54;"	d
HAVE_FCNTL_H	config-msvc.h	24;"	d
HAVE_GETHOSTBYNAME	config-msvc.h	70;"	d
HAVE_GETSOCKNAME	config-msvc.h	74;"	d
HAVE_GETSOCKOPT	config-msvc.h	73;"	d
HAVE_GETTIMEOFDAY_NANOSECONDS	src/openvpn/syshead.h	406;"	d
HAVE_INET_NTOA	config-msvc.h	71;"	d
HAVE_IN_PKTINFO	config-msvc.h	55;"	d
HAVE_IO_H	config-msvc.h	42;"	d
HAVE_LIMITS_H	config-msvc.h	33;"	d
HAVE_LISTEN	config-msvc.h	65;"	d
HAVE_LZO_LZO1X_H	config-msvc.h	46;"	d
HAVE_LZO_LZOUTIL_H	config-msvc.h	47;"	d
HAVE_MEMSET	config-msvc.h	56;"	d
HAVE_OPENSSL_ENGINE	config-msvc.h	77;"	d
HAVE_POLL	config-msvc.h	75;"	d
HAVE_PUTENV	config-msvc.h	57;"	d
HAVE_RECV	config-msvc.h	61;"	d
HAVE_RECVFROM	config-msvc.h	62;"	d
HAVE_SELECT	config-msvc.h	69;"	d
HAVE_SEND	config-msvc.h	63;"	d
HAVE_SENDTO	config-msvc.h	64;"	d
HAVE_SETSOCKOPT	config-msvc.h	72;"	d
HAVE_SOCKET	config-msvc.h	60;"	d
HAVE_STAT	config-msvc.h	58;"	d
HAVE_STDARG_H	config-msvc.h	26;"	d
HAVE_STDIO_H	config-msvc.h	27;"	d
HAVE_STDLIB_H	config-msvc.h	28;"	d
HAVE_STRDUP	config-msvc.h	29;"	d
HAVE_STRERROR	config-msvc.h	30;"	d
HAVE_STRINGS_H	config-msvc.h	31;"	d
HAVE_STRING_H	config-msvc.h	32;"	d
HAVE_SYSTEM	config-msvc.h	34;"	d
HAVE_SYS_STAT_H	config-msvc.h	45;"	d
HAVE_SYS_TYPES_H	config-msvc.h	44;"	d
HAVE_TIME	config-msvc.h	35;"	d
HAVE_TIME_H	config-msvc.h	36;"	d
HAVE_UNLINK	config-msvc.h	37;"	d
HAVE_VARARG_MACROS	src/openvpn/error.h	148;"	d
HAVE_VARARG_MACROS	src/openvpn/error.h	156;"	d
HAVE_VSNPRINTF	config-msvc.h	38;"	d
HAVE_WINDOWS_H	config-msvc.h	39;"	d
HAVE_WINSOCK2_H	config-msvc.h	40;"	d
HAVE_WS2TCPIP_H	config-msvc.h	41;"	d
HELPER_H	src/openvpn/helper.h	30;"	d
HMAC_CTX_cleanup	src/openvpn/crypto_openssl.c	81;"	d	file:
HMAC_CTX_init	src/openvpn/crypto_openssl.c	79;"	d	file:
HMAC_Init_ex	src/openvpn/crypto_openssl.c	80;"	d	file:
HTTP_AUTH_BASIC	src/openvpn/proxy.h	35;"	d
HTTP_AUTH_DIGEST	src/openvpn/proxy.h	36;"	d
HTTP_AUTH_N	src/openvpn/proxy.h	39;"	d
HTTP_AUTH_NONE	src/openvpn/proxy.h	34;"	d
HTTP_AUTH_NTLM	src/openvpn/proxy.h	37;"	d
HTTP_AUTH_NTLM2	src/openvpn/proxy.h	38;"	d
HTTP_PROXY_OVERRIDE	src/openvpn/syshead.h	675;"	d
HTTP_PROXY_OVERRIDE	src/openvpn/syshead.h	677;"	d
IA_EMPTY_IF_UNDEF	src/openvpn/socket.h	368;"	d
IA_NET_ORDER	src/openvpn/socket.h	369;"	d
IDE	msvc-dev.bat	/^	set IDE=%VSHOME%\\Common7\\IDE\\VCExpress.exe$/;"	v
IDE	msvc-dev.bat	/^	set IDE=%VSHOME%\\Common7\\IDE\\devenv.exe$/;"	v
IEC_CLIENT_AUTH	src/openvpn/manage.h	268;"	d
IEC_CLIENT_PF	src/openvpn/manage.h	269;"	d
IEC_RSA_SIGN	src/openvpn/manage.h	270;"	d
IEC_UNDEF	src/openvpn/manage.h	267;"	d
IER_NEW	src/openvpn/manage.c	782;"	d	file:
IER_RESET	src/openvpn/manage.c	781;"	d	file:
IFCONFIG_AFTER_TUN_OPEN	src/openvpn/tun.h	279;"	d
IFCONFIG_BEFORE_TUN_OPEN	src/openvpn/tun.h	278;"	d
IFCONFIG_DEFAULT	src/openvpn/tun.h	281;"	d
IFCONFIG_POOL_30NET	src/openvpn/pool.h	38;"	d
IFCONFIG_POOL_INDIV	src/openvpn/pool.h	39;"	d
IFCONFIG_POOL_MAX	src/openvpn/pool.h	35;"	d
IFCONFIG_POOL_MIN_NETBITS	src/openvpn/pool.h	36;"	d
IF_NAMESIZE	src/openvpn/socket.c	2232;"	d	file:
IN	src/openvpn/httpdigest.h	31;"	d
IN	src/openvpn/httpdigest.h	33;"	d
IN6_ARE_ADDR_EQUAL	src/openvpn/win32.h	45;"	d
INCR_ERROR	src/openvpn/ssl.c	109;"	d	file:
INCR_ERROR	src/openvpn/ssl.c	94;"	d	file:
INCR_GENERATED	src/openvpn/ssl.c	107;"	d	file:
INCR_GENERATED	src/openvpn/ssl.c	92;"	d	file:
INCR_SENT	src/openvpn/ssl.c	106;"	d	file:
INCR_SENT	src/openvpn/ssl.c	91;"	d	file:
INCR_SUCCESS	src/openvpn/ssl.c	108;"	d	file:
INCR_SUCCESS	src/openvpn/ssl.c	93;"	d	file:
INETD_NONE	src/openvpn/socket.h	187;"	d
INETD_NOWAIT	src/openvpn/socket.h	189;"	d
INETD_SOCKET_DESCRIPTOR	src/openvpn/misc.h	35;"	d
INETD_WAIT	src/openvpn/socket.h	188;"	d
INFO_CALLBACK_SSL_CONST	src/openvpn/crypto_openssl.c	84;"	d	file:
INFO_CALLBACK_SSL_CONST	src/openvpn/ssl_openssl.c	177;"	d	file:
INIT_H	src/openvpn/init.h	26;"	d
INLINE_FILE_TAG	src/openvpn/common.h	98;"	d
INPUT	build/msvc/msvc-generate/Makefile.mak	/^INPUT=$(SOURCEBASE)\/config-msvc-version.h.in$/;"	m
INTEGER_H	src/openvpn/integer.h	26;"	d
INTERVAL_DEBUG	src/openvpn/interval.h	36;"	d
INTERVAL_H	src/openvpn/interval.h	32;"	d
IN_TREE	src/openvpn/schedule.h	75;"	d
IOSTATE_IMMEDIATE_RETURN	src/openvpn/win32.h	187;"	d
IOSTATE_INITIAL	src/openvpn/win32.h	185;"	d
IOSTATE_QUEUED	src/openvpn/win32.h	186;"	d
IOSTAT_EAGAIN_ON_READ	src/openvpn/ps.c	60;"	d	file:
IOSTAT_EAGAIN_ON_WRITE	src/openvpn/ps.c	61;"	d	file:
IOSTAT_GOOD	src/openvpn/ps.c	64;"	d	file:
IOSTAT_READ_ERROR	src/openvpn/ps.c	62;"	d	file:
IOSTAT_WRITE_ERROR	src/openvpn/ps.c	63;"	d	file:
IOW_CHECK_RESIDUAL	src/openvpn/forward.h	56;"	d
IOW_FRAG	src/openvpn/forward.h	57;"	d
IOW_MBUF	src/openvpn/forward.h	58;"	d
IOW_READ	src/openvpn/forward.h	62;"	d
IOW_READ_LINK	src/openvpn/forward.h	54;"	d
IOW_READ_TUN	src/openvpn/forward.h	53;"	d
IOW_READ_TUN_FORCE	src/openvpn/forward.h	59;"	d
IOW_SHAPER	src/openvpn/forward.h	55;"	d
IOW_TO_LINK	src/openvpn/forward.h	52;"	d
IOW_TO_TUN	src/openvpn/forward.h	51;"	d
IOW_WAIT_SIGNAL	src/openvpn/forward.h	60;"	d
IPV4_INVALID_ADDR	src/openvpn/socket.h	396;"	d
IPV4_NETMASK_HOST	src/openvpn/basic.h	36;"	d
IPW32_SET_ADAPTIVE	src/openvpn/tun.h	57;"	d
IPW32_SET_ADAPTIVE_DELAY_WINDOW	src/openvpn/tun.h	46;"	d
IPW32_SET_ADAPTIVE_TRY_NETSH	src/openvpn/tun.h	47;"	d
IPW32_SET_DHCP_MASQ	src/openvpn/tun.h	56;"	d
IPW32_SET_IPAPI	src/openvpn/tun.h	55;"	d
IPW32_SET_MANUAL	src/openvpn/tun.h	53;"	d
IPW32_SET_N	src/openvpn/tun.h	58;"	d
IPW32_SET_NETSH	src/openvpn/tun.h	54;"	d
IP_MCAST_NETWORK	src/openvpn/mroute.h	35;"	d
IP_MCAST_SUBNET_MASK	src/openvpn/mroute.h	34;"	d
IPv4_TCP_HEADER_SIZE	src/openvpn/socket.h	529;"	d
IPv4_UDP_HEADER_SIZE	src/openvpn/socket.h	528;"	d
IPv6_TCP_HEADER_SIZE	src/openvpn/socket.h	531;"	d
IPv6_UDP_HEADER_SIZE	src/openvpn/socket.h	530;"	d
ISC_ERRORS	src/openvpn/init.h	106;"	d
ISC_SERVER	src/openvpn/init.h	107;"	d
IS_SIG	src/openvpn/sig.h	42;"	d
IS_TYPE_BUF	src/openvpn/options.c	3689;"	d	file:
IS_TYPE_FP	src/openvpn/options.c	3688;"	d	file:
IVM_LEVEL_1	src/openvpn/init.h	46;"	d
IVM_LEVEL_2	src/openvpn/init.h	47;"	d
KEY_DIRECTION_BIDIRECTIONAL	src/openvpn/crypto.h	75;"	d
KEY_DIRECTION_INVERSE	src/openvpn/crypto.h	77;"	d
KEY_DIRECTION_NORMAL	src/openvpn/crypto.h	76;"	d
KEY_EXPANSION_ID	src/openvpn/ssl.h	51;"	d
KEY_METHOD_MASK	src/openvpn/ssl.h	127;"	d
KEY_METHOD_MAX	src/openvpn/ssl.h	124;"	d
KEY_METHOD_MIN	src/openvpn/ssl.h	123;"	d
KEY_SCAN_SIZE	src/openvpn/ssl_common.h	420;"	d
KMDA_DEF	src/openvpn/ssl_verify.c	1082;"	d	file:
KMDA_ERROR	src/openvpn/ssl_verify.c	1079;"	d	file:
KMDA_SUCCESS	src/openvpn/ssl_verify.c	1080;"	d	file:
KMDA_UNDEF	src/openvpn/ssl_verify.c	1081;"	d	file:
KS_LAME_DUCK	src/openvpn/ssl_common.h	324;"	d
KS_PRIMARY	src/openvpn/ssl_common.h	323;"	d
KS_SIZE	src/openvpn/ssl_common.h	326;"	d
LINK_MTU_DEFAULT	src/openvpn/mtu.h	66;"	d
LINK_OUT	src/openvpn/forward.h	40;"	d
LIST_H	src/openvpn/list.h	26;"	d
LOGLEV	src/openvpn/error.h	136;"	d
LOG_ECHO_TO_LOG	src/openvpn/manage.h	111;"	d
LOG_FATAL_NOTIFY	src/openvpn/manage.h	105;"	d
LOG_OPENVPN	src/openvpn/error.c	56;"	d	file:
LOG_PRINT_CRLF	src/openvpn/manage.h	104;"	d
LOG_PRINT_ECHO_PREFIX	src/openvpn/manage.h	96;"	d
LOG_PRINT_INTVAL	src/openvpn/manage.h	107;"	d
LOG_PRINT_INT_DATE	src/openvpn/manage.h	99;"	d
LOG_PRINT_LOCAL_IP	src/openvpn/manage.h	102;"	d
LOG_PRINT_LOG_PREFIX	src/openvpn/manage.h	95;"	d
LOG_PRINT_MSG_FLAGS	src/openvpn/manage.h	100;"	d
LOG_PRINT_REMOTE_IP	src/openvpn/manage.h	109;"	d
LOG_PRINT_STATE	src/openvpn/manage.h	101;"	d
LOG_PRINT_STATE_PREFIX	src/openvpn/manage.h	97;"	d
LOG_RW	src/openvpn/errlevel.h	47;"	d
LR_ERROR	src/openvpn/route.c	1250;"	d	file:
LR_MATCH	src/openvpn/route.c	1249;"	d	file:
LR_NOMATCH	src/openvpn/route.c	1248;"	d	file:
LS_MODE_DEFAULT	src/openvpn/socket.h	192;"	d
LS_MODE_TCP_ACCEPT_FROM	src/openvpn/socket.h	194;"	d
LS_MODE_TCP_LISTEN	src/openvpn/socket.h	193;"	d
LZO_ADAPTIVE	src/openvpn/lzo.h	67;"	d
LZO_COMPRESS	src/openvpn/lzo.h	75;"	d
LZO_DECOMPRESS	src/openvpn/lzo.h	86;"	d
LZO_EXTRA_BUFFER	src/openvpn/lzo.h	102;"	d
LZO_HOME	msvc-env.bat	/^if "%LZO_HOME%" == "" set LZO_HOME=%OPENVPN_DEPROOT%$/;"	v
LZO_LIB_VER_STR	src/openvpn/options.c	3449;"	d	file:
LZO_LIB_VER_STR	src/openvpn/options.c	3457;"	d	file:
LZO_ON	src/openvpn/lzo.h	65;"	d
LZO_PREFIX_LEN	src/openvpn/lzo.h	113;"	d
LZO_SELECTED	src/openvpn/lzo.h	63;"	d
LZO_WORKSPACE	src/openvpn/lzo.h	82;"	d
MANAGEMENT_DEF_AUTH	src/openvpn/syshead.h	548;"	d
MANAGEMENT_ECHO_BUFFER_SIZE	src/openvpn/manage.h	38;"	d
MANAGEMENT_ECHO_FLAGS	src/openvpn/manage.c	56;"	d	file:
MANAGEMENT_ECHO_FLAGS	src/openvpn/manage.c	58;"	d	file:
MANAGEMENT_ECHO_PULL_INFO	src/openvpn/manage.c	53;"	d	file:
MANAGEMENT_IN_EXTRA	src/openvpn/syshead.h	571;"	d
MANAGEMENT_LOG_HISTORY_INITIAL_SIZE	src/openvpn/manage.h	37;"	d
MANAGEMENT_N_PASSWORD_RETRIES	src/openvpn/manage.h	36;"	d
MANAGEMENT_PF	src/openvpn/syshead.h	581;"	d
MANAGEMENT_READ	src/openvpn/openvpn.h	248;"	d
MANAGEMENT_STATE_BUFFER_SIZE	src/openvpn/manage.h	39;"	d
MANAGEMENT_VERSION	src/openvpn/manage.h	35;"	d
MANAGEMENT_WRITE	src/openvpn/openvpn.h	249;"	d
MANAGE_H	src/openvpn/manage.h	26;"	d
MANAGMENT_EXTERNAL_KEY	src/openvpn/syshead.h	558;"	d
MANSIG_IGNORE_USR1_HUP	src/openvpn/manage.h	229;"	d
MANSIG_MAP_USR1_TO_HUP	src/openvpn/manage.h	230;"	d
MANSIG_MAP_USR1_TO_TERM	src/openvpn/manage.h	231;"	d
MAN_CLIENT_AUTH_ENABLED	src/openvpn/options.h	673;"	d
MAN_CLIENT_AUTH_ENABLED	src/openvpn/options.h	675;"	d
MAPF_IA_EMPTY_IF_UNDEF	src/openvpn/mroute.h	118;"	d
MAPF_SHOW_ARP	src/openvpn/mroute.h	119;"	d
MAPF_SUBNET	src/openvpn/mroute.h	117;"	d
MAX_CERT_DEPTH	src/openvpn/ssl_verify.h	53;"	d
MAX_CIPHER_KEY_LENGTH	src/openvpn/crypto_backend.h	169;"	d
MAX_CLIENT_NAT	src/openvpn/clinat.h	30;"	d
MAX_FRAGS	src/openvpn/fragment.h	74;"	d
MAX_FRAG_PKT_SIZE	src/openvpn/fragment.h	155;"	d
MAX_HMAC_KEY_LENGTH	src/openvpn/crypto_backend.h	376;"	d
MAX_PARMS	src/openvpn/options.h	50;"	d
MAX_PLUGINS	src/openvpn/plugin.h	44;"	d
MAX_ROUTES_DEFAULT	src/openvpn/route.h	36;"	d
MAX_RW_SIZE_LINK	src/openvpn/mtu.h	179;"	d
MAX_RW_SIZE_TUN	src/openvpn/mtu.h	178;"	d
MAX_SEQ_BACKTRACK	src/openvpn/packet_id.h	106;"	d
MAX_SUBJECT_LENGTH	src/openvpn/ssl_verify_polarssl.c	45;"	d	file:
MAX_TIME_BACKTRACK	src/openvpn/packet_id.h	115;"	d
MBUF_H	src/openvpn/mbuf.h	26;"	d
MBUF_INDEX	src/openvpn/mbuf.h	42;"	d
MCF_SERVER	src/openvpn/manage.h	149;"	d
MC_MULTI_THREADED_MASTER	src/openvpn/multi.h	121;"	d
MC_MULTI_THREADED_SCHEDULER	src/openvpn/multi.h	123;"	d
MC_MULTI_THREADED_WORKER	src/openvpn/multi.h	122;"	d
MC_SINGLE_THREADED	src/openvpn/multi.h	120;"	d
MC_UNDEF	src/openvpn/multi.h	119;"	d
MC_WORK_THREAD	src/openvpn/multi.h	124;"	d
MD4_DIGEST_LENGTH	src/openvpn/crypto_openssl.h	71;"	d
MD4_DIGEST_LENGTH	src/openvpn/crypto_polarssl.h	70;"	d
MD5SUM	src/openvpn/openvpn.h	584;"	d
MD5SUM	src/openvpn/openvpn.h	586;"	d
MD5_DIGEST_LENGTH	src/openvpn/crypto_polarssl.h	71;"	d
MEMDBG_H	src/openvpn/memdbg.h	26;"	d
METRIC_NOT_USED	src/openvpn/route.c	49;"	d	file:
MF_CLIENT_AUTH	src/openvpn/manage.h	325;"	d
MF_CLIENT_PF	src/openvpn/manage.h	328;"	d
MF_CONNECT_AS_CLIENT	src/openvpn/manage.h	323;"	d
MF_EXTERNAL_KEY	src/openvpn/manage.h	332;"	d
MF_FORGET_DISCONNECT	src/openvpn/manage.h	322;"	d
MF_HOLD	src/openvpn/manage.h	320;"	d
MF_QUERY_PASSWORDS	src/openvpn/manage.h	319;"	d
MF_QUERY_PROXY	src/openvpn/manage.h	336;"	d
MF_QUERY_REMOTE	src/openvpn/manage.h	335;"	d
MF_SERVER	src/openvpn/manage.h	318;"	d
MF_SIGNAL	src/openvpn/manage.h	321;"	d
MF_UNICAST	src/openvpn/mbuf.h	49;"	d
MF_UNIX_SOCK	src/openvpn/manage.h	330;"	d
MF_UP_DOWN	src/openvpn/manage.h	334;"	d
MIN	src/openvpn/syshead.h	413;"	d
MIN_SEQ_BACKTRACK	src/openvpn/packet_id.h	105;"	d
MIN_TIME_BACKTRACK	src/openvpn/packet_id.h	114;"	d
MISC_H	src/openvpn/misc.h	26;"	d
MN_AT_LEAST	src/openvpn/manage.c	1050;"	d	file:
MODE_CLIENTS	src/openvpn/pf.c	181;"	d	file:
MODE_POINT_TO_POINT	src/openvpn/options.h	183;"	d
MODE_SERVER	src/openvpn/options.h	184;"	d
MODE_SUBNETS	src/openvpn/pf.c	182;"	d	file:
MODE_UNDEF	src/openvpn/pf.c	180;"	d	file:
MPP_CLOSE_ON_SIGNAL	src/openvpn/multi.h	222;"	d
MPP_CONDITIONAL_PRE_SELECT	src/openvpn/multi.h	221;"	d
MPP_PRE_SELECT	src/openvpn/multi.h	220;"	d
MPP_RECORD_TOUCH	src/openvpn/multi.h	223;"	d
MROUTE_EXTRACT_BCAST	src/openvpn/mroute.h	40;"	d
MROUTE_EXTRACT_IGMP	src/openvpn/mroute.h	42;"	d
MROUTE_EXTRACT_MCAST	src/openvpn/mroute.h	41;"	d
MROUTE_EXTRACT_SUCCEEDED	src/openvpn/mroute.h	39;"	d
MROUTE_H	src/openvpn/mroute.h	26;"	d
MROUTE_SEC_EXTRACT_BCAST	src/openvpn/mroute.h	45;"	d
MROUTE_SEC_EXTRACT_IGMP	src/openvpn/mroute.h	47;"	d
MROUTE_SEC_EXTRACT_MCAST	src/openvpn/mroute.h	46;"	d
MROUTE_SEC_EXTRACT_SUCCEEDED	src/openvpn/mroute.h	44;"	d
MROUTE_SEC_SHIFT	src/openvpn/mroute.h	49;"	d
MR_ADDR_ETHER	src/openvpn/mroute.h	62;"	d
MR_ADDR_IPV4	src/openvpn/mroute.h	63;"	d
MR_ADDR_IPV6	src/openvpn/mroute.h	64;"	d
MR_ADDR_MASK	src/openvpn/mroute.h	65;"	d
MR_ADDR_NONE	src/openvpn/mroute.h	61;"	d
MR_ARP	src/openvpn/mroute.h	74;"	d
MR_HELPER_NET_LEN	src/openvpn/mroute.h	88;"	d
MR_MAX_ADDR_LEN	src/openvpn/mroute.h	56;"	d
MR_WITH_NETBITS	src/openvpn/mroute.h	71;"	d
MR_WITH_PORT	src/openvpn/mroute.h	68;"	d
MSG	src/openvpnserv/openvpnserv.c	95;"	d	file:
MSG_FLAGS_ERROR	src/openvpnserv/service.h	128;"	d
MSG_FLAGS_SYS_CODE	src/openvpnserv/service.h	129;"	d
MSG_NOSIGNAL	src/openvpn/socket.h	258;"	d
MSG_TEST	src/openvpn/error.h	145;"	d
MSSFIX_DEFAULT	src/openvpn/mtu.h	81;"	d
MSS_H	src/openvpn/mss.h	26;"	d
MSTATS_ACTIVE	src/openvpn/mstats.h	41;"	d
MSTATS_EXPIRED	src/openvpn/mstats.h	42;"	d
MSTATS_UNDEF	src/openvpn/mstats.h	40;"	d
MS_CC_WAIT_READ	src/openvpn/manage.h	245;"	d
MS_CC_WAIT_WRITE	src/openvpn/manage.h	246;"	d
MS_INITIAL	src/openvpn/manage.h	243;"	d
MS_LISTEN	src/openvpn/manage.h	244;"	d
MTCP_H	src/openvpn/mtcp.h	30;"	d
MTCP_MANAGEMENT	src/openvpn/mtcp.c	62;"	d	file:
MTCP_N	src/openvpn/mtcp.c	65;"	d	file:
MTCP_SIG	src/openvpn/mtcp.c	60;"	d	file:
MTCP_SOCKET	src/openvpn/mtcp.c	58;"	d	file:
MTCP_TUN	src/openvpn/mtcp.c	59;"	d	file:
MTP_LINK_OUT	src/openvpn/mtcp.c	463;"	d	file:
MTP_NONE	src/openvpn/mtcp.c	461;"	d	file:
MTP_TUN_OUT	src/openvpn/mtcp.c	462;"	d	file:
MTUDISC_NOT_SUPPORTED_MSG	src/openvpn/mtu.c	153;"	d	file:
MTU_H	src/openvpn/mtu.h	26;"	d
MTU_TO_MSS	src/openvpn/proto.h	218;"	d
MUDP_H	src/openvpn/mudp.h	30;"	d
MULTI_CACHE_ROUTE_TTL	src/openvpn/multi.h	461;"	d
MULTI_CHECK_SIG	src/openvpn/multi.h	568;"	d
MULTI_H	src/openvpn/multi.h	30;"	d
MULTI_ROUTE_AGEABLE	src/openvpn/multi.h	180;"	d
MULTI_ROUTE_CACHE	src/openvpn/multi.h	179;"	d
MUST_BE_UNDEF	src/openvpn/options.c	2295;"	d	file:
MUST_BE_UNDEF	src/openvpn/options.c	2338;"	d	file:
MUTE_LEVEL_MASK	src/openvpn/error.h	121;"	d
MUTE_LEVEL_SHIFT	src/openvpn/error.h	120;"	d
MWCC_HOLD_WAIT	src/openvpn/manage.c	2787;"	d	file:
MWCC_OTHER_WAIT	src/openvpn/manage.c	2788;"	d	file:
MWCC_PASSWORD_WAIT	src/openvpn/manage.c	2786;"	d	file:
M_CLIENT	src/openvpn/error.h	112;"	d
M_DEBUG	src/openvpn/error.h	92;"	d
M_DEBUG_LEVEL	src/openvpn/error.h	87;"	d
M_ERR	src/openvpn/error.h	109;"	d
M_ERR	src/openvpnserv/openvpnserv.c	92;"	d	file:
M_ERRNO	src/openvpn/error.h	94;"	d
M_FATAL	src/openvpn/error.h	89;"	d
M_INFO	src/openvpn/errlevel.h	56;"	d
M_INFO	src/openvpnserv/openvpnserv.c	90;"	d	file:
M_MSG_VIRT_OUT	src/openvpn/error.h	103;"	d
M_NOIPREFIX	src/openvpn/error.h	106;"	d
M_NOLF	src/openvpn/error.h	105;"	d
M_NOMUTE	src/openvpn/error.h	100;"	d
M_NONFATAL	src/openvpn/error.h	90;"	d
M_NOPREFIX	src/openvpn/error.h	101;"	d
M_OPTERR	src/openvpn/error.h	104;"	d
M_SSL	src/openvpn/error.h	97;"	d
M_SSLERR	src/openvpn/error.h	110;"	d
M_SYSERR	src/openvpnserv/openvpnserv.c	91;"	d	file:
M_USAGE	src/openvpn/error.h	111;"	d
M_USAGE_SMALL	src/openvpn/error.h	102;"	d
M_VERB0	src/openvpn/errlevel.h	54;"	d
M_WARN	src/openvpn/error.h	91;"	d
NE32_PERSIST_EVENT	src/openvpn/win32.h	80;"	d
NE32_WRITE_EVENT	src/openvpn/win32.h	81;"	d
NETSH_PATH_SUFFIX	src/openvpn/win32.h	33;"	d
NEXTADDR	src/openvpn/route.c	2632;"	d	file:
NEXTADDR	src/openvpn/route.c	2731;"	d	file:
NEXTADDR	src/openvpn/route.c	2953;"	d	file:
NI_IP_NETMASK	src/openvpn/tun.c	57;"	d	file:
NI_OPTIONS	src/openvpn/tun.c	58;"	d	file:
NI_TEST_FIRST	src/openvpn/tun.c	56;"	d	file:
NM_QUOTE_HINT	src/openvpn/options.c	4042;"	d	file:
NONCE_SECRET_LEN_MAX	src/openvpn/crypto.h	292;"	d
NONCE_SECRET_LEN_MIN	src/openvpn/crypto.h	289;"	d
NO_COMPRESS	src/openvpn/lzo.h	118;"	d
NS_CERT_CHECK_CLIENT	src/openvpn/ssl_verify.h	237;"	d
NS_CERT_CHECK_NONE	src/openvpn/ssl_verify.h	233;"	d
NS_CERT_CHECK_SERVER	src/openvpn/ssl_verify.h	235;"	d
NTLM	src/openvpn/syshead.h	612;"	d
NTLM	src/openvpn/syshead.h	614;"	d
NTLM_H	src/openvpn/ntlm.h	2;"	d
N_DHCP_ADDR	src/openvpn/tun.h	79;"	d
N_FRAG_BUF	src/openvpn/fragment.h	50;"	d
N_NAME_VALUE	src/plugins/auth-pam/auth-pam.c	89;"	d	file:
N_ROUTE_BYPASS	src/openvpn/route.h	56;"	d
N_SEQ_ID	src/openvpn/fragment.h	143;"	d
OCC_EXIT	src/openvpn/occ.h	70;"	d
OCC_H	src/openvpn/occ.h	26;"	d
OCC_INLINE_H	src/openvpn/occ-inline.h	26;"	d
OCC_INTERVAL_SECONDS	src/openvpn/occ.h	49;"	d
OCC_MTU_LOAD	src/openvpn/occ.h	56;"	d
OCC_MTU_LOAD_INTERVAL_SECONDS	src/openvpn/occ.h	65;"	d
OCC_MTU_LOAD_REQUEST	src/openvpn/occ.h	55;"	d
OCC_MTU_REPLY	src/openvpn/occ.h	59;"	d
OCC_MTU_REQUEST	src/openvpn/occ.h	57;"	d
OCC_N_TRIES	src/openvpn/occ.h	50;"	d
OCC_REPLY	src/openvpn/occ.h	40;"	d
OCC_REQUEST	src/openvpn/occ.h	39;"	d
OCC_STRING_SIZE	src/openvpn/occ.h	33;"	d
OIA_ERROR	src/openvpn/socket.h	423;"	d
OIA_HOSTNAME	src/openvpn/socket.h	421;"	d
OIA_IP	src/openvpn/socket.h	422;"	d
OPENSSL_HOME	msvc-env.bat	/^if "%OPENSSL_HOME%" == "" set OPENSSL_HOME=%OPENVPN_DEPROOT%$/;"	v
OPENVPN_DEBUG_FILE	src/openvpn/error.h	65;"	d
OPENVPN_DEPROOT	msvc-env.bat	/^if "%OPENVPN_DEPROOT%" == "" set OPENVPN_DEPROOT=c:\\Temp\\openvpn-deps$/;"	v
OPENVPN_ERROR_FP	src/openvpn/error.h	45;"	d
OPENVPN_ETH_ALEN	src/openvpn/proto.h	55;"	d
OPENVPN_ETH_P_ARP	src/openvpn/proto.h	63;"	d
OPENVPN_ETH_P_IPV4	src/openvpn/proto.h	61;"	d
OPENVPN_ETH_P_IPV6	src/openvpn/proto.h	62;"	d
OPENVPN_EXIT_STATUS_CANNOT_OPEN_DEBUG_FILE	src/openvpn/error.h	54;"	d
OPENVPN_EXIT_STATUS_ERROR	src/openvpn/error.h	52;"	d
OPENVPN_EXIT_STATUS_GOOD	src/openvpn/error.h	51;"	d
OPENVPN_EXIT_STATUS_USAGE	src/openvpn/error.h	53;"	d
OPENVPN_EXPORT	include/openvpn-plugin.h	151;"	d
OPENVPN_EXPORT	include/openvpn-plugin.h	153;"	d
OPENVPN_H	src/openvpn/openvpn.h	26;"	d
OPENVPN_IPH_GET_LEN	src/openvpn/proto.h	87;"	d
OPENVPN_IPH_GET_VER	src/openvpn/proto.h	86;"	d
OPENVPN_IPPROTO_IGMP	src/openvpn/proto.h	99;"	d
OPENVPN_IPPROTO_TCP	src/openvpn/proto.h	100;"	d
OPENVPN_IPPROTO_UDP	src/openvpn/proto.h	101;"	d
OPENVPN_IP_OFFMASK	src/openvpn/proto.h	94;"	d
OPENVPN_LZO_H	src/openvpn/lzo.h	26;"	d
OPENVPN_MAX_IV_LENGTH	src/openvpn/crypto_openssl.h	53;"	d
OPENVPN_MAX_IV_LENGTH	src/openvpn/crypto_polarssl.h	53;"	d
OPENVPN_MEMSTATS_H	src/openvpn/mstats.h	30;"	d
OPENVPN_MODE_CBC	src/openvpn/crypto_openssl.h	56;"	d
OPENVPN_MODE_CBC	src/openvpn/crypto_polarssl.h	56;"	d
OPENVPN_MODE_CFB	src/openvpn/crypto_openssl.h	62;"	d
OPENVPN_MODE_CFB	src/openvpn/crypto_polarssl.h	62;"	d
OPENVPN_MODE_OFB	src/openvpn/crypto_openssl.h	59;"	d
OPENVPN_MODE_OFB	src/openvpn/crypto_polarssl.h	59;"	d
OPENVPN_MSG_FP	src/openvpn/error.h	44;"	d
OPENVPN_OP_DECRYPT	src/openvpn/crypto_openssl.h	68;"	d
OPENVPN_OP_DECRYPT	src/openvpn/crypto_polarssl.h	68;"	d
OPENVPN_OP_ENCRYPT	src/openvpn/crypto_openssl.h	65;"	d
OPENVPN_OP_ENCRYPT	src/openvpn/crypto_polarssl.h	65;"	d
OPENVPN_PF_H	src/openvpn/pf.h	28;"	d
OPENVPN_PKCS11_H	src/openvpn/pkcs11.h	26;"	d
OPENVPN_PLUGIN_AUTH_USER_PASS_VERIFY	include/openvpn-plugin.h	119;"	d
OPENVPN_PLUGIN_CLIENT_CONNECT	include/openvpn-plugin.h	120;"	d
OPENVPN_PLUGIN_CLIENT_CONNECT_V2	include/openvpn-plugin.h	123;"	d
OPENVPN_PLUGIN_CLIENT_DISCONNECT	include/openvpn-plugin.h	121;"	d
OPENVPN_PLUGIN_DEF	include/openvpn-plugin.h	165;"	d
OPENVPN_PLUGIN_DEF	include/openvpn-plugin.h	173;"	d
OPENVPN_PLUGIN_DOWN	include/openvpn-plugin.h	115;"	d
OPENVPN_PLUGIN_ENABLE_PF	include/openvpn-plugin.h	125;"	d
OPENVPN_PLUGIN_FUNC	include/openvpn-plugin.h	166;"	d
OPENVPN_PLUGIN_FUNC	include/openvpn-plugin.h	174;"	d
OPENVPN_PLUGIN_FUNC_DEFERRED	include/openvpn-plugin.h	145;"	d
OPENVPN_PLUGIN_FUNC_ERROR	include/openvpn-plugin.h	144;"	d
OPENVPN_PLUGIN_FUNC_SUCCESS	include/openvpn-plugin.h	143;"	d
OPENVPN_PLUGIN_H	src/openvpn/plugin.h	30;"	d
OPENVPN_PLUGIN_H_	include/openvpn-plugin.h	26;"	d
OPENVPN_PLUGIN_INIT_POST_DAEMON	include/openvpn-plugin.h	775;"	d
OPENVPN_PLUGIN_INIT_POST_UID_CHANGE	include/openvpn-plugin.h	776;"	d
OPENVPN_PLUGIN_INIT_PRE_CONFIG_PARSE	include/openvpn-plugin.h	773;"	d
OPENVPN_PLUGIN_INIT_PRE_DAEMON	include/openvpn-plugin.h	774;"	d
OPENVPN_PLUGIN_IPCHANGE	include/openvpn-plugin.h	117;"	d
OPENVPN_PLUGIN_LEARN_ADDRESS	include/openvpn-plugin.h	122;"	d
OPENVPN_PLUGIN_MASK	include/openvpn-plugin.h	132;"	d
OPENVPN_PLUGIN_N	include/openvpn-plugin.h	127;"	d
OPENVPN_PLUGIN_ROUTE_PREDOWN	include/openvpn-plugin.h	126;"	d
OPENVPN_PLUGIN_ROUTE_UP	include/openvpn-plugin.h	116;"	d
OPENVPN_PLUGIN_TLS_FINAL	include/openvpn-plugin.h	124;"	d
OPENVPN_PLUGIN_TLS_VERIFY	include/openvpn-plugin.h	118;"	d
OPENVPN_PLUGIN_UP	include/openvpn-plugin.h	114;"	d
OPENVPN_PLUGIN_VERSION	include/openvpn-plugin.h	28;"	d
OPENVPN_PLUGINv3_STRUCTVER	include/openvpn-plugin.h	212;"	d
OPENVPN_PORT	src/openvpn/socket.h	42;"	d
OPENVPN_SSL_H	src/openvpn/ssl.h	31;"	d
OPENVPN_STATE_ADD_ROUTES	src/openvpn/manage.h	461;"	d
OPENVPN_STATE_ASSIGN_IP	src/openvpn/manage.h	460;"	d
OPENVPN_STATE_AUTH	src/openvpn/manage.h	468;"	d
OPENVPN_STATE_CLIENT_BASE	src/openvpn/manage.h	473;"	d
OPENVPN_STATE_CONNECTED	src/openvpn/manage.h	462;"	d
OPENVPN_STATE_CONNECTING	src/openvpn/manage.h	459;"	d
OPENVPN_STATE_EXITING	src/openvpn/manage.h	464;"	d
OPENVPN_STATE_GET_CONFIG	src/openvpn/manage.h	469;"	d
OPENVPN_STATE_INITIAL	src/openvpn/manage.h	458;"	d
OPENVPN_STATE_RECONNECTING	src/openvpn/manage.h	463;"	d
OPENVPN_STATE_RESOLVE	src/openvpn/manage.h	470;"	d
OPENVPN_STATE_TCP_CONNECT	src/openvpn/manage.h	471;"	d
OPENVPN_STATE_WAIT	src/openvpn/manage.h	467;"	d
OPENVPN_TCPH_ACK_MASK	src/openvpn/proto.h	151;"	d
OPENVPN_TCPH_CWR_MASK	src/openvpn/proto.h	154;"	d
OPENVPN_TCPH_ECE_MASK	src/openvpn/proto.h	153;"	d
OPENVPN_TCPH_FIN_MASK	src/openvpn/proto.h	147;"	d
OPENVPN_TCPH_GET_DOFF	src/openvpn/proto.h	144;"	d
OPENVPN_TCPH_PSH_MASK	src/openvpn/proto.h	150;"	d
OPENVPN_TCPH_RST_MASK	src/openvpn/proto.h	149;"	d
OPENVPN_TCPH_SYN_MASK	src/openvpn/proto.h	148;"	d
OPENVPN_TCPH_URG_MASK	src/openvpn/proto.h	152;"	d
OPENVPN_TCPOLEN_MAXSEG	src/openvpn/proto.h	165;"	d
OPENVPN_TCPOPT_EOL	src/openvpn/proto.h	162;"	d
OPENVPN_TCPOPT_MAXSEG	src/openvpn/proto.h	164;"	d
OPENVPN_TCPOPT_NOP	src/openvpn/proto.h	163;"	d
OPENVPN_WIN32_H	src/openvpn/win32.h	27;"	d
OPTIONS_H	src/openvpn/options.h	31;"	d
OPTION_LINE_SIZE	src/openvpn/options.h	56;"	d
OPTION_PARM_SIZE	src/openvpn/options.h	55;"	d
OPT_P_COMP	src/openvpn/options.h	617;"	d
OPT_P_CONFIG	src/openvpn/options.h	625;"	d
OPT_P_CONNECTION	src/openvpn/options.h	634;"	d
OPT_P_CRYPTO	src/openvpn/options.h	619;"	d
OPT_P_DEFAULT	src/openvpn/options.h	637;"	d
OPT_P_ECHO	src/openvpn/options.h	627;"	d
OPT_P_EXPLICIT_NOTIFY	src/openvpn/options.h	626;"	d
OPT_P_GENERAL	src/openvpn/options.h	607;"	d
OPT_P_INHERIT	src/openvpn/options.h	628;"	d
OPT_P_INSTANCE	src/openvpn/options.h	624;"	d
OPT_P_IPWIN32	src/openvpn/options.h	610;"	d
OPT_P_MESSAGES	src/openvpn/options.h	618;"	d
OPT_P_MTU	src/openvpn/options.h	621;"	d
OPT_P_NICE	src/openvpn/options.h	622;"	d
OPT_P_PEER_ID	src/openvpn/options.h	635;"	d
OPT_P_PERSIST	src/openvpn/options.h	615;"	d
OPT_P_PERSIST_IP	src/openvpn/options.h	616;"	d
OPT_P_PLUGIN	src/openvpn/options.h	631;"	d
OPT_P_PULL_MODE	src/openvpn/options.h	630;"	d
OPT_P_PUSH	src/openvpn/options.h	623;"	d
OPT_P_ROUTE	src/openvpn/options.h	609;"	d
OPT_P_ROUTE_EXTRAS	src/openvpn/options.h	629;"	d
OPT_P_SCRIPT	src/openvpn/options.h	611;"	d
OPT_P_SETENV	src/openvpn/options.h	612;"	d
OPT_P_SHAPER	src/openvpn/options.h	613;"	d
OPT_P_SOCKBUF	src/openvpn/options.h	632;"	d
OPT_P_SOCKFLAGS	src/openvpn/options.h	633;"	d
OPT_P_TIMER	src/openvpn/options.h	614;"	d
OPT_P_TLS_PARMS	src/openvpn/options.h	620;"	d
OPT_P_UP	src/openvpn/options.h	608;"	d
OS_SPECIFIC_DIRSEP	src/openvpn/syshead.h	471;"	d
OS_SPECIFIC_DIRSEP	src/openvpn/syshead.h	473;"	d
OTIME_H	src/openvpn/otime.h	26;"	d
OUT	src/openvpn/httpdigest.h	32;"	d
OUT	src/openvpn/httpdigest.h	34;"	d
OUTPUT	build/msvc/msvc-generate/Makefile.mak	/^OUTPUT=$(SOURCEBASE)\/config-msvc-version.h$/;"	m
O_BINARY	src/openvpn/syshead.h	464;"	d
P2MP	src/openvpn/syshead.h	521;"	d
P2MP	src/openvpn/syshead.h	523;"	d
P2MP_SERVER	src/openvpn/syshead.h	527;"	d
P2MP_SERVER	src/openvpn/syshead.h	529;"	d
P2P_CHECK_SIG	src/openvpn/openvpn.c	42;"	d	file:
P2P_ERROR_DELAY_MS	src/openvpn/errlevel.h	42;"	d
PACKET_ID_H	src/openvpn/packet_id.h	34;"	d
PACKET_ID_WRAP_TRIGGER	src/openvpn/packet_id.h	60;"	d
PACKET_ID_WRAP_TRIGGER	src/openvpn/packet_id.h	85;"	d
PARSE_DATA	src/openvpn/crypto.c	849;"	d	file:
PARSE_DATA_COMPLETE	src/openvpn/crypto.c	850;"	d	file:
PARSE_FINISHED	src/openvpn/crypto.c	852;"	d	file:
PARSE_FOOT	src/openvpn/crypto.c	851;"	d	file:
PARSE_HEAD	src/openvpn/crypto.c	848;"	d	file:
PARSE_INITIAL	src/openvpn/crypto.c	847;"	d	file:
PAR_ALL	src/openvpn/proxy.h	48;"	d
PAR_NCT	src/openvpn/proxy.h	49;"	d
PAR_NO	src/openvpn/proxy.h	47;"	d
PASSTOS_CAPABILITY	src/openvpn/syshead.h	397;"	d
PASSTOS_CAPABILITY	src/openvpn/syshead.h	399;"	d
PATH_SEPARATOR	config-msvc.h	79;"	d
PATH_SEPARATOR_STR	config-msvc.h	80;"	d
PAYLOAD_ALIGN	src/openvpn/mtu.h	87;"	d
PAYLOAD_SIZE	src/openvpn/mtu.h	163;"	d
PAYLOAD_SIZE_DYNAMIC	src/openvpn/mtu.h	164;"	d
PA_BRACKET	src/openvpn/buffer.h	132;"	d
PCT_DEST	src/openvpn/pf-inline.h	33;"	d
PCT_SRC	src/openvpn/pf-inline.h	32;"	d
PD_SHOW_DATA	src/openvpn/ssl.h	487;"	d
PD_TLS	src/openvpn/ssl.h	488;"	d
PD_TLS_AUTH_HMAC_SIZE_MASK	src/openvpn/ssl.h	486;"	d
PD_VERBOSE	src/openvpn/ssl.h	489;"	d
PEDANTIC	src/openvpn/syshead.h	382;"	d
PEDANTIC	src/openvpn/syshead.h	390;"	d
PERF_BIO_READ_CIPHERTEXT	src/openvpn/perf.h	41;"	d
PERF_BIO_READ_PLAINTEXT	src/openvpn/perf.h	39;"	d
PERF_BIO_WRITE_CIPHERTEXT	src/openvpn/perf.h	42;"	d
PERF_BIO_WRITE_PLAINTEXT	src/openvpn/perf.h	40;"	d
PERF_EVENT_LOOP	src/openvpn/perf.h	45;"	d
PERF_H	src/openvpn/perf.h	32;"	d
PERF_IO_WAIT	src/openvpn/perf.h	44;"	d
PERF_MULTI_BCAST	src/openvpn/perf.h	49;"	d
PERF_MULTI_CLOSE_INSTANCE	src/openvpn/perf.h	47;"	d
PERF_MULTI_CREATE_INSTANCE	src/openvpn/perf.h	46;"	d
PERF_MULTI_MCAST	src/openvpn/perf.h	50;"	d
PERF_MULTI_SHOW_STATS	src/openvpn/perf.h	48;"	d
PERF_N	src/openvpn/perf.h	59;"	d
PERF_PROC_IN_LINK	src/openvpn/perf.h	53;"	d
PERF_PROC_IN_TUN	src/openvpn/perf.h	55;"	d
PERF_PROC_OUT_LINK	src/openvpn/perf.h	56;"	d
PERF_PROC_OUT_TUN	src/openvpn/perf.h	57;"	d
PERF_PROC_OUT_TUN_MTCP	src/openvpn/perf.h	58;"	d
PERF_READ_IN_LINK	src/openvpn/perf.h	52;"	d
PERF_READ_IN_TUN	src/openvpn/perf.h	54;"	d
PERF_SCRIPT	src/openvpn/perf.h	51;"	d
PERF_TLS_MULTI_PROCESS	src/openvpn/perf.h	43;"	d
PF_INLINE_H	src/openvpn/pf-inline.h	26;"	d
PF_MAX_LINE_LEN	src/openvpn/pf.h	33;"	d
PING_EXIT	src/openvpn/options.h	262;"	d
PING_H	src/openvpn/ping.h	26;"	d
PING_INLINE_H	src/openvpn/ping-inline.h	26;"	d
PING_RESTART	src/openvpn/options.h	263;"	d
PING_STRING_SIZE	src/openvpn/ping.h	39;"	d
PING_UNDEF	src/openvpn/options.h	261;"	d
PIPV4_CLIENT_NAT	src/openvpn/forward.h	234;"	d
PIPV4_EXTRACT_DHCP_ROUTER	src/openvpn/forward.h	233;"	d
PIPV4_OUTGOING	src/openvpn/forward.h	232;"	d
PIPV4_PASSTOS	src/openvpn/forward.h	230;"	d
PIP_MSSFIX	src/openvpn/forward.h	231;"	d
PKCS11H_HOME	msvc-env.bat	/^if "%PKCS11H_HOME%" == "" set PKCS11H_HOME=%OPENVPN_DEPROOT%$/;"	v
PKCS11_BACKEND_H_	src/openvpn/pkcs11_backend.h	31;"	d
PLATFORMS	msvc-build.bat	/^set PLATFORMS=Win32$/;"	v
PLATFORM_H	src/openvpn/platform.h	26;"	d
PLOG_DEBUG	include/openvpn-plugin.h	/^  PLOG_DEBUG  = (1 << 3),  \/* Debug message, displayed if verb >= 7 *\/$/;"	e	enum:__anon1
PLOG_ERR	include/openvpn-plugin.h	/^  PLOG_ERR    = (1 << 0),  \/* Error condition message *\/$/;"	e	enum:__anon1
PLOG_ERRNO	include/openvpn-plugin.h	/^  PLOG_ERRNO  = (1 << 8),  \/* Add error description to message *\/$/;"	e	enum:__anon1
PLOG_NOMUTE	include/openvpn-plugin.h	/^  PLOG_NOMUTE = (1 << 9),  \/* Mute setting does not apply for message *\/$/;"	e	enum:__anon1
PLOG_NOTE	include/openvpn-plugin.h	/^  PLOG_NOTE   = (1 << 2),  \/* Informational message *\/$/;"	e	enum:__anon1
PLOG_WARN	include/openvpn-plugin.h	/^  PLOG_WARN   = (1 << 1),  \/* General warning message *\/$/;"	e	enum:__anon1
PLUGIN_DEF_AUTH	src/openvpn/syshead.h	545;"	d
PLUGIN_OPTION_LIST	src/openvpn/options.h	667;"	d
PLUGIN_OPTION_LIST	src/openvpn/options.h	669;"	d
PLUGIN_PF	src/openvpn/syshead.h	578;"	d
PLUGIN_SYM	src/openvpn/plugin.c	233;"	d	file:
PLUGIN_SYMBOL_REQUIRED	src/openvpn/plugin.c	47;"	d	file:
POLL	src/openvpn/syshead.h	651;"	d
POLL	src/openvpn/syshead.h	653;"	d
POOL_H	src/openvpn/pool.h	26;"	d
PORT_SHARE	src/openvpn/syshead.h	536;"	d
PORT_SHARE	src/openvpn/syshead.h	538;"	d
PRE_PULL_INITIAL_PING_RESTART	src/openvpn/ping.h	34;"	d
PRNG_NONCE_RESET_BYTES	src/openvpn/crypto.h	295;"	d
PROCESS_SIGNAL_P2P	src/openvpn/openvpn.c	107;"	d	file:
PROTO_DUMP	src/openvpn/openvpn.h	573;"	d
PROTO_DUMP	src/openvpn/openvpn.h	580;"	d
PROTO_DUMP_FLAGS	src/openvpn/openvpn.h	572;"	d
PROTO_H	src/openvpn/proto.h	26;"	d
PROTO_N	src/openvpn/socket.h	/^	PROTO_N$/;"	e	enum:proto_num
PROTO_NONE	src/openvpn/socket.h	/^	PROTO_NONE, \/* catch for uninitialized *\/$/;"	e	enum:proto_num
PROTO_TCPv4	src/openvpn/socket.h	/^	PROTO_TCPv4,$/;"	e	enum:proto_num
PROTO_TCPv4_CLIENT	src/openvpn/socket.h	/^	PROTO_TCPv4_CLIENT,$/;"	e	enum:proto_num
PROTO_TCPv4_SERVER	src/openvpn/socket.h	/^	PROTO_TCPv4_SERVER,$/;"	e	enum:proto_num
PROTO_TCPv6	src/openvpn/socket.h	/^	PROTO_TCPv6,$/;"	e	enum:proto_num
PROTO_TCPv6_CLIENT	src/openvpn/socket.h	/^	PROTO_TCPv6_CLIENT,$/;"	e	enum:proto_num
PROTO_TCPv6_SERVER	src/openvpn/socket.h	/^	PROTO_TCPv6_SERVER,$/;"	e	enum:proto_num
PROTO_UDPv4	src/openvpn/socket.h	/^	PROTO_UDPv4,$/;"	e	enum:proto_num
PROTO_UDPv6	src/openvpn/socket.h	/^	PROTO_UDPv6,$/;"	e	enum:proto_num
PROXY_CONNECTION_BUFFER_SIZE	src/openvpn/ps.c	46;"	d	file:
PROXY_DIGEST_AUTH	src/openvpn/syshead.h	621;"	d
PROXY_DIGEST_AUTH	src/openvpn/syshead.h	623;"	d
PROXY_H	src/openvpn/proxy.h	26;"	d
PS_DISABLED	src/openvpn/socket.h	134;"	d
PS_DONT_SHOW_ADDR	src/openvpn/socket.h	348;"	d
PS_ENABLED	src/openvpn/socket.h	135;"	d
PS_FOREIGN	src/openvpn/socket.h	136;"	d
PS_H	src/openvpn/ps.h	26;"	d
PS_INITIAL	src/openvpn/perf.c	67;"	d	file:
PS_METER_INTERRUPTED	src/openvpn/perf.c	69;"	d	file:
PS_METER_RUNNING	src/openvpn/perf.c	68;"	d	file:
PS_SHOW_PKTINFO	src/openvpn/socket.h	347;"	d
PS_SHOW_PORT	src/openvpn/socket.h	346;"	d
PS_SHOW_PORT_IF_DEFINED	src/openvpn/socket.h	345;"	d
PULL_DEFINED	src/openvpn/options.h	640;"	d
PULL_DEFINED	src/openvpn/options.h	647;"	d
PUSHLIST_H	src/openvpn/pushlist.h	26;"	d
PUSH_BUNDLE_SIZE	src/openvpn/common.h	87;"	d
PUSH_DEFINED	src/openvpn/options.h	642;"	d
PUSH_DEFINED	src/openvpn/options.h	651;"	d
PUSH_H	src/openvpn/push.h	26;"	d
PUSH_MSG_ALREADY_REPLIED	src/openvpn/push.h	38;"	d
PUSH_MSG_AUTH_FAILURE	src/openvpn/push.h	36;"	d
PUSH_MSG_CONTINUATION	src/openvpn/push.h	37;"	d
PUSH_MSG_ERROR	src/openvpn/push.h	32;"	d
PUSH_MSG_REPLY	src/openvpn/push.h	34;"	d
PUSH_MSG_REQUEST	src/openvpn/push.h	33;"	d
PUSH_MSG_REQUEST_DEFERRED	src/openvpn/push.h	35;"	d
PUSH_REQUEST_INTERVAL	src/openvpn/common.h	92;"	d
P_ACK_V1	src/openvpn/ssl.h	62;"	d
P_CONTROL_HARD_RESET_CLIENT_V1	src/openvpn/ssl.h	58;"	d
P_CONTROL_HARD_RESET_CLIENT_V2	src/openvpn/ssl.h	67;"	d
P_CONTROL_HARD_RESET_SERVER_V1	src/openvpn/ssl.h	59;"	d
P_CONTROL_HARD_RESET_SERVER_V2	src/openvpn/ssl.h	68;"	d
P_CONTROL_SOFT_RESET_V1	src/openvpn/ssl.h	60;"	d
P_CONTROL_V1	src/openvpn/ssl.h	61;"	d
P_DATA_V1	src/openvpn/ssl.h	63;"	d
P_DATA_V2	src/openvpn/ssl.h	64;"	d
P_FIRST_OPCODE	src/openvpn/ssl.h	71;"	d
P_KEY_ID_MASK	src/openvpn/ssl.h	54;"	d
P_LAST_OPCODE	src/openvpn/ssl.h	72;"	d
P_OPCODE_SHIFT	src/openvpn/ssl.h	55;"	d
QUERY_REG_DWORD	src/openvpnserv/openvpnserv.c	117;"	d	file:
QUERY_REG_STRING	src/openvpnserv/openvpnserv.c	103;"	d	file:
REAP_DIVISOR	src/openvpn/multi.h	453;"	d
REAP_MAX	src/openvpn/multi.h	455;"	d
REAP_MAX_WAKEUP	src/openvpn/multi.h	452;"	d
REAP_MIN	src/openvpn/multi.h	454;"	d
REG_KEY	src/openvpnserv/openvpnserv.c	80;"	d	file:
RELIABLE_ACK_SIZE	src/openvpn/reliable.h	49;"	d
RELIABLE_CAPACITY	src/openvpn/reliable.h	54;"	d
RELIABLE_H	src/openvpn/reliable.h	35;"	d
RESOLVE_PAM_FUNCTION	src/plugins/auth-pam/pamdl.c	22;"	d	file:
RESOLV_RETRY_INFINITE	src/openvpn/socket.h	53;"	d
RESPONSE_INIT_FAILED	src/openvpn/ps.c	54;"	d	file:
RESPONSE_INIT_FAILED	src/plugins/auth-pam/auth-pam.c	61;"	d	file:
RESPONSE_INIT_FAILED	src/plugins/down-root/down-root.c	54;"	d	file:
RESPONSE_INIT_SUCCEEDED	src/openvpn/ps.c	53;"	d	file:
RESPONSE_INIT_SUCCEEDED	src/plugins/auth-pam/auth-pam.c	60;"	d	file:
RESPONSE_INIT_SUCCEEDED	src/plugins/down-root/down-root.c	53;"	d	file:
RESPONSE_SCRIPT_FAILED	src/plugins/down-root/down-root.c	56;"	d	file:
RESPONSE_SCRIPT_SUCCEEDED	src/plugins/down-root/down-root.c	55;"	d	file:
RESPONSE_VERIFY_FAILED	src/plugins/auth-pam/auth-pam.c	63;"	d	file:
RESPONSE_VERIFY_SUCCEEDED	src/plugins/auth-pam/auth-pam.c	62;"	d	file:
RGI_ADDR_DEFINED	src/openvpn/route.h	155;"	d
RGI_HWADDR_DEFINED	src/openvpn/route.h	157;"	d
RGI_IFACE_DEFINED	src/openvpn/route.h	158;"	d
RGI_NETMASK_DEFINED	src/openvpn/route.h	156;"	d
RGI_N_ADDRESSES	src/openvpn/route.h	177;"	d
RGI_ON_LINK	src/openvpn/route.h	160;"	d
RGI_OVERFLOW	src/openvpn/route.h	159;"	d
RG_AUTO_LOCAL	src/openvpn/route.h	90;"	d
RG_BLOCK_LOCAL	src/openvpn/route.h	91;"	d
RG_BYPASS_DHCP	src/openvpn/route.h	87;"	d
RG_BYPASS_DNS	src/openvpn/route.h	88;"	d
RG_DEF1	src/openvpn/route.h	86;"	d
RG_ENABLE	src/openvpn/route.h	84;"	d
RG_LOCAL	src/openvpn/route.h	85;"	d
RG_REROUTE_GW	src/openvpn/route.h	89;"	d
RH_HOST_LEN	src/openvpn/options.h	169;"	d
RKF_INLINE	src/openvpn/crypto.h	167;"	d
RKF_MUST_SUCCEED	src/openvpn/crypto.h	166;"	d
RL_DID_LOCAL	src/openvpn/route.h	184;"	d
RL_DID_REDIRECT_DEFAULT_GATEWAY	src/openvpn/route.h	183;"	d
RL_ROUTES_ADDED	src/openvpn/route.h	185;"	d
ROUNDUP	src/openvpn/route.c	2616;"	d	file:
ROUNDUP	src/openvpn/route.c	2728;"	d	file:
ROUNDUP	src/openvpn/route.c	2936;"	d	file:
ROUTE_DELETE_FIRST	src/openvpn/route.h	51;"	d
ROUTE_H	src/openvpn/route.h	30;"	d
ROUTE_METHOD_ADAPTIVE	src/openvpn/route.h	42;"	d
ROUTE_METHOD_EXE	src/openvpn/route.h	44;"	d
ROUTE_METHOD_IPAPI	src/openvpn/route.h	43;"	d
ROUTE_METHOD_MASK	src/openvpn/route.h	45;"	d
ROUTE_OPTION_FLAGS	src/openvpn/options.h	655;"	d
ROUTE_OPTION_FLAGS	src/openvpn/options.h	657;"	d
ROUTE_REF_GW	src/openvpn/route.h	52;"	d
RTSA_DEFAULT_METRIC	src/openvpn/route.h	66;"	d
RTSA_REMOTE_ENDPOINT	src/openvpn/route.h	64;"	d
RTSA_REMOTE_HOST	src/openvpn/route.h	65;"	d
RT_ADDED	src/openvpn/route.h	115;"	d
RT_DEFINED	src/openvpn/route.h	114;"	d
RT_METRIC_DEFINED	src/openvpn/route.h	116;"	d
R_OK	config-msvc.h	105;"	d
ReportStatusToSCMgr	src/openvpnserv/service.c	/^BOOL ReportStatusToSCMgr(DWORD dwCurrentState,$/;"	f
ResetError	src/openvpnserv/service.c	/^void ResetError (void)$/;"	f
SA_IP_PORT	src/openvpn/socket.h	374;"	d
SA_SET_IF_NONZERO	src/openvpn/socket.h	375;"	d
SCHEDULE_H	src/openvpn/schedule.h	26;"	d
SCRIPT_SECURITY_WARNING	src/openvpn/common.h	103;"	d
SC_ECHO	src/openvpn/misc.h	234;"	d
SDL_CONSTRAIN	src/openvpn/error.h	198;"	d
SELECT	src/openvpn/event.c	53;"	d	file:
SELECT	src/openvpn/event.c	55;"	d	file:
SELECT_MAX_FDS	src/openvpn/event.c	63;"	d	file:
SELECT_MAX_FDS	src/openvpn/event.c	65;"	d	file:
SELECT_PREFERRED_OVER_POLL	src/openvpn/event.c	46;"	d	file:
SEQ_EXPIRED	src/openvpn/packet_id.c	57;"	d	file:
SEQ_REAP_INTERVAL	src/openvpn/packet_id.h	125;"	d
SEQ_UNSEEN	src/openvpn/packet_id.c	56;"	d	file:
SESSION_ID_H	src/openvpn/session_id.h	36;"	d
SET_MTU_TUN	src/openvpn/mtu.h	217;"	d
SET_MTU_UPPER_BOUND	src/openvpn/mtu.h	218;"	d
SF_GETADDRINFO_DGRAM	src/openvpn/socket.h	213;"	d
SF_HOST_RANDOMIZE	src/openvpn/socket.h	212;"	d
SF_NOPOOL	src/openvpn/options.h	392;"	d
SF_NO_PUSH_ROUTE_GATEWAY	src/openvpn/options.h	394;"	d
SF_PORT_SHARE	src/openvpn/socket.h	211;"	d
SF_TCP_NODELAY	src/openvpn/socket.h	210;"	d
SF_TCP_NODELAY_HELPER	src/openvpn/options.h	393;"	d
SF_USE_IP_PKTINFO	src/openvpn/socket.h	209;"	d
SHAPER_DEFINED	src/openvpn/options.h	661;"	d
SHAPER_DEFINED	src/openvpn/options.h	663;"	d
SHAPER_H	src/openvpn/shaper.h	26;"	d
SHAPER_MAX	src/openvpn/shaper.h	44;"	d
SHAPER_MAX_TIMEOUT	src/openvpn/shaper.h	46;"	d
SHAPER_MIN	src/openvpn/shaper.h	43;"	d
SHAPER_USE_FP	src/openvpn/shaper.h	48;"	d
SHA_DIGEST_LENGTH	src/openvpn/crypto_polarssl.h	72;"	d
SHOW_BOOL	src/openvpn/options.c	1672;"	d	file:
SHOW_BOOL	src/openvpn/options.c	892;"	d	file:
SHOW_INT	src/openvpn/options.c	1671;"	d	file:
SHOW_INT	src/openvpn/options.c	889;"	d	file:
SHOW_PARM	src/openvpn/options.c	1669;"	d	file:
SHOW_PARM	src/openvpn/options.c	887;"	d	file:
SHOW_STR	src/openvpn/options.c	1670;"	d	file:
SHOW_STR	src/openvpn/options.c	888;"	d	file:
SHOW_UINT	src/openvpn/options.c	890;"	d	file:
SHOW_UNSIGNED	src/openvpn/options.c	891;"	d	file:
SID_SIZE	src/openvpn/session_id.h	48;"	d
SIGHUP	config-msvc.h	110;"	d
SIGINT	config-msvc.h	111;"	d
SIGTERM	config-msvc.h	114;"	d
SIGUSR1	config-msvc.h	112;"	d
SIGUSR2	config-msvc.h	113;"	d
SIG_H	src/openvpn/sig.h	26;"	d
SIZE	src/openvpn/basic.h	31;"	d
SM_POST_INIT	src/openvpn/sig.c	201;"	d	file:
SM_PRE_INIT	src/openvpn/sig.c	200;"	d	file:
SM_UNDEF	src/openvpn/sig.c	199;"	d	file:
SOCKET_H	src/openvpn/socket.h	26;"	d
SOCKET_READ	src/openvpn/openvpn.h	241;"	d
SOCKET_SND_RCV_BUF_MAX	src/openvpn/socket.h	47;"	d
SOCKET_UNDEFINED	src/openvpn/syshead.h	490;"	d
SOCKET_UNDEFINED	src/openvpn/syshead.h	493;"	d
SOCKET_WRITE	src/openvpn/openvpn.h	242;"	d
SOCKS_H	src/openvpn/socks.h	31;"	d
SOLUTION	msvc-env.bat	/^set SOLUTION=openvpn.sln$/;"	v
SOL_IP	src/openvpn/syshead.h	440;"	d
SOURCEBASE	msvc-env.bat	/^set SOURCEBASE=%cd%$/;"	v
SSEC_BUILT_IN	src/openvpn/misc.h	319;"	d
SSEC_NONE	src/openvpn/misc.h	318;"	d
SSEC_PW_ENV	src/openvpn/misc.h	321;"	d
SSEC_SCRIPTS	src/openvpn/misc.h	320;"	d
SSLAPI	src/openvpn/ssl_backend.h	39;"	d
SSLAPI	src/openvpn/ssl_backend.h	44;"	d
SSLAPI	src/openvpn/ssl_backend.h	49;"	d
SSLAPI_NONE	include/openvpn-plugin.h	/^  SSLAPI_NONE,$/;"	e	enum:__anon2
SSLAPI_OPENSSL	include/openvpn-plugin.h	/^  SSLAPI_OPENSSL,$/;"	e	enum:__anon2
SSLAPI_POLARSSL	include/openvpn-plugin.h	/^  SSLAPI_POLARSSL$/;"	e	enum:__anon2
SSLF_AUTH_USER_PASS_OPTIONAL	src/openvpn/ssl_common.h	291;"	d
SSLF_CLIENT_CERT_NOT_REQUIRED	src/openvpn/ssl_common.h	289;"	d
SSLF_CRL_VERIFY_DIR	src/openvpn/ssl_common.h	293;"	d
SSLF_OPT_VERIFY	src/openvpn/ssl_common.h	292;"	d
SSLF_TLS_VERSION_MAX_MASK	src/openvpn/ssl_common.h	297;"	d
SSLF_TLS_VERSION_MAX_SHIFT	src/openvpn/ssl_common.h	296;"	d
SSLF_TLS_VERSION_MIN_MASK	src/openvpn/ssl_common.h	295;"	d
SSLF_TLS_VERSION_MIN_SHIFT	src/openvpn/ssl_common.h	294;"	d
SSLF_USERNAME_AS_COMMON_NAME	src/openvpn/ssl_common.h	290;"	d
SSL_BACKEND_H_	src/openvpn/ssl_backend.h	32;"	d
SSL_COMMON_H_	src/openvpn/ssl_common.h	31;"	d
SSL_CTX_use_CryptoAPI_certificate	src/openvpn/cryptoapi.c	/^int SSL_CTX_use_CryptoAPI_certificate(SSL_CTX *ssl_ctx, const char *cert_prop)$/;"	f
SSL_LIB_VER_STR	src/openvpn/options.c	3444;"	d	file:
SSL_LIB_VER_STR	src/openvpn/options.c	3456;"	d	file:
SSL_OPENSSL_H_	src/openvpn/ssl_openssl.h	31;"	d
SSL_OP_NO_TICKET	src/openvpn/ssl_openssl.h	43;"	d
SSL_POLARSSL_H_	src/openvpn/ssl_polarssl.h	31;"	d
SSL_SIG_LENGTH	src/openvpn/cryptoapi.c	69;"	d	file:
SSL_VERIFY_BACKEND_H_	src/openvpn/ssl_verify_backend.h	31;"	d
SSL_VERIFY_H_	src/openvpn/ssl_verify.h	31;"	d
SSL_VERIFY_OPENSSL_H_	src/openvpn/ssl_verify_openssl.h	32;"	d
SSL_VERIFY_POLARSSL_H_	src/openvpn/ssl_verify_polarssl.h	31;"	d
STACK_N	src/openvpn/perf.h	68;"	d
STATUS_H	src/openvpn/status.h	26;"	d
STATUS_OUTPUT_READ	src/openvpn/status.h	51;"	d
STATUS_OUTPUT_WRITE	src/openvpn/status.h	52;"	d
STATUS_PRINTF_MAXLEN	src/openvpn/status.c	208;"	d	file:
SUB_CHECKSUM_32	src/openvpn/proto.h	205;"	d
SUCCESS	src/openvpn/ssl_verify_backend.h	/^typedef enum { SUCCESS=0, FAILURE=1 } result_t;$/;"	e	enum:__anon10
SWAP	src/openvpn/error.c	198;"	d	file:
SWAP_BUF_SIZE	src/openvpn/ssl.c	1167;"	d	file:
SWAP_BUF_SIZE	src/openvpn/ssl.c	1217;"	d	file:
SYSHEAD_H	src/openvpn/syshead.h	26;"	d
SYSLOG_CAPABILITY	src/openvpn/syshead.h	455;"	d
SYSLOG_CAPABILITY	src/openvpn/syshead.h	457;"	d
SYS_PATH_ENV_VAR_NAME	src/openvpn/win32.h	32;"	d
SZAPPNAME	src/openvpnserv/service.h	64;"	d
SZDEPENDENCIES	src/openvpnserv/service.h	70;"	d
SZSERVICEDISPLAYNAME	src/openvpnserv/service.h	68;"	d
SZSERVICENAME	src/openvpnserv/service.h	66;"	d
S_ACTIVE	src/openvpn/ssl_common.h	94;"	d
S_ERROR	src/openvpn/ssl_common.h	78;"	d
S_ERROR	src/openvpn/syshead.h	251;"	d
S_FATAL	src/openvpn/misc.h	90;"	d
S_GOT_KEY	src/openvpn/ssl_common.h	91;"	d
S_INITIAL	src/openvpn/ssl_common.h	81;"	d
S_IRUSR	config-msvc.h	103;"	d
S_IWUSR	config-msvc.h	104;"	d
S_NORMAL_OP	src/openvpn/ssl_common.h	99;"	d
S_PRE_START	src/openvpn/ssl_common.h	84;"	d
S_SCRIPT	src/openvpn/misc.h	89;"	d
S_SENT_KEY	src/openvpn/ssl_common.h	89;"	d
S_START	src/openvpn/ssl_common.h	87;"	d
S_UNDEF	src/openvpn/ssl_common.h	79;"	d
ServiceStart	src/openvpnserv/openvpnserv.c	/^VOID ServiceStart (DWORD dwArgc, LPTSTR *lpszArgv)$/;"	f
ServiceStop	src/openvpnserv/openvpnserv.c	/^VOID ServiceStop()$/;"	f
TAP_MTU_EXTRA_DEFAULT	src/openvpn/mtu.h	76;"	d
TAP_WINDOWS_HOME	msvc-env.bat	/^if "%TAP_WINDOWS_HOME%" == "" set TAP_WINDOWS_HOME=%OPENVPN_DEPROOT%$/;"	v
TARGET_ALIAS	config-msvc.h	88;"	d
TARGET_WIN32	config-msvc.h	87;"	d
TA_INITIAL	src/openvpn/mtcp.c	51;"	d	file:
TA_SOCKET_READ	src/openvpn/mtcp.c	44;"	d	file:
TA_SOCKET_READ_RESIDUAL	src/openvpn/mtcp.c	45;"	d	file:
TA_SOCKET_WRITE	src/openvpn/mtcp.c	46;"	d	file:
TA_SOCKET_WRITE_DEFERRED	src/openvpn/mtcp.c	48;"	d	file:
TA_SOCKET_WRITE_READY	src/openvpn/mtcp.c	47;"	d	file:
TA_TIMEOUT	src/openvpn/mtcp.c	52;"	d	file:
TA_TUN_READ	src/openvpn/mtcp.c	49;"	d	file:
TA_TUN_WRITE	src/openvpn/mtcp.c	50;"	d	file:
TA_TUN_WRITE_TIMEOUT	src/openvpn/mtcp.c	53;"	d	file:
TA_UNDEF	src/openvpn/mtcp.c	43;"	d	file:
TIME_BACKTRACK_PROTECTION	src/openvpn/syshead.h	685;"	d
TLA_LOCAL	src/openvpn/route.h	290;"	d
TLA_NONLOCAL	src/openvpn/route.h	289;"	d
TLA_NOT_IMPLEMENTED	src/openvpn/route.h	288;"	d
TLSMP_ACTIVE	src/openvpn/ssl.h	240;"	d
TLSMP_INACTIVE	src/openvpn/ssl.h	239;"	d
TLSMP_KILL	src/openvpn/ssl.h	241;"	d
TLS_AGGREGATE_ACK	src/openvpn/ssl.h	77;"	d
TLS_AUTHENTICATION_DEFERRED	src/openvpn/ssl_verify.h	74;"	d
TLS_AUTHENTICATION_FAILED	src/openvpn/ssl_verify.h	73;"	d
TLS_AUTHENTICATION_SUCCEEDED	src/openvpn/ssl_verify.h	72;"	d
TLS_AUTHENTICATION_UNDEFINED	src/openvpn/ssl_verify.h	75;"	d
TLS_CHANNEL_BUF_SIZE	src/openvpn/common.h	81;"	d
TLS_CLIENT	src/openvpn/options.c	2998;"	d	file:
TLS_CLIENT	src/openvpn/options.c	3077;"	d	file:
TLS_MODE	src/openvpn/openvpn.h	571;"	d
TLS_MODE	src/openvpn/openvpn.h	579;"	d
TLS_MULTI_AUTH_STATUS_INTERVAL	src/openvpn/ssl.h	108;"	d
TLS_MULTI_HORIZON	src/openvpn/ssl.h	97;"	d
TLS_MULTI_REFRESH	src/openvpn/ssl.h	96;"	d
TLS_MULTI_THREAD_SEND_TIMEOUT	src/openvpn/ssl.h	105;"	d
TLS_OPTIONS_LEN	src/openvpn/ssl.h	115;"	d
TLS_RELIABLE_N_REC_BUFFERS	src/openvpn/ssl.h	91;"	d
TLS_RELIABLE_N_SEND_BUFFERS	src/openvpn/ssl.h	90;"	d
TLS_REMOTE_SUBJECT_DN	src/openvpn/ssl_verify.h	69;"	d
TLS_REMOTE_SUBJECT_RDN_PREFIX	src/openvpn/ssl_verify.h	70;"	d
TLS_SERVER	src/openvpn/options.c	2999;"	d	file:
TLS_SERVER	src/openvpn/options.c	3078;"	d	file:
TLS_USERNAME_LEN	src/openvpn/ssl_verify.c	50;"	d	file:
TLS_VER_1_0	src/openvpn/ssl_backend.h	114;"	d
TLS_VER_1_1	src/openvpn/ssl_backend.h	115;"	d
TLS_VER_1_2	src/openvpn/ssl_backend.h	116;"	d
TLS_VER_BAD	src/openvpn/ssl_backend.h	112;"	d
TLS_VER_UNSPEC	src/openvpn/ssl_backend.h	113;"	d
TM_ACTIVE	src/openvpn/ssl_common.h	400;"	d
TM_LAME_DUCK	src/openvpn/ssl_common.h	403;"	d
TM_SIZE	src/openvpn/ssl_common.h	404;"	d
TM_UNTRUSTED	src/openvpn/ssl_common.h	401;"	d
TOP_NET30	src/openvpn/proto.h	44;"	d
TOP_P2P	src/openvpn/proto.h	45;"	d
TOP_SUBNET	src/openvpn/proto.h	46;"	d
TOP_UNDEF	src/openvpn/proto.h	43;"	d
TO_LINK_DEF	src/openvpn/forward.h	49;"	d
TO_LINK_FRAG	src/openvpn/forward.h	44;"	d
TO_LINK_FRAG	src/openvpn/forward.h	46;"	d
TUNNEL_TOPOLOGY	src/openvpn/tun.h	131;"	d
TUNNEL_TYPE	src/openvpn/tun.h	128;"	d
TUNSETGROUP	src/openvpn/tun.c	1606;"	d	file:
TUNSETOWNER	src/openvpn/tun.c	1603;"	d	file:
TUN_ADAPTER_INDEX_INVALID	src/openvpn/tun.h	43;"	d
TUN_H	src/openvpn/tun.h	26;"	d
TUN_LINK_DELTA	src/openvpn/mtu.h	149;"	d
TUN_MTU_DEFAULT	src/openvpn/mtu.h	71;"	d
TUN_MTU_MIN	src/openvpn/mtu.h	61;"	d
TUN_MTU_SIZE	src/openvpn/mtu.h	154;"	d
TUN_MTU_SIZE_DYNAMIC	src/openvpn/mtu.h	155;"	d
TUN_OUT	src/openvpn/forward.h	39;"	d
TUN_PASS_BUFFER	src/openvpn/tun.h	305;"	d
TUN_READ	src/openvpn/openvpn.h	243;"	d
TUN_WRITE	src/openvpn/openvpn.h	244;"	d
TV_WITHIN_SIGMA_MAX_SEC	src/openvpn/otime.h	235;"	d
TV_WITHIN_SIGMA_MAX_USEC	src/openvpn/otime.h	236;"	d
UINT64	src/openvpn/ntlm.c	51;"	d	file:
UINT64	src/openvpn/ntlm.c	55;"	d	file:
UINT8_MAX	src/openvpn/socket.c	2334;"	d	file:
UINTEGER64	src/openvpn/ntlm.c	50;"	d	file:
UINTEGER64	src/openvpn/ntlm.c	54;"	d	file:
UNDEFINED_EVENT	src/openvpn/event.h	49;"	d
UNDEFINED_EVENT	src/openvpn/event.h	55;"	d
UNIX_SOCK_SUPPORT	src/openvpn/syshead.h	591;"	d
UNIX_SOCK_SUPPORT	src/openvpn/syshead.h	593;"	d
UP_QUERY_DISABLED	src/openvpn/manage.h	236;"	d
UP_QUERY_NEED_OK	src/openvpn/manage.h	239;"	d
UP_QUERY_NEED_STR	src/openvpn/manage.h	240;"	d
UP_QUERY_PASS	src/openvpn/manage.h	238;"	d
UP_QUERY_USER_PASS	src/openvpn/manage.h	237;"	d
UP_TYPE_AUTH	src/openvpn/ssl_common.h	42;"	d
UP_TYPE_PRIVATE_KEY	src/openvpn/ssl_common.h	43;"	d
UP_TYPE_PROXY	src/openvpn/proxy.c	47;"	d	file:
UP_TYPE_SOCKS	src/openvpn/socks.c	53;"	d	file:
USEC_TIMER_MAX	src/openvpn/interval.h	209;"	d
USEC_TIMER_MAX_USEC	src/openvpn/interval.h	211;"	d
USER_PASS_LEN	src/openvpn/misc.h	206;"	d
USER_PASS_LEN	src/openvpn/misc.h	208;"	d
USE_64_BIT_COUNTERS	src/openvpn/syshead.h	506;"	d
VALGRIND_MAKE_READABLE	src/openvpn/memdbg.h	50;"	d
VALGRIND_MAKE_READABLE	src/openvpn/memdbg.h	54;"	d
VERIFY_PERMISSION	src/openvpn/options.c	3992;"	d	file:
VERIFY_PERMISSION	src/openvpn/options.c	4033;"	d	file:
VERIFY_X509_NONE	src/openvpn/ssl_verify.h	65;"	d
VERIFY_X509_SUBJECT_DN	src/openvpn/ssl_verify.h	66;"	d
VERIFY_X509_SUBJECT_RDN	src/openvpn/ssl_verify.h	67;"	d
VERIFY_X509_SUBJECT_RDN_PREFIX	src/openvpn/ssl_verify.h	68;"	d
WEXITSTATUS	src/openvpn/syshead.h	64;"	d
WIFEXITED	src/openvpn/syshead.h	67;"	d
WIN32_0_1	src/openvpn/syshead.h	481;"	d
WIN32_0_1	src/openvpn/syshead.h	483;"	d
WIN_IPCONFIG_PATH_SUFFIX	src/openvpn/win32.h	35;"	d
WIN_NET_PATH_SUFFIX	src/openvpn/win32.h	36;"	d
WIN_ROUTE_PATH_SUFFIX	src/openvpn/win32.h	34;"	d
WSO_FORCE_CONSOLE	src/openvpn/win32.h	156;"	d
WSO_FORCE_SERVICE	src/openvpn/win32.h	155;"	d
WSO_MODE_CONSOLE	src/openvpn/win32.h	141;"	d
WSO_MODE_SERVICE	src/openvpn/win32.h	140;"	d
WSO_MODE_UNDEF	src/openvpn/win32.h	139;"	d
WSO_NOFORCE	src/openvpn/win32.h	154;"	d
W_OK	config-msvc.h	106;"	d
X509_NAME_CHAR_CLASS	src/openvpn/ssl_verify.c	53;"	d	file:
X509_USERNAME_FIELD_DEFAULT	src/openvpn/ssl.h	118;"	d
XT_FULL_CHAIN	src/openvpn/ssl_verify.h	220;"	d
X_OK	config-msvc.h	107;"	d
YES_COMPRESS	src/openvpn/lzo.h	115;"	d
_BASE64_H_	src/openvpn/base64.h	35;"	d
_CAPI_DATA	src/openvpn/cryptoapi.c	/^typedef struct _CAPI_DATA {$/;"	s	file:
_CRYPTOAPI_H_	src/openvpn/cryptoapi.h	2;"	d
_P1003_1B_VISIBLE	src/openvpn/syshead.h	372;"	d
_SERVICE_H	src/openvpnserv/service.h	53;"	d
__APPLE_USE_RFC_3542	src/openvpn/syshead.h	50;"	d
__COMPAT_STDBOOL_H	src/compat/compat-stdbool.h	2;"	d
__OPENVPN_X509_CERT_T_DECLARED	include/openvpn-plugin.h	34;"	d
__OPENVPN_X509_CERT_T_DECLARED	include/openvpn-plugin.h	40;"	d
__OPENVPN_X509_CERT_T_DECLARED	src/openvpn/ssl_verify_openssl.h	37;"	d
__OPENVPN_X509_CERT_T_DECLARED	src/openvpn/ssl_verify_polarssl.h	39;"	d
__current_cert_depth_disabled	include/openvpn-plugin.h	/^  int __current_cert_depth_disabled; \/* Unused, for compatibility purposes only *\/$/;"	m	struct:openvpn_plugin_args_func_in
__current_cert_disabled	include/openvpn-plugin.h	/^  void *__current_cert_disabled; \/* Unused, for compatibility purposes only *\/$/;"	m	struct:openvpn_plugin_args_func_in
__memrchr	src/compat/compat-dirname.c	/^__memrchr(const char *str, int c, size_t n)$/;"	f	file:
__mygettimeofday	src/openvpn/pkcs11.c	/^__mygettimeofday (struct timeval *tv) {$/;"	f	file:
__mysleep	src/openvpn/pkcs11.c	/^__mysleep (const unsigned long usec) {$/;"	f	file:
__mytime	src/openvpn/pkcs11.c	/^__mytime (void) {$/;"	f	file:
_buffer_entry	src/openvpn/ssl_polarssl.h	/^struct _buffer_entry {$/;"	s
_ovpn_chk_fmt	include/openvpn-plugin.h	232;"	d
_ovpn_chk_fmt	include/openvpn-plugin.h	234;"	d
_ovpn_chk_fmt	include/openvpn-plugin.h	237;"	d
_ovpn_chk_fmt	include/openvpn-plugin.h	249;"	d
_pkcs11_msg_openvpn2pkcs11	src/openvpn/pkcs11.c	/^_pkcs11_msg_openvpn2pkcs11 ($/;"	f	file:
_pkcs11_msg_pkcs112openvpn	src/openvpn/pkcs11.c	/^_pkcs11_msg_pkcs112openvpn ($/;"	f	file:
_pkcs11_openvpn_log	src/openvpn/pkcs11.c	/^_pkcs11_openvpn_log ($/;"	f	file:
_pkcs11_openvpn_pin_prompt	src/openvpn/pkcs11.c	/^_pkcs11_openvpn_pin_prompt ($/;"	f	file:
_pkcs11_openvpn_show_pkcs11_ids_pin_prompt	src/openvpn/pkcs11.c	/^_pkcs11_openvpn_show_pkcs11_ids_pin_prompt ($/;"	f	file:
_pkcs11_openvpn_token_prompt	src/openvpn/pkcs11.c	/^_pkcs11_openvpn_token_prompt ($/;"	f	file:
abort	src/openvpn/plugin.h	/^  openvpn_plugin_abort_v1 abort;$/;"	m	struct:plugin
absolute_pathname	src/openvpn/misc.c	/^absolute_pathname (const char *pathname)$/;"	f
ac	src/openvpn/lzo.h	/^  struct lzo_adaptive_compress ac;$/;"	m	struct:lzo_compress_workspace	typeref:struct:lzo_compress_workspace::lzo_adaptive_compress
ac_fn_c_check_decl	configure	/^ac_fn_c_check_decl ()$/;"	f
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_type	configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_compute_int	configure	/^ac_fn_c_compute_int ()$/;"	f
ac_fn_c_find_intX_t	configure	/^ac_fn_c_find_intX_t ()$/;"	f
ac_fn_c_find_uintX_t	configure	/^ac_fn_c_find_uintX_t ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
accept_from	src/openvpn/openvpn.h	/^  const struct link_socket *accept_from; \/* possibly do accept() on a parent link_socket *\/$/;"	m	struct:context_2	typeref:struct:context_2::link_socket
acf_last_mod	src/openvpn/ssl_common.h	/^  time_t acf_last_mod;$/;"	m	struct:key_state
ack_seq	src/openvpn/proto.h	/^  uint32_t      ack_seq;   \/* acknowledgement number *\/$/;"	m	struct:openvpn_tcphdr
ack_write_buf	src/openvpn/ssl_common.h	/^  struct buffer ack_write_buf;$/;"	m	struct:key_state	typeref:struct:key_state::buffer
active	src/openvpn/reliable.h	/^  bool active;$/;"	m	struct:reliable_entry
actual	src/openvpn/socket.h	/^  struct link_socket_actual actual; \/* reply to this address *\/$/;"	m	struct:link_socket_addr	typeref:struct:link_socket_addr::link_socket_actual
actual_name	src/openvpn/tun.h	/^  char *actual_name; \/* actual name of TUN\/TAP dev, usually including unit number *\/$/;"	m	struct:tuntap
adapter_index	src/openvpn/route.h	/^  DWORD adapter_index;  \/* interface or ~0 if undefined *\/$/;"	m	struct:route_gateway_info
adapter_index	src/openvpn/tun.h	/^  DWORD adapter_index;$/;"	m	struct:tuntap
adapter_index_of_ip	src/openvpn/tun.c	/^adapter_index_of_ip (const IP_ADAPTER_INFO *list,$/;"	f
adapter_netmask	src/openvpn/tun.h	/^  in_addr_t adapter_netmask;$/;"	m	struct:tuntap
add_block_local	src/openvpn/route.c	/^add_block_local (struct route_list *rl)$/;"	f	file:
add_block_local_item	src/openvpn/route.c	/^add_block_local_item (struct route_list *rl,$/;"	f	file:
add_bypass_address	src/openvpn/route.c	/^add_bypass_address (struct route_bypass *rb, const in_addr_t a)$/;"	f	file:
add_bypass_routes	src/openvpn/route.c	/^add_bypass_routes (struct route_bypass *rb,$/;"	f	file:
add_client	src/openvpn/pf.c	/^add_client (const char *line, const char *prefix, const int line_num, struct pf_cn_elem ***next, const bool exclude)$/;"	f	file:
add_client_nat_to_option_list	src/openvpn/clinat.c	/^add_client_nat_to_option_list (struct client_nat_option_list *dest,$/;"	f
add_entry	src/openvpn/clinat.c	/^add_entry(struct client_nat_option_list *dest,$/;"	f	file:
add_env_item	src/openvpn/misc.c	/^add_env_item (char *str, const bool do_alloc, struct env_item **list, struct gc_arena *gc)$/;"	f	file:
add_host_route_array	src/openvpn/route.c	/^add_host_route_array (struct route_bypass *rb, const IP_ADDR_STRING *iplist)$/;"	f	file:
add_host_route_if_nonlocal	src/openvpn/route.c	/^add_host_route_if_nonlocal (struct route_bypass *rb, const in_addr_t addr)$/;"	f	file:
add_in6_addr	src/openvpn/socket.c	/^struct in6_addr add_in6_addr( struct in6_addr base, uint32_t add )$/;"	f
add_option	src/openvpn/options.c	/^add_option (struct options *options,$/;"	f	file:
add_route	src/openvpn/route.c	/^add_route (struct route_ipv4 *r,$/;"	f
add_route3	src/openvpn/route.c	/^add_route3 (in_addr_t network,$/;"	f	file:
add_route_connected_v6_net	src/openvpn/tun.c	/^void add_route_connected_v6_net(struct tuntap * tt,$/;"	f
add_route_ipapi	src/openvpn/route.c	/^add_route_ipapi (const struct route_ipv4 *r, const struct tuntap *tt, DWORD adapter_index)$/;"	f
add_route_ipv6	src/openvpn/route.c	/^add_route_ipv6 (struct route_ipv6 *r6, const struct tuntap *tt, unsigned int flags, const struct env_set *es)$/;"	f
add_route_ipv6_to_option_list	src/openvpn/route.c	/^add_route_ipv6_to_option_list (struct route_ipv6_option_list *l,$/;"	f
add_route_to_option_list	src/openvpn/route.c	/^add_route_to_option_list (struct route_option_list *l,$/;"	f
add_routes	src/openvpn/route.c	/^add_routes (struct route_list *rl, struct route_ipv6_list *rl6, const struct tuntap *tt, unsigned int flags, const struct env_set *es)$/;"	f
add_security_buffer	src/openvpn/ntlm.c	/^add_security_buffer(int sb_offset, void *data, int length, unsigned char *msg_buf, int *msg_bufpos)$/;"	f	file:
add_subnet	src/openvpn/pf.c	/^add_subnet (const char *line, const char *prefix, const int line_num, struct pf_subnet ***next, const bool exclude)$/;"	f	file:
addr	src/openvpn/mroute.h	/^  uint8_t addr[MR_MAX_ADDR_LEN];  \/* actual address *\/$/;"	m	struct:mroute_addr
addr	src/openvpn/multi.h	/^  struct mroute_addr addr;$/;"	m	struct:multi_route	typeref:struct:multi_route::mroute_addr
addr	src/openvpn/route.h	/^  in_addr_t addr;$/;"	m	struct:route_gateway_address
addr	src/openvpn/socket.h	/^  } addr;$/;"	m	struct:openvpn_sockaddr	typeref:union:openvpn_sockaddr::__anon12
addr	src/openvpn/win32.h	/^    struct sockaddr_in addr;$/;"	m	union:overlapped_io::__anon5	typeref:struct:overlapped_io::__anon5::sockaddr_in
addr6	src/openvpn/win32.h	/^    struct sockaddr_in6 addr6;$/;"	m	union:overlapped_io::__anon5	typeref:struct:overlapped_io::__anon5::sockaddr_in6
addr_copy_host	src/openvpn/socket.h	/^addr_copy_host(struct openvpn_sockaddr *dst, const struct openvpn_sockaddr *src)$/;"	f
addr_copy_sa	src/openvpn/socket.h	/^addr_copy_sa(struct openvpn_sockaddr *dst, const struct openvpn_sockaddr *src)$/;"	f
addr_defined	src/openvpn/socket.h	/^addr_defined (const struct openvpn_sockaddr *addr)$/;"	f
addr_defined	src/openvpn/win32.h	/^  bool addr_defined;$/;"	m	struct:overlapped_io
addr_defined_ipi	src/openvpn/socket.h	/^addr_defined_ipi (const struct link_socket_actual *lsa)$/;"	f
addr_family_name	src/openvpn/socket.c	/^addr_family_name (int af) $/;"	f
addr_guess_family	src/openvpn/socket.c	/^addr_guess_family(int proto, const char *name) $/;"	f
addr_host	src/openvpn/socket.h	/^addr_host (const struct openvpn_sockaddr *addr)$/;"	f
addr_inet4or6	src/openvpn/socket.h	/^addr_inet4or6(struct sockaddr *addr)$/;"	f
addr_match	src/openvpn/socket.h	/^addr_match (const struct openvpn_sockaddr *a1, const struct openvpn_sockaddr *a2)$/;"	f
addr_match_proto	src/openvpn/socket.h	/^addr_match_proto (const struct openvpn_sockaddr *a1,$/;"	f
addr_port_match	src/openvpn/socket.h	/^addr_port_match (const struct openvpn_sockaddr *a1, const struct openvpn_sockaddr *a2)$/;"	f
addr_zero_host	src/openvpn/socket.h	/^addr_zero_host(struct openvpn_sockaddr *addr)$/;"	f
addrlen	src/openvpn/win32.h	/^  int addrlen;$/;"	m	struct:overlapped_io
addrs	src/openvpn/route.h	/^  struct route_gateway_address addrs[RGI_N_ADDRESSES]; \/* local addresses attached to iface *\/$/;"	m	struct:route_gateway_info	typeref:struct:route_gateway_info::route_gateway_address
adjust_power_of_2	src/openvpn/misc.c	/^adjust_power_of_2 (size_t u)$/;"	f
af_addr_size	src/openvpn/socket.h	/^af_addr_size(unsigned short af)$/;"	f
ageable_ttl_secs	src/openvpn/mroute.h	/^  int ageable_ttl_secs;          \/* host route cache entry time-to-live*\/$/;"	m	struct:mroute_helper
aix_post_process_depfile	depcomp	/^aix_post_process_depfile ()$/;"	f
align_adjust	src/openvpn/mtu.h	/^  int align_adjust;$/;"	m	struct:frame
align_flags	src/openvpn/mtu.h	/^  unsigned int align_flags;$/;"	m	struct:frame
alloc_buf	src/openvpn/buffer.h	141;"	d
alloc_buf_debug	src/openvpn/buffer.c	/^alloc_buf_debug (size_t size, const char *file, int line)$/;"	f
alloc_buf_gc	src/openvpn/buffer.h	142;"	d
alloc_buf_gc_debug	src/openvpn/buffer.c	/^alloc_buf_gc_debug (size_t size, struct gc_arena *gc, const char *file, int line)$/;"	f
alloc_buf_sock_tun	src/openvpn/mtu.c	/^alloc_buf_sock_tun (struct buffer *buf,$/;"	f
alloc_connection_entry	src/openvpn/options.c	/^alloc_connection_entry (struct options *options, const int msglevel)$/;"	f	file:
alloc_connection_list_if_undef	src/openvpn/options.c	/^alloc_connection_list_if_undef (struct options *options)$/;"	f	file:
alloc_remote_entry	src/openvpn/options.c	/^alloc_remote_entry (struct options *options, const int msglevel)$/;"	f	file:
alloc_remote_list_if_undef	src/openvpn/options.c	/^alloc_remote_list_if_undef (struct options *options)$/;"	f	file:
allow_pull_fqdn	src/openvpn/options.h	/^  bool allow_pull_fqdn; \/* as a client, allow server to push a FQDN for certain parameters *\/$/;"	m	struct:options
allowed_ciphers	src/openvpn/ssl_polarssl.h	/^    int * allowed_ciphers;	\/**< List of allowed ciphers for this connection *\/$/;"	m	struct:tls_root_ctx
apply_push_options	src/openvpn/options.c	/^apply_push_options (struct options *options,$/;"	f
arg	src/openvpn/event.h	/^  void *arg;$/;"	m	struct:event_set_return
arg	src/openvpn/manage.h	/^  void *arg;$/;"	m	struct:management_callback
arg	src/openvpn/status.h	/^  void *arg;$/;"	m	struct:virtual_output
argc	src/openvpn/misc.h	/^  size_t argc;$/;"	m	struct:argv
args	src/openvpn/event.c	/^  void **args;  \/* allocated to capacity size *\/$/;"	m	struct:se_set	file:
args	src/openvpn/event.c	/^  void **args;$/;"	m	struct:po_set	file:
argv	include/openvpn-plugin.h	/^  const char ** const argv;$/;"	m	struct:openvpn_plugin_args_func_in
argv	include/openvpn-plugin.h	/^  const char ** const argv;$/;"	m	struct:openvpn_plugin_args_open_in
argv	src/openvpn/misc.h	/^  char **argv;$/;"	m	struct:argv
argv	src/openvpn/misc.h	/^struct argv {$/;"	s
argv	src/openvpn/plugin.h	/^  const char **argv;$/;"	m	struct:plugin_option
argv_append	src/openvpn/misc.c	/^argv_append (struct argv *a, char *str) \/* str must have been malloced or be NULL *\/$/;"	f	file:
argv_clone	src/openvpn/misc.c	/^argv_clone (const struct argv *a, const size_t headroom)$/;"	f
argv_extend	src/openvpn/misc.c	/^argv_extend (struct argv *a, const size_t newcap)$/;"	f	file:
argv_extract_cmd_name	src/openvpn/misc.c	/^argv_extract_cmd_name (const char *path)$/;"	f	file:
argv_grow	src/openvpn/misc.c	/^argv_grow (struct argv *a, const size_t add)$/;"	f	file:
argv_init	src/openvpn/misc.c	/^argv_init (struct argv *a)$/;"	f
argv_insert_head	src/openvpn/misc.c	/^argv_insert_head (const struct argv *a, const char *head)$/;"	f
argv_msg	src/openvpn/misc.c	/^argv_msg (const int msglev, const struct argv *a)$/;"	f
argv_msg_prefix	src/openvpn/misc.c	/^argv_msg_prefix (const int msglev, const struct argv *a, const char *prefix)$/;"	f
argv_new	src/openvpn/misc.c	/^argv_new (void)$/;"	f
argv_printf	src/openvpn/misc.c	/^argv_printf (struct argv *a, const char *format, ...)$/;"	f
argv_printf_arglist	src/openvpn/misc.c	/^argv_printf_arglist (struct argv *a, const char *format, const unsigned int flags, va_list arglist)$/;"	f
argv_printf_cat	src/openvpn/misc.c	/^argv_printf_cat (struct argv *a, const char *format, ...)$/;"	f
argv_reset	src/openvpn/misc.c	/^argv_reset (struct argv *a)$/;"	f
argv_str	src/openvpn/misc.c	/^argv_str (const struct argv *a, struct gc_arena *gc, const unsigned int flags)$/;"	f
argv_system_str	src/openvpn/misc.c	/^argv_system_str (const struct argv *a)$/;"	f
argv_system_str_append	src/openvpn/misc.c	/^argv_system_str_append (struct argv *a, const char *str, const bool enquote)$/;"	f	file:
argv_term	src/openvpn/misc.c	/^argv_term (const char **f)$/;"	f
argv_test	src/openvpn/misc.c	/^argv_test (void)$/;"	f
arp_command	src/openvpn/proto.h	/^  uint16_t arp_command;         \/* 0x0001 for ARP request, 0x0002 for ARP reply *\/$/;"	m	struct:openvpn_arp
array	src/openvpn/manage.h	/^  struct log_entry *array;$/;"	m	struct:log_history	typeref:struct:log_history::log_entry
array	src/openvpn/mbuf.h	/^  struct mbuf_item *array;$/;"	m	struct:mbuf_set	typeref:struct:mbuf_set::mbuf_item
array	src/openvpn/options.h	/^  struct connection_entry *array[CONNECTION_LIST_SIZE];$/;"	m	struct:connection_list	typeref:struct:connection_list::connection_entry
array	src/openvpn/options.h	/^  struct remote_entry *array[CONNECTION_LIST_SIZE];$/;"	m	struct:remote_list	typeref:struct:remote_list::remote_entry
array	src/openvpn/reliable.h	/^  struct reliable_entry array[RELIABLE_CAPACITY];$/;"	m	struct:reliable	typeref:struct:reliable::reliable_entry
array_mult_safe	src/openvpn/buffer.c	/^array_mult_safe (const size_t m1, const size_t m2, const size_t extra)$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
ascii2ipset	src/openvpn/tun.c	/^ascii2ipset (const char* name)$/;"	f
ascii2keydirection	src/openvpn/crypto.c	/^ascii2keydirection (int msglevel, const char *str)$/;"	f
ascii2proto	src/openvpn/socket.c	/^ascii2proto (const char* proto_name)$/;"	f
ask_gremlin	src/openvpn/gremlin.c	/^ask_gremlin (int flags)$/;"	f
assert_failed	src/openvpn/error.c	/^assert_failed (const char *filename, int line)$/;"	f
at_least_one_tap_win	src/openvpn/tun.c	/^at_least_one_tap_win (const struct tap_reg *tap_reg)$/;"	f	file:
atoi_null0	sample/sample-plugins/defer/simple.c	/^atoi_null0 (const char *str)$/;"	f	file:
atou	src/openvpn/options.c	/^atou (const char *str)$/;"	f	file:
auth_challenge	src/openvpn/ssl.c	/^static char *auth_challenge; \/* GLOBAL *\/$/;"	v	file:
auth_challenge_info	src/openvpn/misc.h	/^struct auth_challenge_info {$/;"	s
auth_challenge_info	src/openvpn/misc.h	/^struct auth_challenge_info {};$/;"	s
auth_control_file	src/openvpn/ssl_common.h	/^  char *auth_control_file;$/;"	m	struct:key_state
auth_control_status	src/openvpn/ssl_common.h	/^  unsigned int auth_control_status;$/;"	m	struct:key_state
auth_deferred	src/openvpn/ssl_common.h	/^  bool auth_deferred;$/;"	m	struct:key_state
auth_deferred_expire	src/openvpn/ssl_common.h	/^  time_t auth_deferred_expire;$/;"	m	struct:key_state
auth_deferred_expire_window	src/openvpn/ssl.c	/^auth_deferred_expire_window (const struct tls_options *o)$/;"	f	file:
auth_file	src/openvpn/proxy.h	/^  const char *auth_file;$/;"	m	struct:http_proxy_options
auth_method	src/openvpn/proxy.h	/^  int auth_method;$/;"	m	struct:http_proxy_info
auth_method_string	src/openvpn/proxy.h	/^  const char *auth_method_string;$/;"	m	struct:http_proxy_options
auth_pam_context	src/plugins/auth-pam/auth-pam.c	/^struct auth_pam_context$/;"	s	file:
auth_retry	src/openvpn/proxy.h	/^  int auth_retry;$/;"	m	struct:http_proxy_options
auth_retry	src/openvpn/proxy.h	/^  int auth_retry;$/;"	m	struct:http_proxy_options_simple
auth_retry_get	src/openvpn/options.c	/^auth_retry_get (void)$/;"	f
auth_retry_print	src/openvpn/options.c	/^auth_retry_print (void)$/;"	f
auth_retry_set	src/openvpn/options.c	/^auth_retry_set (const int msglevel, const char *option)$/;"	f
auth_user_pass	src/openvpn/openvpn.h	/^  struct user_pass *auth_user_pass;$/;"	m	struct:context_1	typeref:struct:context_1::user_pass
auth_user_pass	src/openvpn/ssl.c	/^static struct user_pass auth_user_pass; \/* GLOBAL *\/$/;"	v	typeref:struct:user_pass	file:
auth_user_pass_enabled	src/openvpn/ssl.c	/^static bool auth_user_pass_enabled;     \/* GLOBAL *\/$/;"	v	file:
auth_user_pass_file	src/openvpn/options.h	/^  const char *auth_user_pass_file;$/;"	m	struct:options
auth_user_pass_setup	src/openvpn/ssl.c	/^auth_user_pass_setup (const char *auth_file, const struct static_challenge_info *sci)$/;"	f
auth_user_pass_verify	sample/sample-plugins/defer/simple.c	/^auth_user_pass_verify (struct plugin_context *context, struct plugin_per_client_context *pcc, const char *argv[], const char *envp[])$/;"	f	file:
auth_user_pass_verify_script	src/openvpn/options.h	/^  const char *auth_user_pass_verify_script;$/;"	m	struct:options
auth_user_pass_verify_script	src/openvpn/ssl_common.h	/^  const char *auth_user_pass_verify_script;$/;"	m	struct:tls_options
auth_user_pass_verify_script_via_file	src/openvpn/options.h	/^  bool auth_user_pass_verify_script_via_file;$/;"	m	struct:options
auth_user_pass_verify_script_via_file	src/openvpn/ssl_common.h	/^  bool auth_user_pass_verify_script_via_file;$/;"	m	struct:tls_options
authenticated	src/openvpn/ssl_common.h	/^  bool authenticated;$/;"	m	struct:key_state
authfile	src/openvpn/socks.h	/^  char authfile[256];$/;"	m	struct:socks_proxy_info
authname	src/openvpn/options.h	/^  const char *authname;$/;"	m	struct:options
authname_defined	src/openvpn/options.h	/^  bool authname_defined;$/;"	m	struct:options
aux_buf	src/openvpn/openvpn.h	/^  struct buffer aux_buf;$/;"	m	struct:context_buffers	typeref:struct:context_buffers::buffer
bDebug	src/openvpnserv/service.c	/^BOOL                    bDebug = FALSE;$/;"	v
backend_x509_get_serial	src/openvpn/ssl_verify_openssl.c	/^backend_x509_get_serial (openvpn_x509_cert_t *cert, struct gc_arena *gc)$/;"	f
backend_x509_get_serial	src/openvpn/ssl_verify_polarssl.c	/^backend_x509_get_serial (openvpn_x509_cert_t *cert, struct gc_arena *gc)$/;"	f
backend_x509_get_serial_hex	src/openvpn/ssl_verify_openssl.c	/^backend_x509_get_serial_hex (openvpn_x509_cert_t *cert, struct gc_arena *gc)$/;"	f
backend_x509_get_serial_hex	src/openvpn/ssl_verify_polarssl.c	/^backend_x509_get_serial_hex (openvpn_x509_cert_t *cert, struct gc_arena *gc)$/;"	f
background_pid	src/openvpn/ps.h	/^  pid_t background_pid;$/;"	m	struct:port_share
background_pid	src/plugins/auth-pam/auth-pam.c	/^  pid_t background_pid;$/;"	m	struct:auth_pam_context	file:
background_pid	src/plugins/down-root/down-root.c	/^  pid_t background_pid;$/;"	m	struct:down_root_context	file:
bad_address_length	src/openvpn/socket.c	/^bad_address_length (int actual, int expected)$/;"	f
base	src/openvpn/manage.h	/^  int base;$/;"	m	struct:log_history
base	src/openvpn/pool.h	/^  in_addr_t base;$/;"	m	struct:ifconfig_pool
base64_chars	src/openvpn/base64.c	/^static char base64_chars[] = $/;"	v	file:
base_ipv6	src/openvpn/pool.h	/^  struct in6_addr base_ipv6;$/;"	m	struct:ifconfig_pool	typeref:struct:ifconfig_pool::in6_addr
basename	src/compat/compat-basename.c	/^basename (char *filename)$/;"	f
bind_defined	src/openvpn/options.h	/^  bool bind_defined;$/;"	m	struct:connection_entry
bind_local	src/openvpn/options.h	/^  bool bind_local;$/;"	m	struct:connection_entry
bind_local	src/openvpn/socket.h	/^  bool bind_local;$/;"	m	struct:link_socket
bio_debug_data	src/openvpn/ssl_openssl.c	/^bio_debug_data (const char *mode, BIO *bio, const uint8_t *buf, int len, const char *desc)$/;"	f	file:
bio_debug_oc	src/openvpn/ssl_openssl.c	/^bio_debug_oc (const char *mode, BIO *bio)$/;"	f	file:
bio_read	src/openvpn/ssl_openssl.c	/^bio_read (BIO *bio, struct buffer *buf, int maxlen, const char *desc)$/;"	f	file:
bio_write	src/openvpn/ssl_openssl.c	/^bio_write (BIO *bio, const uint8_t *data, int size, const char *desc)$/;"	f	file:
bio_write_post	src/openvpn/ssl_openssl.c	/^bio_write_post (const int status, struct buffer *buf)$/;"	f	file:
biofp	src/openvpn/ssl_openssl.c	/^static FILE *biofp;                            \/* GLOBAL *\/$/;"	v	file:
biofp_last_open	src/openvpn/ssl_openssl.c	/^static time_t biofp_last_open;                 \/* GLOBAL *\/$/;"	v	file:
biofp_reopen_interval	src/openvpn/ssl_openssl.c	/^static const int biofp_reopen_interval = 600;  \/* GLOBAL *\/$/;"	v	file:
biofp_toggle	src/openvpn/ssl_openssl.c	/^static bool biofp_toggle;                      \/* GLOBAL *\/$/;"	v	file:
blank_up	src/openvpn/manage.c	/^static const char blank_up[] = "[[BLANK]]";$/;"	v	file:
bool	sample/sample-plugins/defer/simple.c	62;"	d	file:
bool	src/compat/compat-stdbool.h	/^typedef int bool;$/;"	t
bool	src/openvpnserv/openvpnserv.c	49;"	d	file:
broadcast	src/openvpn/tun.h	/^  in_addr_t broadcast;$/;"	m	struct:tuntap
bt_last	src/compat/compat-gettimeofday.c	/^static int bt_last = 0;$/;"	v	file:
bucket	src/openvpn/list.h	/^  struct hash_bucket *bucket;$/;"	m	struct:hash_iterator	typeref:struct:hash_iterator::hash_bucket
bucket_base	src/openvpn/multi.h	/^  int bucket_base;$/;"	m	struct:multi_reap
bucket_index	src/openvpn/list.h	/^  int bucket_index;$/;"	m	struct:hash_iterator
bucket_index_end	src/openvpn/list.h	/^  int bucket_index_end;$/;"	m	struct:hash_iterator
bucket_index_start	src/openvpn/list.h	/^  int bucket_index_start;$/;"	m	struct:hash_iterator
bucket_marked	src/openvpn/list.h	/^  bool bucket_marked;$/;"	m	struct:hash_iterator
buckets	src/openvpn/list.h	/^  struct hash_bucket *buckets;$/;"	m	struct:hash	typeref:struct:hash::hash_bucket
buckets_per_pass	src/openvpn/multi.h	/^  int buckets_per_pass;$/;"	m	struct:multi_reap
buf	src/openvpn/buffer.h	/^  struct buffer buf;$/;"	m	struct:buffer_entry	typeref:struct:buffer_entry::buffer
buf	src/openvpn/fragment.h	/^  struct buffer buf;            \/**< Buffer in which received datagrams$/;"	m	struct:fragment	typeref:struct:fragment::buffer
buf	src/openvpn/manage.h	/^  struct buffer buf;$/;"	m	struct:command_line	typeref:struct:command_line::buffer
buf	src/openvpn/mbuf.h	/^  struct buffer buf;$/;"	m	struct:mbuf_buffer	typeref:struct:mbuf_buffer::buffer
buf	src/openvpn/openvpn.h	/^  struct buffer buf;$/;"	m	struct:context_2	typeref:struct:context_2::buffer
buf	src/openvpn/ps.c	/^  struct buffer buf;$/;"	m	struct:proxy_connection	typeref:struct:proxy_connection::buffer	file:
buf	src/openvpn/reliable.h	/^  struct buffer buf;$/;"	m	struct:reliable_entry	typeref:struct:reliable_entry::buffer
buf	src/openvpn/socket.h	/^  struct buffer buf;$/;"	m	struct:stream_buf	typeref:struct:stream_buf::buffer
buf	src/openvpn/win32.h	/^  struct buffer buf;$/;"	m	struct:overlapped_io	typeref:struct:overlapped_io::buffer
buf_advance	src/openvpn/buffer.h	/^buf_advance (struct buffer *buf, int size)$/;"	f
buf_assign	src/openvpn/buffer.c	/^buf_assign (struct buffer *dest, const struct buffer *src)$/;"	f
buf_bend	src/openvpn/buffer.h	/^buf_bend (const struct buffer *buf)$/;"	f
buf_blast	src/openvpn/buffer.h	/^buf_blast (const struct buffer *buf)$/;"	f
buf_bptr	src/openvpn/buffer.h	/^buf_bptr (const struct buffer *buf)$/;"	f
buf_catrunc	src/openvpn/buffer.c	/^buf_catrunc (struct buffer *buf, const char *str)$/;"	f
buf_chomp	src/openvpn/buffer.c	/^buf_chomp (struct buffer *buf)$/;"	f
buf_clear	src/openvpn/buffer.c	/^buf_clear (struct buffer *buf)$/;"	f
buf_copy	src/openvpn/buffer.h	/^buf_copy (struct buffer *dest, const struct buffer *src)$/;"	f
buf_copy_excess	src/openvpn/buffer.h	/^buf_copy_excess (struct buffer *dest,$/;"	f
buf_copy_n	src/openvpn/buffer.h	/^buf_copy_n (struct buffer *dest, struct buffer *src, int n)$/;"	f
buf_copy_range	src/openvpn/buffer.h	/^buf_copy_range (struct buffer *dest,$/;"	f
buf_debug_file	src/openvpn/buffer.c	/^buf_debug_file (const struct buffer *buf)$/;"	f	file:
buf_debug_file	src/openvpn/buffer.c	150;"	d	file:
buf_debug_line	src/openvpn/buffer.c	/^buf_debug_line (const struct buffer *buf)$/;"	f	file:
buf_debug_line	src/openvpn/buffer.c	149;"	d	file:
buf_defined	src/openvpn/buffer.h	/^buf_defined (const struct buffer *buf)$/;"	f
buf_forward_capacity	src/openvpn/buffer.h	/^buf_forward_capacity (const struct buffer *buf)$/;"	f
buf_forward_capacity_total	src/openvpn/buffer.h	/^buf_forward_capacity_total (const struct buffer *buf)$/;"	f
buf_free_entries	src/openvpn/ssl_polarssl.c	/^static void buf_free_entries(endless_buffer *buf)$/;"	f	file:
buf_free_entry	src/openvpn/ssl_polarssl.c	/^static inline void buf_free_entry(buffer_entry *entry)$/;"	f	file:
buf_inc_len	src/openvpn/buffer.h	/^buf_inc_len (struct buffer *buf, int inc)$/;"	f
buf_init	src/openvpn/buffer.h	167;"	d
buf_init	src/openvpn/buffer.h	170;"	d
buf_init	src/openvpn/socket.h	/^  struct buffer buf_init;$/;"	m	struct:stream_buf	typeref:struct:stream_buf::buffer
buf_init	src/openvpn/win32.h	/^  struct buffer buf_init;$/;"	m	struct:overlapped_io	typeref:struct:overlapped_io::buffer
buf_init_debug	src/openvpn/buffer.c	/^buf_init_debug (struct buffer *buf, int offset, const char *file, int line)$/;"	f
buf_init_dowork	src/openvpn/buffer.h	/^buf_init_dowork (struct buffer *buf, int offset)$/;"	f
buf_len	src/openvpn/buffer.h	/^buf_len (const struct buffer *buf)$/;"	f
buf_null_terminate	src/openvpn/buffer.c	/^buf_null_terminate (struct buffer *buf)$/;"	f
buf_parse	src/openvpn/buffer.c	/^buf_parse (struct buffer *buf, const int delim, char *line, const int size)$/;"	f
buf_prepend	src/openvpn/buffer.h	/^buf_prepend (struct buffer *buf, int size)$/;"	f
buf_printf	src/openvpn/buffer.c	/^buf_printf (struct buffer *buf, const char *format, ...)$/;"	f
buf_puts	src/openvpn/buffer.c	/^buf_puts(struct buffer *buf, const char *str)$/;"	f
buf_read	src/openvpn/buffer.h	/^buf_read (struct buffer *src, void *dest, int size)$/;"	f
buf_read_alloc	src/openvpn/buffer.h	/^buf_read_alloc (struct buffer *buf, int size)$/;"	f
buf_read_u16	src/openvpn/buffer.h	/^buf_read_u16 (struct buffer *buf)$/;"	f
buf_read_u32	src/openvpn/buffer.h	/^buf_read_u32 (struct buffer *buf, bool *good)$/;"	f
buf_read_u8	src/openvpn/buffer.h	/^buf_read_u8 (struct buffer *buf)$/;"	f
buf_reset	src/openvpn/buffer.h	/^buf_reset (struct buffer *buf)$/;"	f
buf_reset_len	src/openvpn/buffer.h	/^buf_reset_len (struct buffer *buf)$/;"	f
buf_reverse_capacity	src/openvpn/buffer.h	/^buf_reverse_capacity (const struct buffer *buf)$/;"	f
buf_rmtail	src/openvpn/buffer.c	/^buf_rmtail (struct buffer *buf, uint8_t remove)$/;"	f
buf_safe	src/openvpn/buffer.h	/^buf_safe (const struct buffer *buf, int len)$/;"	f
buf_safe_bidir	src/openvpn/buffer.h	/^buf_safe_bidir (const struct buffer *buf, int len)$/;"	f
buf_set_read	src/openvpn/buffer.h	/^buf_set_read (struct buffer *buf, const uint8_t *data, int size)$/;"	f
buf_set_write	src/openvpn/buffer.h	/^buf_set_write (struct buffer *buf, uint8_t *data, int size)$/;"	f
buf_size_error	src/openvpn/buffer.c	/^buf_size_error (const size_t size)$/;"	f
buf_size_valid	src/openvpn/buffer.h	/^buf_size_valid (const size_t size)$/;"	f
buf_size_valid_signed	src/openvpn/buffer.h	/^buf_size_valid_signed (const int size)$/;"	f
buf_str	src/openvpn/buffer.h	/^buf_str (const struct buffer *buf)$/;"	f
buf_string_compare_advance	src/openvpn/buffer.c	/^buf_string_compare_advance (struct buffer *src, const char *match)$/;"	f
buf_string_match	src/openvpn/buffer.h	/^buf_string_match (const struct buffer *src, const void *match, int size)$/;"	f
buf_string_match_head	src/openvpn/buffer.h	/^buf_string_match_head (const struct buffer *src, const void *match, int size)$/;"	f
buf_string_match_head_str	src/openvpn/buffer.c	/^buf_string_match_head_str (const struct buffer *src, const char *match)$/;"	f
buf_sub	src/openvpn/buffer.c	/^buf_sub (struct buffer *buf, int size, bool prepend)$/;"	f
buf_substring_len	src/openvpn/buffer.c	/^buf_substring_len (const struct buffer *buf, int delim)$/;"	f
buf_valid	src/openvpn/buffer.h	/^buf_valid (const struct buffer *buf)$/;"	f
buf_write	src/openvpn/buffer.h	/^buf_write (struct buffer *dest, const void *src, int size)$/;"	f
buf_write_alloc	src/openvpn/buffer.h	/^buf_write_alloc (struct buffer *buf, int size)$/;"	f
buf_write_alloc_prepend	src/openvpn/buffer.h	/^buf_write_alloc_prepend (struct buffer *buf, int size, bool prepend)$/;"	f
buf_write_prepend	src/openvpn/buffer.h	/^buf_write_prepend (struct buffer *dest, const void *src, int size)$/;"	f
buf_write_string_file	src/openvpn/buffer.c	/^buf_write_string_file (const struct buffer *buf, const char *filename, int fd)$/;"	f
buf_write_u16	src/openvpn/buffer.h	/^buf_write_u16 (struct buffer *dest, int data)$/;"	f
buf_write_u32	src/openvpn/buffer.h	/^buf_write_u32 (struct buffer *dest, int data)$/;"	f
buf_write_u8	src/openvpn/buffer.h	/^buf_write_u8 (struct buffer *dest, int data)$/;"	f
buffer	src/openvpn/buffer.h	/^struct buffer$/;"	s
buffer	src/openvpn/mbuf.h	/^  struct mbuf_buffer *buffer;$/;"	m	struct:mbuf_item	typeref:struct:mbuf_item::mbuf_buffer
buffer_entry	src/openvpn/buffer.h	/^struct buffer_entry$/;"	s
buffer_entry	src/openvpn/ssl_polarssl.h	/^typedef struct _buffer_entry buffer_entry;$/;"	t	typeref:struct:_buffer_entry
buffer_initial	src/openvpn/ps.c	/^  bool buffer_initial;$/;"	m	struct:proxy_connection	file:
buffer_list	src/openvpn/buffer.h	/^struct buffer_list$/;"	s
buffer_list_advance	src/openvpn/buffer.c	/^buffer_list_advance (struct buffer_list *ol, int n)$/;"	f
buffer_list_aggregate	src/openvpn/buffer.c	/^buffer_list_aggregate (struct buffer_list *bl, const size_t max)$/;"	f
buffer_list_defined	src/openvpn/buffer.c	/^buffer_list_defined (const struct buffer_list *ol)$/;"	f
buffer_list_file	src/openvpn/buffer.c	/^buffer_list_file (const char *fn, int max_line_len)$/;"	f
buffer_list_free	src/openvpn/buffer.c	/^buffer_list_free (struct buffer_list *ol)$/;"	f
buffer_list_new	src/openvpn/buffer.c	/^buffer_list_new (const int max_size)$/;"	f
buffer_list_peek	src/openvpn/buffer.c	/^buffer_list_peek (struct buffer_list *ol)$/;"	f
buffer_list_pop	src/openvpn/buffer.c	/^buffer_list_pop (struct buffer_list *ol)$/;"	f
buffer_list_push	src/openvpn/buffer.c	/^buffer_list_push (struct buffer_list *ol, const unsigned char *str)$/;"	f
buffer_list_push_data	src/openvpn/buffer.c	/^buffer_list_push_data (struct buffer_list *ol, const uint8_t *data, size_t size)$/;"	f
buffer_list_reset	src/openvpn/buffer.c	/^buffer_list_reset (struct buffer_list *ol)$/;"	f
buffer_turnover	src/openvpn/forward.c	/^buffer_turnover (const uint8_t *orig_buf, struct buffer *dest_stub, struct buffer *src_stub, struct buffer *storage)$/;"	f	file:
buffers	src/openvpn/openvpn.h	/^  struct context_buffers *buffers;$/;"	m	struct:context_2	typeref:struct:context_2::context_buffers
buffers_owned	src/openvpn/openvpn.h	/^  bool buffers_owned; \/* if true, we should free all buffers on close *\/$/;"	m	struct:context_2
build_command_line	src/plugins/down-root/down-root.c	/^build_command_line (const char *argv[])$/;"	f	file:
build_dhcp_options_string	src/openvpn/tun.c	/^build_dhcp_options_string (struct buffer *buf, const struct tuntap_options *o)$/;"	f	file:
build_vars	build/msvc/msvc-generate/msvc-generate.js	/^function build_vars() {$/;"	f
burst	src/openvpn/ssl_common.h	/^  bool burst;$/;"	m	struct:tls_session
bypass	src/openvpn/route.h	/^  in_addr_t bypass[N_ROUTE_BYPASS];$/;"	m	struct:route_bypass
bypass	src/openvpn/route.h	/^  struct route_bypass bypass;$/;"	m	struct:route_special_addr	typeref:struct:route_special_addr::route_bypass
bypass_doubledash	src/openvpn/options.c	/^bypass_doubledash (char **p)$/;"	f	file:
bytecount_last_update	src/openvpn/manage.h	/^  time_t bytecount_last_update;$/;"	m	struct:man_connection
bytecount_last_update	src/openvpn/manage.h	/^  time_t bytecount_last_update;$/;"	m	struct:man_def_auth_context
bytecount_update_seconds	src/openvpn/manage.h	/^  int bytecount_update_seconds;$/;"	m	struct:man_connection
bytes_in	src/openvpn/manage.h	/^  counter_type bytes_in;$/;"	m	struct:man_persist
bytes_out	src/openvpn/manage.h	/^  counter_type bytes_out;$/;"	m	struct:man_persist
bytes_per_second	src/openvpn/shaper.h	/^  int bytes_per_second;$/;"	m	struct:shaper
c0	src/openvpn/openvpn.h	/^  struct context_0 *c0;         \/**< Level 0 %context. *\/$/;"	m	struct:context	typeref:struct:context::context_0
c1	src/openvpn/openvpn.h	/^  struct context_1 c1;          \/**< Level 1 %context. *\/$/;"	m	struct:context	typeref:struct:context::context_1
c2	src/openvpn/openvpn.h	/^  struct context_2 c2;          \/**< Level 2 %context. *\/$/;"	m	struct:context	typeref:struct:context::context_2
ca_chain	src/openvpn/ssl_polarssl.h	/^    x509_cert *ca_chain;	\/**< CA chain for remote verification *\/$/;"	m	struct:tls_root_ctx
ca_file	src/openvpn/options.h	/^  const char *ca_file;$/;"	m	struct:options
ca_file_inline	src/openvpn/options.h	/^  const char *ca_file_inline;$/;"	m	struct:options
ca_path	src/openvpn/options.h	/^  const char *ca_path;$/;"	m	struct:options
cache_generation	src/openvpn/mroute.h	/^  unsigned int cache_generation; \/* incremented when route added *\/$/;"	m	struct:mroute_helper
cache_generation	src/openvpn/multi.h	/^  unsigned int cache_generation;$/;"	m	struct:multi_route
callback	src/openvpn/manage.h	/^  struct management_callback callback;$/;"	m	struct:man_persist	typeref:struct:man_persist::management_callback
callbacks	include/openvpn-plugin.h	/^  struct openvpn_plugin_callbacks *callbacks;$/;"	m	struct:openvpn_plugin_args_open_in	typeref:struct:openvpn_plugin_args_open_in::openvpn_plugin_callbacks
callbacks	src/openvpn/plugin.c	/^static struct openvpn_plugin_callbacks callbacks = {$/;"	v	typeref:struct:openvpn_plugin_callbacks	file:
capacity	src/openvpn/buffer.h	/^  int capacity;                 \/**< Size in bytes of memory allocated by$/;"	m	struct:buffer
capacity	src/openvpn/event.c	/^  int capacity; \/* fixed largest fd + 1 *\/$/;"	m	struct:se_set	file:
capacity	src/openvpn/event.c	/^  int capacity;$/;"	m	struct:po_set	file:
capacity	src/openvpn/event.c	/^  int capacity;$/;"	m	struct:we_set	file:
capacity	src/openvpn/manage.h	/^  int capacity;$/;"	m	struct:log_history
capacity	src/openvpn/mbuf.h	/^  unsigned int capacity;$/;"	m	struct:mbuf_set
capacity	src/openvpn/misc.h	/^  size_t capacity;$/;"	m	struct:argv
capacity	src/openvpn/route.h	/^  int capacity;$/;"	m	struct:route_ipv6_list
capacity	src/openvpn/route.h	/^  int capacity;$/;"	m	struct:route_ipv6_option_list
capacity	src/openvpn/route.h	/^  int capacity;$/;"	m	struct:route_list
capacity	src/openvpn/route.h	/^  int capacity;$/;"	m	struct:route_option_list
cc_config	src/openvpn/multi.h	/^  struct buffer_list *cc_config;$/;"	m	struct:multi_instance	typeref:struct:multi_instance::buffer_list
ccd_exclusive	src/openvpn/options.h	/^  bool ccd_exclusive;$/;"	m	struct:options
cd_dir	src/openvpn/options.h	/^  const char *cd_dir;$/;"	m	struct:options
ce	src/openvpn/options.h	/^  struct connection_entry ce;$/;"	m	struct:options	typeref:struct:options::connection_entry
ce_management_query_proxy	src/openvpn/init.c	/^ce_management_query_proxy (struct context *c)$/;"	f	file:
ce_management_query_remote	src/openvpn/init.c	/^ce_management_query_remote (struct context *c, const char *remote_ip_hint)$/;"	f	file:
cert_context	src/openvpn/cryptoapi.c	/^    const CERT_CONTEXT *cert_context;$/;"	m	struct:_CAPI_DATA	file:
cert_file	src/openvpn/options.h	/^  const char *cert_file;$/;"	m	struct:options
cert_file_inline	src/openvpn/options.h	/^  const char *cert_file_inline;$/;"	m	struct:options
cert_hash	src/openvpn/ssl_verify.h	/^struct cert_hash {$/;"	s
cert_hash_compare	src/openvpn/ssl_verify.c	/^cert_hash_compare (const struct cert_hash_set *chs1, const struct cert_hash_set *chs2)$/;"	f	file:
cert_hash_copy	src/openvpn/ssl_verify.c	/^cert_hash_copy (const struct cert_hash_set *chs)$/;"	f	file:
cert_hash_free	src/openvpn/ssl_verify.c	/^cert_hash_free (struct cert_hash_set *chs)$/;"	f
cert_hash_remember	src/openvpn/ssl_verify.c	/^cert_hash_remember (struct tls_session *session, const int error_depth, const unsigned char *sha1_hash)$/;"	f
cert_hash_set	src/openvpn/ssl_common.h	/^  struct cert_hash_set *cert_hash_set;$/;"	m	struct:tls_session	typeref:struct:tls_session::cert_hash_set
cert_hash_set	src/openvpn/ssl_verify.h	/^struct cert_hash_set {$/;"	s
cf_max	src/openvpn/options.h	/^  int cf_max;$/;"	m	struct:options
cf_per	src/openvpn/options.h	/^  int cf_per;$/;"	m	struct:options
ch	src/openvpn/ssl_verify.h	/^  struct cert_hash *ch[MAX_CERT_DEPTH]; \/**< Array of certificate hashes *\/$/;"	m	struct:cert_hash_set	typeref:struct:cert_hash_set::cert_hash
chaddr	src/openvpn/dhcp.h	/^  uint8_t  chaddr[16]; \/* client hardware address *\/$/;"	m	struct:dhcp
challenge_text	src/openvpn/misc.h	/^  const char *challenge_text;$/;"	m	struct:auth_challenge_info
challenge_text	src/openvpn/misc.h	/^  const char *challenge_text;$/;"	m	struct:static_challenge_info
char_class	src/openvpn/buffer.c	/^char_class (const unsigned char c, const unsigned int flags)$/;"	f
char_inc_exc	src/openvpn/buffer.c	/^char_inc_exc (const char c, const unsigned int inclusive, const unsigned int exclusive)$/;"	f	file:
char_ppointer	src/plugins/auth-pam/pamdl.c	/^typedef char ** char_ppointer;$/;"	t	file:
character_class_debug	src/openvpn/buffer.c	/^character_class_debug (void)$/;"	f
check	src/openvpn/proto.h	/^  uint16_t      check;$/;"	m	struct:openvpn_tcphdr
check	src/openvpn/proto.h	/^  uint16_t   check;$/;"	m	struct:openvpn_iphdr
check	src/openvpn/proto.h	/^  uint16_t   check;$/;"	m	struct:openvpn_udphdr
check_add_routes	src/openvpn/forward-inline.h	/^check_add_routes (struct context *c)$/;"	f
check_add_routes_action	src/openvpn/forward.c	/^check_add_routes_action (struct context *c, const bool errors)$/;"	f	file:
check_add_routes_dowork	src/openvpn/forward.c	/^check_add_routes_dowork (struct context *c)$/;"	f
check_addr_clash	src/openvpn/tun.c	/^check_addr_clash (const char *name,$/;"	f	file:
check_cmd_access	src/openvpn/options.c	/^check_cmd_access(const char *command, const char *opt, const char *chroot)$/;"	f	file:
check_coarse_timers	src/openvpn/forward.c	/^check_coarse_timers (struct context *c)$/;"	f	file:
check_coarse_timers_dowork	src/openvpn/forward.c	/^check_coarse_timers_dowork (struct context *c)$/;"	f	file:
check_connection_established	src/openvpn/forward-inline.h	/^check_connection_established (struct context *c)$/;"	f
check_connection_established_dowork	src/openvpn/forward.c	/^check_connection_established_dowork (struct context *c)$/;"	f
check_debug_level	src/openvpn/error.h	/^check_debug_level (unsigned int level)$/;"	f
check_file_access	src/openvpn/options.c	/^check_file_access(const int type, const char *file, const int mode, const char *opt)$/;"	f	file:
check_file_access_chroot	src/openvpn/options.c	/^check_file_access_chroot(const char *chroot, const int type, const char *file, const int mode, const char *opt)$/;"	f	file:
check_fragment	src/openvpn/forward-inline.h	/^check_fragment (struct context *c)$/;"	f
check_fragment_dowork	src/openvpn/forward.c	/^check_fragment_dowork (struct context *c)$/;"	f
check_ifconfig	tests/t_client.sh	/^check_ifconfig()$/;"	f
check_inactivity_timeout	src/openvpn/forward-inline.h	/^check_inactivity_timeout (struct context *c)$/;"	f
check_inactivity_timeout_dowork	src/openvpn/forward.c	/^check_inactivity_timeout_dowork (struct context *c)$/;"	f
check_incoming_control_channel	src/openvpn/forward-inline.h	/^check_incoming_control_channel (struct context *c)$/;"	f
check_incoming_control_channel_dowork	src/openvpn/forward.c	/^check_incoming_control_channel_dowork (struct context *c)$/;"	f
check_inline_file	src/openvpn/options.c	/^check_inline_file (struct in_src *is, char *p[], struct gc_arena *gc)$/;"	f	file:
check_inline_file_via_buf	src/openvpn/options.c	/^check_inline_file_via_buf (struct buffer *multiline, char *p[], struct gc_arena *gc)$/;"	f	file:
check_inline_file_via_fp	src/openvpn/options.c	/^check_inline_file_via_fp (FILE *fp, char *p[], struct gc_arena *gc)$/;"	f	file:
check_key	src/openvpn/crypto.c	/^check_key (struct key *key, const struct key_type *kt)$/;"	f
check_malloc_return	src/openvpn/buffer.h	/^check_malloc_return (void *p)$/;"	f
check_packet_id_persist_flush	src/openvpn/forward-inline.h	/^check_packet_id_persist_flush (struct context *c)$/;"	f
check_ping_restart	src/openvpn/ping-inline.h	/^check_ping_restart (struct context *c)$/;"	f
check_ping_restart_dowork	src/openvpn/ping.c	/^check_ping_restart_dowork (struct context *c)$/;"	f
check_ping_send	src/openvpn/ping-inline.h	/^check_ping_send (struct context *c)$/;"	f
check_ping_send_dowork	src/openvpn/ping.c	/^check_ping_send_dowork (struct context *c)$/;"	f
check_push_request	src/openvpn/forward-inline.h	/^check_push_request (struct context *c)$/;"	f
check_push_request_dowork	src/openvpn/forward.c	/^check_push_request_dowork (struct context *c)$/;"	f
check_replay_iv_consistency	src/openvpn/crypto.c	/^check_replay_iv_consistency (const struct key_type *kt, bool packet_id, bool use_iv)$/;"	f
check_scheduled_exit	src/openvpn/forward-inline.h	/^check_scheduled_exit (struct context *c)$/;"	f
check_scheduled_exit_dowork	src/openvpn/forward.c	/^check_scheduled_exit_dowork (struct context *c)$/;"	f
check_send_occ_load_test	src/openvpn/occ-inline.h	/^check_send_occ_load_test (struct context *c)$/;"	f
check_send_occ_load_test_dowork	src/openvpn/occ.c	/^check_send_occ_load_test_dowork (struct context *c)$/;"	f
check_send_occ_msg	src/openvpn/occ-inline.h	/^check_send_occ_msg (struct context *c)$/;"	f
check_send_occ_msg_dowork	src/openvpn/occ.c	/^check_send_occ_msg_dowork (struct context *c)$/;"	f
check_send_occ_req	src/openvpn/occ-inline.h	/^check_send_occ_req (struct context *c)$/;"	f
check_send_occ_req_dowork	src/openvpn/occ.c	/^check_send_occ_req_dowork (struct context *c)$/;"	f
check_server_poll_timeout	src/openvpn/forward-inline.h	/^check_server_poll_timeout (struct context *c)$/;"	f
check_server_poll_timeout_dowork	src/openvpn/forward.c	/^check_server_poll_timeout_dowork (struct context *c)$/;"	f
check_stale_routes	src/openvpn/multi.c	/^check_stale_routes (struct multi_context *m)$/;"	f	file:
check_status	src/openvpn/error.h	/^check_status (int status, const char *description, struct link_socket *sock, struct tuntap *tt)$/;"	f
check_status_file	src/openvpn/forward-inline.h	/^check_status_file (struct context *c)$/;"	f
check_status_file_dowork	src/openvpn/forward.c	/^check_status_file_dowork (struct context *c)$/;"	f
check_subnet_conflict	src/openvpn/tun.c	/^check_subnet_conflict (const in_addr_t ip,$/;"	f
check_systemd_running	src/openvpn/console.c	/^check_systemd_running ()$/;"	f	file:
check_timeout_random_component	src/openvpn/forward.c	/^check_timeout_random_component (struct context *c)$/;"	f	file:
check_timeout_random_component_dowork	src/openvpn/forward.c	/^check_timeout_random_component_dowork (struct context *c)$/;"	f	file:
check_timestamp_delta	src/openvpn/packet_id.h	/^check_timestamp_delta (time_t remote, unsigned int max_delta)$/;"	f
check_tls	src/openvpn/forward-inline.h	/^check_tls (struct context *c)$/;"	f
check_tls_dowork	src/openvpn/forward.c	/^check_tls_dowork (struct context *c)$/;"	f
check_tls_errors	src/openvpn/forward-inline.h	/^check_tls_errors (struct context *c)$/;"	f
check_tls_errors_co	src/openvpn/forward.c	/^check_tls_errors_co (struct context *c)$/;"	f
check_tls_errors_nco	src/openvpn/forward.c	/^check_tls_errors_nco (struct context *c)$/;"	f
chomp	src/openvpn/buffer.c	/^chomp (char *str)$/;"	f
chroot_dir	src/openvpn/options.h	/^  const char *chroot_dir;$/;"	m	struct:options
ciaddr	src/openvpn/dhcp.h	/^  uint32_t ciaddr;     \/* client IP address, client sets if known *\/$/;"	m	struct:dhcp
cid	src/openvpn/manage.h	/^  unsigned long cid;$/;"	m	struct:man_def_auth_context
cid_compare_function	src/openvpn/multi.c	/^cid_compare_function (const void *key1, const void *key2)$/;"	f	file:
cid_counter	src/openvpn/multi.h	/^  unsigned long cid_counter;$/;"	m	struct:multi_context
cid_hash	src/openvpn/multi.h	/^  struct hash *cid_hash;$/;"	m	struct:multi_context	typeref:struct:multi_context::hash
cid_hash_function	src/openvpn/multi.c	/^cid_hash_function (const void *key, uint32_t iv)$/;"	f	file:
cipher	src/openvpn/crypto.h	/^  cipher_ctx_t *cipher;      	\/**< Generic cipher %context. *\/$/;"	m	struct:key_ctx
cipher	src/openvpn/crypto.h	/^  const cipher_kt_t *cipher;	\/**< Cipher static parameters *\/$/;"	m	struct:key_type
cipher	src/openvpn/crypto.h	/^  uint8_t cipher[MAX_CIPHER_KEY_LENGTH];$/;"	m	struct:key
cipher_ctx_block_size	src/openvpn/crypto_openssl.c	/^cipher_ctx_block_size(const EVP_CIPHER_CTX *ctx)$/;"	f
cipher_ctx_block_size	src/openvpn/crypto_polarssl.c	/^int cipher_ctx_block_size(const cipher_context_t *ctx)$/;"	f
cipher_ctx_cleanup	src/openvpn/crypto_openssl.c	/^cipher_ctx_cleanup (EVP_CIPHER_CTX *ctx)$/;"	f
cipher_ctx_cleanup	src/openvpn/crypto_polarssl.c	/^void cipher_ctx_cleanup (cipher_context_t *ctx)$/;"	f
cipher_ctx_final	src/openvpn/crypto_openssl.c	/^cipher_ctx_final (EVP_CIPHER_CTX *ctx, uint8_t *dst, int *dst_len)$/;"	f
cipher_ctx_final	src/openvpn/crypto_polarssl.c	/^int cipher_ctx_final (cipher_context_t *ctx, uint8_t *dst, int *dst_len)$/;"	f
cipher_ctx_get_cipher_kt	src/openvpn/crypto_openssl.c	/^cipher_ctx_get_cipher_kt (const cipher_ctx_t *ctx)$/;"	f
cipher_ctx_get_cipher_kt	src/openvpn/crypto_polarssl.c	/^cipher_ctx_get_cipher_kt (const cipher_ctx_t *ctx)$/;"	f
cipher_ctx_init	src/openvpn/crypto_openssl.c	/^cipher_ctx_init (EVP_CIPHER_CTX *ctx, uint8_t *key, int key_len,$/;"	f
cipher_ctx_init	src/openvpn/crypto_polarssl.c	/^cipher_ctx_init (cipher_context_t *ctx, uint8_t *key, int key_len,$/;"	f
cipher_ctx_iv_length	src/openvpn/crypto_openssl.c	/^cipher_ctx_iv_length (const EVP_CIPHER_CTX *ctx)$/;"	f
cipher_ctx_iv_length	src/openvpn/crypto_polarssl.c	/^int cipher_ctx_iv_length (const cipher_context_t *ctx)$/;"	f
cipher_ctx_mode	src/openvpn/crypto_openssl.c	/^cipher_ctx_mode (const EVP_CIPHER_CTX *ctx)$/;"	f
cipher_ctx_mode	src/openvpn/crypto_polarssl.c	/^int cipher_ctx_mode (const cipher_context_t *ctx)$/;"	f
cipher_ctx_reset	src/openvpn/crypto_openssl.c	/^cipher_ctx_reset (EVP_CIPHER_CTX *ctx, uint8_t *iv_buf)$/;"	f
cipher_ctx_reset	src/openvpn/crypto_polarssl.c	/^int cipher_ctx_reset (cipher_context_t *ctx, uint8_t *iv_buf)$/;"	f
cipher_ctx_t	src/openvpn/crypto_openssl.h	/^typedef EVP_CIPHER_CTX cipher_ctx_t;$/;"	t
cipher_ctx_t	src/openvpn/crypto_polarssl.h	/^typedef cipher_context_t cipher_ctx_t;$/;"	t
cipher_ctx_update	src/openvpn/crypto_openssl.c	/^cipher_ctx_update (EVP_CIPHER_CTX *ctx, uint8_t *dst, int *dst_len,$/;"	f
cipher_ctx_update	src/openvpn/crypto_polarssl.c	/^int cipher_ctx_update (cipher_context_t *ctx, uint8_t *dst, int *dst_len,$/;"	f
cipher_des_encrypt_ecb	src/openvpn/crypto_openssl.c	/^cipher_des_encrypt_ecb (const unsigned char key[DES_KEY_LENGTH],$/;"	f
cipher_des_encrypt_ecb	src/openvpn/crypto_polarssl.c	/^cipher_des_encrypt_ecb (const unsigned char key[DES_KEY_LENGTH],$/;"	f
cipher_kt_block_size	src/openvpn/crypto_openssl.c	/^cipher_kt_block_size (const EVP_CIPHER *cipher_kt)$/;"	f
cipher_kt_block_size	src/openvpn/crypto_polarssl.c	/^cipher_kt_block_size (const cipher_info_t *cipher_kt)$/;"	f
cipher_kt_get	src/openvpn/crypto_openssl.c	/^cipher_kt_get (const char *ciphername)$/;"	f
cipher_kt_get	src/openvpn/crypto_polarssl.c	/^cipher_kt_get (const char *ciphername)$/;"	f
cipher_kt_iv_size	src/openvpn/crypto_openssl.c	/^cipher_kt_iv_size (const EVP_CIPHER *cipher_kt)$/;"	f
cipher_kt_iv_size	src/openvpn/crypto_polarssl.c	/^cipher_kt_iv_size (const cipher_info_t *cipher_kt)$/;"	f
cipher_kt_key_size	src/openvpn/crypto_openssl.c	/^cipher_kt_key_size (const EVP_CIPHER *cipher_kt)$/;"	f
cipher_kt_key_size	src/openvpn/crypto_polarssl.c	/^cipher_kt_key_size (const cipher_info_t *cipher_kt)$/;"	f
cipher_kt_mode	src/openvpn/crypto_openssl.c	/^cipher_kt_mode (const EVP_CIPHER *cipher_kt)$/;"	f
cipher_kt_mode	src/openvpn/crypto_polarssl.c	/^cipher_kt_mode (const cipher_info_t *cipher_kt)$/;"	f
cipher_kt_mode_cbc	src/openvpn/crypto_openssl.c	/^cipher_kt_mode_cbc(const cipher_kt_t *cipher)$/;"	f
cipher_kt_mode_cbc	src/openvpn/crypto_polarssl.c	/^cipher_kt_mode_cbc(const cipher_kt_t *cipher)$/;"	f
cipher_kt_mode_ofb_cfb	src/openvpn/crypto_openssl.c	/^cipher_kt_mode_ofb_cfb(const cipher_kt_t *cipher)$/;"	f
cipher_kt_mode_ofb_cfb	src/openvpn/crypto_polarssl.c	/^cipher_kt_mode_ofb_cfb(const cipher_kt_t *cipher)$/;"	f
cipher_kt_name	src/openvpn/crypto_openssl.c	/^cipher_kt_name (const EVP_CIPHER *cipher_kt)$/;"	f
cipher_kt_name	src/openvpn/crypto_polarssl.c	/^cipher_kt_name (const cipher_info_t *cipher_kt)$/;"	f
cipher_kt_t	src/openvpn/crypto_openssl.h	/^typedef EVP_CIPHER cipher_kt_t;$/;"	t
cipher_kt_t	src/openvpn/crypto_polarssl.h	/^typedef cipher_info_t cipher_kt_t;$/;"	t
cipher_length	src/openvpn/crypto.h	/^  uint8_t cipher_length; 	\/**< Cipher length, in bytes *\/$/;"	m	struct:key_type
cipher_list	src/openvpn/options.h	/^  const char *cipher_list;$/;"	m	struct:options
cipher_name_pair	src/openvpn/crypto_polarssl.c	/^typedef struct { const char * openvpn_name; const char * polarssl_name; } cipher_name_pair;$/;"	t	typeref:struct:__anon11	file:
cipher_name_translation_table	src/openvpn/crypto_polarssl.c	/^cipher_name_pair cipher_name_translation_table[] = {$/;"	v
ciphername	src/openvpn/options.h	/^  const char *ciphername;$/;"	m	struct:options
ciphername_defined	src/openvpn/options.h	/^  bool ciphername_defined;$/;"	m	struct:options
clear_buf	src/openvpn/buffer.c	/^clear_buf ()$/;"	f
clear_prefix	src/openvpn/multi.h	/^clear_prefix (void)$/;"	f
clear_route_ipv6_list	src/openvpn/route.c	/^clear_route_ipv6_list (struct route_ipv6_list *rl6)$/;"	f
clear_route_list	src/openvpn/route.c	/^clear_route_list (struct route_list *rl)$/;"	f
clear_tuntap	src/openvpn/tun.c	/^clear_tuntap (struct tuntap *tuntap)$/;"	f	file:
clear_user_pass_http	src/openvpn/proxy.c	/^clear_user_pass_http (void)$/;"	f	file:
client	src/openvpn/options.h	/^  bool client;$/;"	m	struct:options
client	src/openvpn/ssl_common.h	/^  struct key_source client;     \/**< Random provided by client. *\/$/;"	m	struct:key_source2	typeref:struct:key_source2::key_source
client_auth	src/openvpn/manage.h	/^  bool (*client_auth) (void *arg,$/;"	m	struct:management_callback
client_config_dir	src/openvpn/options.h	/^  const char *client_config_dir;$/;"	m	struct:options
client_config_dir_exclusive	src/openvpn/ssl_common.h	/^  const char *client_config_dir_exclusive;$/;"	m	struct:tls_options
client_connect_script	src/openvpn/options.h	/^  const char *client_connect_script;$/;"	m	struct:options
client_constructor	src/openvpn/plugin.h	/^  openvpn_plugin_client_constructor_v1 client_constructor;$/;"	m	struct:plugin
client_destructor	src/openvpn/plugin.h	/^  openvpn_plugin_client_destructor_v1 client_destructor;$/;"	m	struct:plugin
client_disconnect_script	src/openvpn/options.h	/^  const char *client_disconnect_script;$/;"	m	struct:options
client_gid	src/openvpn/manage.h	/^  int client_gid;$/;"	m	struct:man_settings
client_nat	src/openvpn/options.h	/^  struct client_nat_option_list *client_nat;$/;"	m	struct:options	typeref:struct:options::client_nat_option_list
client_nat	src/openvpn/options.h	/^  struct client_nat_option_list *client_nat;$/;"	m	struct:options_pre_pull	typeref:struct:options_pre_pull::client_nat_option_list
client_nat_defined	src/openvpn/options.h	/^  bool client_nat_defined;$/;"	m	struct:options_pre_pull
client_nat_entry	src/openvpn/clinat.h	/^struct client_nat_entry {$/;"	s
client_nat_option_list	src/openvpn/clinat.h	/^struct client_nat_option_list {$/;"	s
client_nat_transform	src/openvpn/clinat.c	/^client_nat_transform (const struct client_nat_option_list *list,$/;"	f
client_pf	src/openvpn/manage.h	/^  bool (*client_pf) (void *arg,$/;"	m	struct:management_callback
client_reason	src/openvpn/ssl_common.h	/^  char *client_reason;$/;"	m	struct:tls_multi
client_uid	src/openvpn/manage.h	/^  int client_uid;$/;"	m	struct:man_settings
clone_buf	src/openvpn/buffer.h	143;"	d
clone_buf_debug	src/openvpn/buffer.c	/^clone_buf_debug (const struct buffer* buf, const char *file, int line)$/;"	f
clone_client_nat_option_list	src/openvpn/clinat.c	/^clone_client_nat_option_list (const struct client_nat_option_list *src, struct gc_arena *gc)$/;"	f
clone_push_list	src/openvpn/push.c	/^clone_push_list (struct options *o)$/;"	f
clone_route_ipv6_option_list	src/openvpn/route.c	/^clone_route_ipv6_option_list (const struct route_ipv6_option_list *src, struct gc_arena *a)$/;"	f
clone_route_option_list	src/openvpn/route.c	/^clone_route_option_list (const struct route_option_list *src, struct gc_arena *a)$/;"	f
close	src/openvpn/plugin.h	/^  openvpn_plugin_close_v1 close;$/;"	m	struct:plugin
close_biofp	src/openvpn/ssl_openssl.c	/^close_biofp()$/;"	f	file:
close_context	src/openvpn/init.c	/^close_context (struct context *c, int sig, unsigned int flags)$/;"	f
close_fds_except	src/openvpn/ps.c	/^close_fds_except (int keep)$/;"	f	file:
close_fds_except	src/plugins/auth-pam/auth-pam.c	/^close_fds_except (int keep)$/;"	f	file:
close_fds_except	src/plugins/down-root/down-root.c	/^close_fds_except (int keep)$/;"	f	file:
close_if_open	src/openvpnserv/openvpnserv.c	/^close_if_open (HANDLE h)$/;"	f
close_instance	src/openvpn/init.c	/^close_instance (struct context *c)$/;"	f
close_management	src/openvpn/init.c	/^close_management (void)$/;"	f
close_net_event_win32	src/openvpn/win32.c	/^close_net_event_win32 (struct rw_handle *event, socket_descriptor_t sd, unsigned int flags)$/;"	f
close_port_share	src/openvpn/init.c	/^close_port_share (void)$/;"	f	file:
close_socket_if_defined	src/openvpn/ps.c	/^close_socket_if_defined (const socket_descriptor_t sd)$/;"	f	file:
close_syslog	src/openvpn/error.c	/^close_syslog ()$/;"	f
close_tty	src/openvpn/console.c	/^close_tty (FILE *fp)$/;"	f	file:
close_tun	src/openvpn/tun.c	/^close_tun (struct tuntap *tt)$/;"	f
close_tun	src/openvpn/tun.c	/^close_tun (struct tuntap* tt)$/;"	f
close_tun_generic	src/openvpn/tun.c	/^close_tun_generic (struct tuntap *tt)$/;"	f	file:
cmp_prefix	src/openvpn/win32.c	/^cmp_prefix (const char *str, const bool n, const char *pre)$/;"	f	file:
cmsg_size	src/openvpn/ps.c	/^cmsg_size ()$/;"	f	file:
cmsghdr	src/openvpn/socket.c	/^  struct cmsghdr cmsghdr;$/;"	m	struct:openvpn_in4_pktinfo	typeref:struct:openvpn_in4_pktinfo::cmsghdr	file:
cmsghdr	src/openvpn/socket.c	/^  struct cmsghdr cmsghdr;$/;"	m	struct:openvpn_in6_pktinfo	typeref:struct:openvpn_in6_pktinfo::cmsghdr	file:
cn	src/openvpn/pf.h	/^  char *cn;$/;"	m	struct:pf_cn
cn_compare_function	src/openvpn/pf.c	/^cn_compare_function (const void *key1, const void *key2)$/;"	f	file:
cn_hash_function	src/openvpn/pf.c	/^cn_hash_function (const void *key, uint32_t iv)$/;"	f	file:
cnol_check_alloc	src/openvpn/options.c	/^cnol_check_alloc (struct options *options)$/;"	f	file:
cns	src/openvpn/pf.h	/^  struct pf_cn_set cns;$/;"	m	struct:pf_set	typeref:struct:pf_set::pf_cn_set
coarse_timer_wakeup	src/openvpn/openvpn.h	/^  time_t coarse_timer_wakeup;$/;"	m	struct:context_2
coll	src/openvpn/schedule.c	/^  int coll;$/;"	m	struct:status	file:
command	src/plugins/down-root/down-root.c	/^  char *command;$/;"	m	struct:down_root_context	file:
command_line	src/openvpn/manage.h	/^struct command_line$/;"	s
command_line_add	src/openvpn/manage.c	/^command_line_add (struct command_line *cl, const unsigned char *buf, const int len)$/;"	f
command_line_free	src/openvpn/manage.c	/^command_line_free (struct command_line *cl)$/;"	f
command_line_get	src/openvpn/manage.c	/^command_line_get (struct command_line *cl)$/;"	f
command_line_new	src/openvpn/manage.c	/^command_line_new (const int buf_len)$/;"	f
command_line_next	src/openvpn/manage.c	/^command_line_next (struct command_line *cl)$/;"	f
command_line_reset	src/openvpn/manage.c	/^command_line_reset (struct command_line *cl)$/;"	f
common	src/openvpn/plugin.h	/^  struct plugin_common *common;$/;"	m	struct:plugin_list	typeref:struct:plugin_list::plugin_common
common_name	src/openvpn/pool.h	/^  char *common_name;$/;"	m	struct:ifconfig_pool_entry
common_name	src/openvpn/ssl_common.h	/^  char *common_name;$/;"	m	struct:tls_session
common_name	src/plugins/auth-pam/auth-pam.c	/^  char common_name[128];$/;"	m	struct:user_pass	file:
common_name_hashval	src/openvpn/ssl_common.h	/^  uint32_t common_name_hashval;$/;"	m	struct:tls_session
common_owned	src/openvpn/plugin.h	/^  bool common_owned;$/;"	m	struct:plugin_list
compare_function	src/openvpn/list.h	/^  bool (*compare_function)(const void *key1, const void *key2); \/* return true if equal *\/$/;"	m	struct:hash
compat_flag	src/openvpn/misc.c	/^compat_flag (unsigned int flag)$/;"	f
compress_state	src/openvpn/lzo.h	/^  bool compress_state;$/;"	m	struct:lzo_adaptive_compress
compute_earliest_wakeup	src/openvpn/ssl.c	/^compute_earliest_wakeup (interval_t *earliest, interval_t seconds_from_now) {$/;"	f	file:
compute_wakeup_sigma	src/openvpn/multi.c	/^compute_wakeup_sigma (const struct timeval *delta)$/;"	f	file:
config	src/openvpn/options.h	/^  const char *config;$/;"	m	struct:options
connect_retry_defined	src/openvpn/options.h	/^  bool connect_retry_defined;$/;"	m	struct:connection_entry
connect_retry_max	src/openvpn/options.h	/^  int connect_retry_max;$/;"	m	struct:connection_entry
connect_retry_max	src/openvpn/socket.h	/^  int connect_retry_max;$/;"	m	struct:link_socket
connect_retry_seconds	src/openvpn/options.h	/^  int connect_retry_seconds;$/;"	m	struct:connection_entry
connect_retry_seconds	src/openvpn/socket.h	/^  int connect_retry_seconds;$/;"	m	struct:link_socket
connect_timeout	src/openvpn/options.h	/^  int connect_timeout;$/;"	m	struct:connection_entry
connect_timeout	src/openvpn/socket.h	/^  int connect_timeout;$/;"	m	struct:link_socket
connect_timeout_defined	src/openvpn/options.h	/^  bool connect_timeout_defined;$/;"	m	struct:connection_entry
connection	src/openvpn/manage.h	/^  struct man_connection connection;$/;"	m	struct:management	typeref:struct:management::man_connection
connection_entry	src/openvpn/options.h	/^struct connection_entry$/;"	s
connection_entry_load_re	src/openvpn/options.c	/^connection_entry_load_re (struct connection_entry *ce, const struct remote_entry *re)$/;"	f
connection_established	src/openvpn/socket.h	/^  bool connection_established;$/;"	m	struct:link_socket_info
connection_established_flag	src/openvpn/multi.h	/^  bool connection_established_flag;$/;"	m	struct:multi_instance
connection_list	src/openvpn/options.h	/^  struct connection_list *connection_list;$/;"	m	struct:options	typeref:struct:options::connection_list
connection_list	src/openvpn/options.h	/^struct connection_list$/;"	s
connection_list_defined	src/openvpn/options.h	/^connection_list_defined (const struct options *o)$/;"	f
connection_list_set_no_advance	src/openvpn/options.h	/^connection_list_set_no_advance (struct options *o)$/;"	f
connection_profiles_defined	src/openvpn/socket.h	/^  bool connection_profiles_defined;$/;"	m	struct:link_socket
console_mode_save	src/openvpn/win32.h	/^  DWORD console_mode_save;$/;"	m	struct:win32_signal
console_mode_save_defined	src/openvpn/win32.h	/^  bool console_mode_save_defined;$/;"	m	struct:win32_signal
const_char_pointer	src/plugins/auth-pam/pamdl.c	/^typedef const char * const_char_pointer;$/;"	t	file:
constrain_int	src/openvpn/integer.h	/^constrain_int (int x, int min, int max)$/;"	f
construct_name_value	src/openvpn/misc.c	/^construct_name_value (const char *name, const char *value, struct gc_arena *gc)$/;"	f	file:
context	src/openvpn/multi.h	/^  struct context context;       \/**< The context structure storing state$/;"	m	struct:multi_instance	typeref:struct:multi_instance::context
context	src/openvpn/openvpn.h	/^struct context$/;"	s
context_0	src/openvpn/openvpn.h	/^struct context_0$/;"	s
context_1	src/openvpn/openvpn.h	/^struct context_1$/;"	s
context_2	src/openvpn/openvpn.h	/^struct context_2$/;"	s
context_auth	src/openvpn/openvpn.h	/^  int context_auth;$/;"	m	struct:context_2
context_buffers	src/openvpn/multi.h	/^  struct context_buffers *context_buffers;$/;"	m	struct:multi_context	typeref:struct:multi_context::context_buffers
context_buffers	src/openvpn/openvpn.h	/^struct context_buffers$/;"	s
context_clear	src/openvpn/init.c	/^context_clear (struct context *c)$/;"	f
context_clear_1	src/openvpn/init.c	/^context_clear_1 (struct context *c)$/;"	f
context_clear_2	src/openvpn/init.c	/^context_clear_2 (struct context *c)$/;"	f
context_clear_all_except_first_time	src/openvpn/init.c	/^context_clear_all_except_first_time (struct context *c)$/;"	f
context_gc_free	src/openvpn/init.c	/^context_gc_free (struct context *c)$/;"	f
context_immediate_reschedule	src/openvpn/forward-inline.h	/^context_immediate_reschedule (struct context *c)$/;"	f
context_init_1	src/openvpn/init.c	/^context_init_1 (struct context *c)$/;"	f
context_persist	src/openvpn/openvpn.h	/^struct context_persist$/;"	s
context_reschedule_sec	src/openvpn/forward-inline.h	/^context_reschedule_sec (struct context *c, int sec)$/;"	f
control_message_from_parent	src/openvpn/ps.c	/^control_message_from_parent (const socket_descriptor_t sd_control,$/;"	f	file:
convert_to_one_line	src/openvpn/buffer.c	/^convert_to_one_line (struct buffer *buf)$/;"	f
copy_client_nat_option_list	src/openvpn/clinat.c	/^copy_client_nat_option_list (struct client_nat_option_list *dest,$/;"	f
copy_route_ipv6_option_list	src/openvpn/route.c	/^copy_route_ipv6_option_list (struct route_ipv6_option_list *dest,$/;"	f
copy_route_option_list	src/openvpn/route.c	/^copy_route_option_list (struct route_option_list *dest, const struct route_option_list *src)$/;"	f
corrupt_freq	src/openvpn/gremlin.c	/^static const int corrupt_freq[] = { 500, 100, 50 };$/;"	v	file:
corrupt_gremlin	src/openvpn/gremlin.c	/^void corrupt_gremlin (struct buffer *buf, int flags) {$/;"	f
count	src/openvpn/perf.c	/^  double count;$/;"	m	struct:perf	file:
count_bits	src/openvpn/misc.c	/^count_bits(unsigned int a)$/;"	f
count_netmask_bits	src/openvpn/misc.c	/^count_netmask_bits(const char *dotted_quad)$/;"	f
counter_format	src/openvpn/common.h	34;"	d
counter_format	src/openvpn/common.h	36;"	d
counter_format	src/openvpn/common.h	40;"	d
counter_type	src/openvpn/common.h	/^  typedef unsigned int counter_type;$/;"	t
counter_type	src/openvpn/common.h	/^  typedef unsigned long long int counter_type;$/;"	t
counterpart	src/openvpn/ps.c	/^  struct proxy_connection *counterpart;$/;"	m	struct:proxy_connection	typeref:struct:proxy_connection::proxy_connection	file:
crash	src/openvpn/error.c	/^crash (void)$/;"	f
create_des_keys	src/openvpn/ntlm.c	/^create_des_keys(const unsigned char *hash, unsigned char *key)$/;"	f	file:
create_event	src/openvpnserv/openvpnserv.c	/^create_event (const char *name, bool allow_all, bool initial_state, bool manual_reset)$/;"	f
create_socket	src/openvpn/socket.c	/^create_socket (struct link_socket *sock)$/;"	f	file:
create_socket_tcp	src/openvpn/socket.c	/^create_socket_tcp (int af)$/;"	f
create_socket_udp	src/openvpn/socket.c	/^create_socket_udp (const unsigned int flags)$/;"	f	file:
create_socket_udp6	src/openvpn/socket.c	/^create_socket_udp6 (const unsigned int flags)$/;"	f	file:
create_socket_unix	src/openvpn/socket.c	/^create_socket_unix (void)$/;"	f
create_temp_file	src/openvpn/misc.c	/^create_temp_file (const char *directory, const char *prefix, struct gc_arena *gc)$/;"	f
created	src/openvpn/multi.h	/^  time_t created;               \/**< Time at which a VPN tunnel instance$/;"	m	struct:multi_instance
crl_file	src/openvpn/options.h	/^  const char *crl_file;$/;"	m	struct:options
crl_file	src/openvpn/ssl_common.h	/^  const char *crl_file;$/;"	m	struct:tls_options
crt_chain	src/openvpn/ssl_polarssl.h	/^    x509_cert *crt_chain;	\/**< Local Certificate chain *\/$/;"	m	struct:tls_root_ctx
crypt_prov	src/openvpn/cryptoapi.c	/^    HCRYPTPROV crypt_prov;$/;"	m	struct:_CAPI_DATA	file:
crypto_adjust_frame_parameters	src/openvpn/crypto.c	/^crypto_adjust_frame_parameters(struct frame *frame,$/;"	f
crypto_clear_error	src/openvpn/crypto_openssl.c	/^crypto_clear_error (void)$/;"	f
crypto_clear_error	src/openvpn/crypto_polarssl.c	/^crypto_clear_error (void)$/;"	f
crypto_flags_and	src/openvpn/ssl_common.h	/^  unsigned int crypto_flags_and;$/;"	m	struct:tls_options
crypto_flags_or	src/openvpn/ssl_common.h	/^  unsigned int crypto_flags_or;$/;"	m	struct:tls_options
crypto_free	src/openvpn/crypto_openssl.c	/^crypto_free (void *ptr)$/;"	f	file:
crypto_init_dmalloc	src/openvpn/crypto_openssl.c	/^crypto_init_dmalloc (void)$/;"	f
crypto_init_dmalloc	src/openvpn/crypto_polarssl.c	/^crypto_init_dmalloc (void)$/;"	f
crypto_init_lib	src/openvpn/crypto_openssl.c	/^crypto_init_lib (void)$/;"	f
crypto_init_lib	src/openvpn/crypto_polarssl.c	/^crypto_init_lib (void)$/;"	f
crypto_init_lib_engine	src/openvpn/crypto_openssl.c	/^crypto_init_lib_engine (const char *engine_name)$/;"	f
crypto_init_lib_engine	src/openvpn/crypto_polarssl.c	/^crypto_init_lib_engine (const char *engine_name)$/;"	f
crypto_malloc	src/openvpn/crypto_openssl.c	/^crypto_malloc (size_t size, const char *file, int line)$/;"	f	file:
crypto_options	src/openvpn/crypto.h	/^struct crypto_options$/;"	s
crypto_options	src/openvpn/openvpn.h	/^  struct crypto_options crypto_options;$/;"	m	struct:context_2	typeref:struct:context_2::crypto_options
crypto_realloc	src/openvpn/crypto_openssl.c	/^crypto_realloc (void *ptr, size_t size, const char *file, int line)$/;"	f	file:
crypto_uninit_lib	src/openvpn/crypto_openssl.c	/^crypto_uninit_lib (void)$/;"	f
crypto_uninit_lib	src/openvpn/crypto_polarssl.c	/^crypto_uninit_lib (void)$/;"	f
cryptoapi_cert	src/openvpn/options.h	/^  const char *cryptoapi_cert;$/;"	m	struct:options
ct_in	src/openvpn/ssl_openssl.h	/^    BIO *ct_in;			\/* write ciphertext to here *\/$/;"	m	struct:key_state_ssl
ct_in	src/openvpn/ssl_polarssl.h	/^        endless_buffer *ct_in;$/;"	m	struct:key_state_ssl
ct_out	src/openvpn/ssl_openssl.h	/^    BIO *ct_out;			\/* read ciphertext from here *\/$/;"	m	struct:key_state_ssl
ct_out	src/openvpn/ssl_polarssl.h	/^        endless_buffer *ct_out;$/;"	m	struct:key_state_ssl
ctl	src/openvpn/event.h	/^  void (*ctl)(struct event_set *es, event_t event, unsigned int rwflags, void *arg);$/;"	m	struct:event_set_functions
ctrl_sd	src/openvpn/socket.h	/^  socket_descriptor_t ctrl_sd;  \/* only used for UDP over Socks *\/$/;"	m	struct:link_socket
ctx	src/openvpn/crypto.h	/^  md_ctx_t ctx;$/;"	m	struct:md5_state
ctx	src/openvpn/ssl_openssl.h	/^    SSL_CTX *ctx;$/;"	m	struct:tls_root_ctx
ctx	src/openvpn/ssl_polarssl.h	/^        ssl_context *ctx;$/;"	m	struct:key_state_ssl
current	src/openvpn/options.h	/^  int current;$/;"	m	struct:connection_list
current_cert	include/openvpn-plugin.h	/^  openvpn_x509_cert_t *current_cert;$/;"	m	struct:openvpn_plugin_args_func_in
current_cert_depth	include/openvpn-plugin.h	/^  int current_cert_depth;$/;"	m	struct:openvpn_plugin_args_func_in
daddr	src/openvpn/proto.h	/^        struct  in6_addr        daddr;$/;"	m	struct:openvpn_ipv6hdr	typeref:struct:openvpn_ipv6hdr::in6_addr
daddr	src/openvpn/proto.h	/^  uint32_t   daddr;$/;"	m	struct:openvpn_iphdr
daemon	src/compat/compat-daemon.c	/^daemon(int nochdir, int noclose)$/;"	f
daemon	src/openvpn/options.h	/^  bool daemon;$/;"	m	struct:options
daemonize	src/plugins/auth-pam/auth-pam.c	/^daemonize (const char *envp[])$/;"	f	file:
daemonize	src/plugins/down-root/down-root.c	/^daemonize (const char *envp[])$/;"	f	file:
data	src/openvpn/buffer.h	/^  uint8_t *data;                \/**< Pointer to the allocated memory. *\/$/;"	m	struct:buffer
data	src/openvpn/ssl_polarssl.h	/^    uint8_t *data;$/;"	m	struct:_buffer_entry
data	src/plugins/auth-pam/auth-pam.c	/^  struct name_value data[N_NAME_VALUE];$/;"	m	struct:name_value_list	typeref:struct:name_value_list::name_value	file:
data_start	src/openvpn/ssl_polarssl.h	/^    size_t data_start;$/;"	m	struct:__anon8
datagram_overhead	src/openvpn/socket.h	/^datagram_overhead (int proto)$/;"	f
debug_file	src/openvpn/buffer.h	/^  const char *debug_file;$/;"	m	struct:buffer
debug_line	src/openvpn/buffer.h	/^  int debug_line;$/;"	m	struct:buffer
deconstruct_name_value	src/openvpn/misc.c	/^deconstruct_name_value (const char *str, const char **name, const char **value, struct gc_arena *gc)$/;"	f
decrypt	src/openvpn/crypto.h	/^  struct key_ctx decrypt;       \/**< OpenSSL cipher and\/or HMAC contexts$/;"	m	struct:key_ctx_bi	typeref:struct:key_ctx_bi::key_ctx
decrypt_buf	src/openvpn/openvpn.h	/^  struct buffer decrypt_buf;$/;"	m	struct:context_buffers	typeref:struct:context_buffers::buffer
default_allow	src/openvpn/pf.h	/^  bool default_allow;$/;"	m	struct:pf_cn_set
default_allow	src/openvpn/pf.h	/^  bool default_allow;$/;"	m	struct:pf_subnet_set
default_err	src/openvpn/error.c	/^static FILE *default_err; \/* GLOBAL *\/$/;"	v	file:
default_metric	src/openvpn/route.h	/^  int default_metric;$/;"	m	struct:route_ipv6_list
default_metric	src/openvpn/route.h	/^  int default_metric;$/;"	m	struct:route_special_addr
default_metric_defined	src/openvpn/route.h	/^  bool default_metric_defined;$/;"	m	struct:route_ipv6_list
default_out	src/openvpn/error.c	/^static FILE *default_out; \/* GLOBAL *\/$/;"	v	file:
defined	src/openvpn/fragment.h	/^  bool defined;                 \/**< Whether reassembly is currently$/;"	m	struct:fragment
defined	src/openvpn/interval.h	/^  bool defined;$/;"	m	struct:event_timeout
defined	src/openvpn/lzo.h	/^  bool defined;$/;"	m	struct:lzo_compress_workspace
defined	src/openvpn/manage.h	/^  bool defined;$/;"	m	struct:man_persist
defined	src/openvpn/manage.h	/^  bool defined;$/;"	m	struct:man_settings
defined	src/openvpn/misc.h	/^  bool defined;$/;"	m	struct:user_pass
defined	src/openvpn/multi.h	/^  bool defined;$/;"	m	struct:multi_instance
defined	src/openvpn/proxy.h	/^  bool defined;$/;"	m	struct:http_proxy_info
defined	src/openvpn/ps.c	/^  bool defined;$/;"	m	struct:proxy_connection	file:
defined	src/openvpn/route.h	/^  bool defined;$/;"	m	struct:route_ipv6
defined	src/openvpn/socks.h	/^  bool defined;$/;"	m	struct:socks_proxy_info
defined_net_event_win32	src/openvpn/win32.h	/^defined_net_event_win32 (const struct rw_handle *event)$/;"	f
del	src/openvpn/event.h	/^  void (*del)(struct event_set *es, event_t event);$/;"	m	struct:event_set_functions
del_bypass_routes	src/openvpn/route.c	/^del_bypass_routes (struct route_bypass *rb,$/;"	f	file:
del_route3	src/openvpn/route.c	/^del_route3 (in_addr_t network,$/;"	f	file:
del_route_ipapi	src/openvpn/route.c	/^del_route_ipapi (const struct route_ipv4 *r, const struct tuntap *tt)$/;"	f
delete_event	src/openvpn/manage.h	/^  void (*delete_event) (void *arg, event_t event);$/;"	m	struct:management_callback
delete_route	src/openvpn/route.c	/^delete_route (struct route_ipv4 *r,$/;"	f	file:
delete_route_connected_v6_net	src/openvpn/tun.c	/^void delete_route_connected_v6_net(struct tuntap * tt,$/;"	f
delete_route_ipv6	src/openvpn/route.c	/^delete_route_ipv6 (const struct route_ipv6 *r6, const struct tuntap *tt, unsigned int flags, const struct env_set *es)$/;"	f
delete_routes	src/openvpn/route.c	/^delete_routes (struct route_list *rl, struct route_ipv6_list *rl6,$/;"	f
delete_temp_addresses	src/openvpn/tun.c	/^delete_temp_addresses (DWORD index)$/;"	f	file:
delta	src/openvpn/occ.h	/^  int delta;			\/* determine packet size to send by using$/;"	m	struct:mtu_load_test
dest	src/openvpn/proto.h	/^  uint16_t      dest;      \/* destination port *\/$/;"	m	struct:openvpn_tcphdr
dest	src/openvpn/proto.h	/^  uint16_t   dest;$/;"	m	struct:openvpn_udphdr
dest	src/openvpn/proto.h	/^  uint8_t dest[OPENVPN_ETH_ALEN];     \/* destination ethernet addr *\/$/;"	m	struct:openvpn_ethhdr
dest	src/openvpn/socket.h	/^  struct openvpn_sockaddr dest;$/;"	m	struct:link_socket_actual	typeref:struct:link_socket_actual::openvpn_sockaddr
dev	src/openvpn/options.h	/^  const char *dev;$/;"	m	struct:options
dev_node	src/openvpn/options.h	/^  const char *dev_node;$/;"	m	struct:options
dev_type	src/openvpn/options.h	/^  const char *dev_type;$/;"	m	struct:options
dev_type_enum	src/openvpn/tun.c	/^dev_type_enum (const char *dev, const char *dev_type)$/;"	f
dev_type_string	src/openvpn/tun.c	/^dev_type_string (const char *dev, const char *dev_type)$/;"	f
dh_file	src/openvpn/options.h	/^  const char *dh_file;$/;"	m	struct:options
dh_file_inline	src/openvpn/options.h	/^  const char *dh_file_inline;$/;"	m	struct:options
dhcp	src/openvpn/dhcp.h	/^  struct dhcp dhcp;$/;"	m	struct:dhcp_full	typeref:struct:dhcp_full::dhcp
dhcp	src/openvpn/dhcp.h	/^struct dhcp {$/;"	s
dhcp_extract_router_msg	src/openvpn/dhcp.c	/^dhcp_extract_router_msg (struct buffer *ipbuf)$/;"	f
dhcp_full	src/openvpn/dhcp.h	/^struct dhcp_full {$/;"	s
dhcp_lease_time	src/openvpn/tun.h	/^  int dhcp_lease_time;$/;"	m	struct:tuntap_options
dhcp_masq_addr	src/openvpn/tun.c	/^dhcp_masq_addr (const in_addr_t local, const in_addr_t netmask, const int offset)$/;"	f	file:
dhcp_masq_custom_offset	src/openvpn/tun.h	/^  bool dhcp_masq_custom_offset;$/;"	m	struct:tuntap_options
dhcp_masq_offset	src/openvpn/tun.h	/^  int dhcp_masq_offset;$/;"	m	struct:tuntap_options
dhcp_option_address_parse	src/openvpn/options.c	/^dhcp_option_address_parse (const char *name, const char *parm, in_addr_t *array, int *len, int msglevel)$/;"	f	file:
dhcp_options	src/openvpn/tun.h	/^  bool dhcp_options;$/;"	m	struct:tuntap_options
dhcp_pre_release	src/openvpn/tun.h	/^  bool dhcp_pre_release;$/;"	m	struct:tuntap_options
dhcp_release	src/openvpn/tun.c	/^dhcp_release (const struct tuntap *tt)$/;"	f	file:
dhcp_release	src/openvpn/tun.h	/^  bool dhcp_release;$/;"	m	struct:tuntap_options
dhcp_release_by_adapter_index	src/openvpn/tun.c	/^dhcp_release_by_adapter_index(const DWORD adapter_index)$/;"	f
dhcp_renew	src/openvpn/tun.c	/^dhcp_renew (const struct tuntap *tt)$/;"	f	file:
dhcp_renew	src/openvpn/tun.h	/^  bool dhcp_renew;$/;"	m	struct:tuntap_options
dhcp_renew_by_adapter_index	src/openvpn/tun.c	/^dhcp_renew_by_adapter_index (const DWORD adapter_index)$/;"	f
dhcp_status	src/openvpn/tun.c	/^dhcp_status (DWORD index)$/;"	f	file:
dhm_ctx	src/openvpn/ssl_polarssl.h	/^    dhm_context *dhm_ctx;	\/**< Diffie-Helmann-Merkle context *\/$/;"	m	struct:tls_root_ctx
did_cid_hash	src/openvpn/multi.h	/^  bool did_cid_hash;$/;"	m	struct:multi_instance
did_ifconfig	src/openvpn/tun.h	/^  bool did_ifconfig;$/;"	m	struct:tuntap
did_ifconfig_ipv6_setup	src/openvpn/tun.h	/^  bool did_ifconfig_ipv6_setup;$/;"	m	struct:tuntap
did_ifconfig_setup	src/openvpn/tun.h	/^  bool did_ifconfig_setup;$/;"	m	struct:tuntap
did_iroutes	src/openvpn/multi.h	/^  bool did_iroutes;$/;"	m	struct:multi_instance
did_iter	src/openvpn/multi.h	/^  bool did_iter;$/;"	m	struct:multi_instance
did_local	src/openvpn/route.h	/^  bool did_local;					\/* TODO (?) *\/$/;"	m	struct:route_ipv6_list
did_open_context	src/openvpn/multi.h	/^  bool did_open_context;$/;"	m	struct:multi_instance
did_open_tun	src/openvpn/openvpn.h	/^  bool did_open_tun;$/;"	m	struct:context_2
did_pre_pull_restore	src/openvpn/openvpn.h	/^  bool did_pre_pull_restore;$/;"	m	struct:context_2
did_real_hash	src/openvpn/multi.h	/^  bool did_real_hash;$/;"	m	struct:multi_instance
did_redirect_default_gateway	src/openvpn/route.h	/^  bool did_redirect_default_gateway;			\/* TODO (?) *\/$/;"	m	struct:route_ipv6_list
did_resolve_remote	src/openvpn/socket.h	/^  bool did_resolve_remote;$/;"	m	struct:link_socket
did_we_daemonize	src/openvpn/openvpn.h	/^  bool did_we_daemonize;        \/**< Whether demonization has already$/;"	m	struct:context
digest	src/openvpn/crypto.h	/^  const md_kt_t *digest;	\/**< Message digest static parameters *\/$/;"	m	struct:key_type
digest	src/openvpn/crypto.h	/^  uint8_t digest [MD5_DIGEST_LENGTH];$/;"	m	struct:md5_digest
dirname	src/compat/compat-dirname.c	/^dirname (char *path)$/;"	f
disable	src/openvpn/options.h	/^  bool disable;$/;"	m	struct:options
disable_nbt	src/openvpn/tun.h	/^  bool disable_nbt;$/;"	m	struct:tuntap_options
disable_occ	src/openvpn/ssl_common.h	/^  bool disable_occ;$/;"	m	struct:tls_options
display_form	src/openvpn/socket.c	/^  const char *display_form;$/;"	m	struct:proto_names	file:
dlclose_pam	src/plugins/auth-pam/pamdl.c	/^dlclose_pam (void)$/;"	f
dll_resolve_symbol	src/openvpn/plugin.c	/^dll_resolve_symbol (HMODULE module, void **dest, const char *symbol, const char *plugin_name, const unsigned int flags)$/;"	f	file:
dlopen_pam	src/plugins/auth-pam/pamdl.c	/^dlopen_pam (const char *so)$/;"	f
dmsg	src/openvpn/error.h	151;"	d
dmsg	src/openvpn/error.h	153;"	d
dmsg	src/openvpn/error.h	159;"	d
dmsg	src/openvpn/error.h	161;"	d
dmsg	src/openvpn/error.h	172;"	d
dns	src/openvpn/tun.h	/^  in_addr_t dns[N_DHCP_ADDR];$/;"	m	struct:tuntap_options
dns_addr_safe	src/openvpn/socket.c	/^dns_addr_safe (const char *addr)$/;"	f	file:
dns_len	src/openvpn/tun.h	/^  int dns_len;$/;"	m	struct:tuntap_options
do_alloc_route_list	src/openvpn/init.c	/^do_alloc_route_list (struct context *c)$/;"	f	file:
do_close_check_if_restart_permitted	src/openvpn/init.c	/^do_close_check_if_restart_permitted (struct context *c)$/;"	f	file:
do_close_event_set	src/openvpn/init.c	/^do_close_event_set (struct context *c)$/;"	f	file:
do_close_fragment	src/openvpn/init.c	/^do_close_fragment (struct context *c)$/;"	f	file:
do_close_free_buf	src/openvpn/init.c	/^do_close_free_buf (struct context *c)$/;"	f	file:
do_close_free_key_schedule	src/openvpn/init.c	/^do_close_free_key_schedule (struct context *c, bool free_ssl_ctx)$/;"	f	file:
do_close_ifconfig_pool_persist	src/openvpn/init.c	/^do_close_ifconfig_pool_persist (struct context *c)$/;"	f	file:
do_close_link_socket	src/openvpn/init.c	/^do_close_link_socket (struct context *c)$/;"	f	file:
do_close_packet_id	src/openvpn/init.c	/^do_close_packet_id (struct context *c)$/;"	f	file:
do_close_plugins	src/openvpn/init.c	/^do_close_plugins (struct context *c)$/;"	f	file:
do_close_status_output	src/openvpn/init.c	/^do_close_status_output (struct context *c)$/;"	f	file:
do_close_tls	src/openvpn/init.c	/^do_close_tls (struct context *c)$/;"	f	file:
do_close_tun	src/openvpn/init.c	/^do_close_tun (struct context *c, bool force)$/;"	f	file:
do_close_tun_simple	src/openvpn/init.c	/^do_close_tun_simple (struct context *c)$/;"	f	file:
do_compute_occ_strings	src/openvpn/init.c	/^do_compute_occ_strings (struct context *c)$/;"	f	file:
do_deferred_options	src/openvpn/init.c	/^do_deferred_options (struct context *c, const unsigned int found)$/;"	f
do_env_set_destroy	src/openvpn/init.c	/^do_env_set_destroy (struct context *c)$/;"	f	file:
do_event_set_init	src/openvpn/init.c	/^do_event_set_init (struct context *c,$/;"	f	file:
do_extract	src/openvpn/dhcp.c	/^do_extract (struct dhcp *dhcp, int optlen)$/;"	f	file:
do_genkey	src/openvpn/init.c	/^do_genkey (const struct options * options)$/;"	f
do_hold	src/openvpn/init.c	/^do_hold (struct context *c)$/;"	f	file:
do_ifconfig	src/openvpn/tun.c	/^do_ifconfig (struct tuntap *tt,$/;"	f
do_inherit_env	src/openvpn/init.c	/^do_inherit_env (struct context *c, const struct env_set *src)$/;"	f	file:
do_inherit_plugins	src/openvpn/init.c	/^do_inherit_plugins (struct context *c, const struct context *src)$/;"	f	file:
do_init_buffers	src/openvpn/init.c	/^do_init_buffers (struct context *c)$/;"	f	file:
do_init_crypto	src/openvpn/init.c	/^do_init_crypto (struct context *c, const unsigned int flags)$/;"	f	file:
do_init_crypto_none	src/openvpn/init.c	/^do_init_crypto_none (const struct context *c)$/;"	f	file:
do_init_crypto_static	src/openvpn/init.c	/^do_init_crypto_static (struct context *c, const unsigned int flags)$/;"	f	file:
do_init_crypto_tls	src/openvpn/init.c	/^do_init_crypto_tls (struct context *c, const unsigned int flags)$/;"	f	file:
do_init_crypto_tls_c1	src/openvpn/init.c	/^do_init_crypto_tls_c1 (struct context *c)$/;"	f	file:
do_init_finalize_tls_frame	src/openvpn/init.c	/^do_init_finalize_tls_frame (struct context *c)$/;"	f	file:
do_init_first_time	src/openvpn/init.c	/^do_init_first_time (struct context *c)$/;"	f	file:
do_init_fragment	src/openvpn/init.c	/^do_init_fragment (struct context *c)$/;"	f	file:
do_init_frame	src/openvpn/init.c	/^do_init_frame (struct context *c)$/;"	f	file:
do_init_frame_tls	src/openvpn/init.c	/^do_init_frame_tls (struct context *c)$/;"	f	file:
do_init_mssfix	src/openvpn/init.c	/^do_init_mssfix (struct context *c)$/;"	f	file:
do_init_route_ipv6_list	src/openvpn/init.c	/^do_init_route_ipv6_list (const struct options *options,$/;"	f	file:
do_init_route_list	src/openvpn/init.c	/^do_init_route_list (const struct options *options,$/;"	f	file:
do_init_socket_1	src/openvpn/init.c	/^do_init_socket_1 (struct context *c, const int mode)$/;"	f	file:
do_init_socket_2	src/openvpn/init.c	/^do_init_socket_2 (struct context *c)$/;"	f	file:
do_init_timers	src/openvpn/init.c	/^do_init_timers (struct context *c, bool deferred)$/;"	f	file:
do_init_traffic_shaper	src/openvpn/init.c	/^do_init_traffic_shaper (struct context *c)$/;"	f	file:
do_init_tun	src/openvpn/init.c	/^do_init_tun (struct context *c)$/;"	f	file:
do_link_socket_new	src/openvpn/init.c	/^do_link_socket_new (struct context *c)$/;"	f	file:
do_open_ifconfig_pool_persist	src/openvpn/init.c	/^do_open_ifconfig_pool_persist (struct context *c)$/;"	f	file:
do_open_status_output	src/openvpn/init.c	/^do_open_status_output (struct context *c)$/;"	f	file:
do_open_tun	src/openvpn/init.c	/^do_open_tun (struct context *c)$/;"	f	file:
do_option_warnings	src/openvpn/init.c	/^do_option_warnings (struct context *c)$/;"	f	file:
do_persist_tuntap	src/openvpn/init.c	/^do_persist_tuntap (const struct options *options)$/;"	f
do_print_data_channel_mtu_parms	src/openvpn/init.c	/^do_print_data_channel_mtu_parms (struct context *c)$/;"	f	file:
do_route	src/openvpn/init.c	/^do_route (const struct options *options,$/;"	f
do_setenv_x509	src/openvpn/ssl_verify_openssl.c	/^do_setenv_x509 (struct env_set *es, const char *name, char *value, int depth)$/;"	f	file:
do_setup_fast_io	src/openvpn/init.c	/^do_setup_fast_io (struct context *c)$/;"	f	file:
do_signal_on_tls_errors	src/openvpn/init.c	/^do_signal_on_tls_errors (struct context *c)$/;"	f	file:
do_startup_pause	src/openvpn/init.c	/^do_startup_pause (struct context *c)$/;"	f	file:
do_test_crypto	src/openvpn/init.c	/^do_test_crypto (const struct options *o)$/;"	f
do_uid_gid_chroot	src/openvpn/init.c	/^do_uid_gid_chroot (struct context *c, bool no_delay)$/;"	f	file:
do_up	src/openvpn/init.c	/^do_up (struct context *c, bool pulled_options, unsigned int option_types_found)$/;"	f
do_up_ran	src/openvpn/openvpn.h	/^  bool do_up_ran;$/;"	m	struct:context_2
doff_res	src/openvpn/proto.h	/^  uint8_t       doff_res;$/;"	m	struct:openvpn_tcphdr
domain	src/openvpn/tun.h	/^  const char *domain;        \/* DOMAIN (15) *\/$/;"	m	struct:tuntap_options
dont_mute	src/openvpn/error.c	/^dont_mute (unsigned int flags)$/;"	f
down_high	src/openvpn/gremlin.c	/^static const int down_high[] = { 10, 60, 120 };$/;"	v	file:
down_low	src/openvpn/gremlin.c	/^static const int down_low[] =  {  5, 10,  10 };$/;"	v	file:
down_pre	src/openvpn/options.h	/^  bool down_pre;$/;"	m	struct:options
down_root_context	src/plugins/down-root/down-root.c	/^struct down_root_context$/;"	s	file:
down_root_server	src/plugins/down-root/down-root.c	/^down_root_server (const int fd, char *command, const char *argv[], const char *envp[], const int verb)$/;"	f	file:
down_script	src/openvpn/options.h	/^  const char *down_script;$/;"	m	struct:options
dragonfly_modify_read_write_return	src/openvpn/tun.c	/^dragonfly_modify_read_write_return (int len)$/;"	f	file:
drop_accept	src/openvpn/pf.c	/^drop_accept (const bool accept)$/;"	f	file:
drop_freq	src/openvpn/gremlin.c	/^static const int drop_freq[] = { 500, 100, 50 };$/;"	v	file:
dummy	src/openvpn/base64.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/cryptoapi.c	/^static void dummy (void) {}$/;"	f	file:
dummy	src/openvpn/fragment.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/gremlin.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/list.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/lzo.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/manage.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/mbuf.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/mroute.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/multi.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/ntlm.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/occ.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/openvpn.h	/^  int dummy;$/;"	m	struct:packet_id_persist
dummy	src/openvpn/perf.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/pkcs11.c	/^static void dummy (void) {}$/;"	f	file:
dummy	src/openvpn/plugin.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/plugin.h	/^struct plugin_list { int dummy; };$/;"	m	struct:plugin_list
dummy	src/openvpn/plugin.h	/^struct plugin_return { int dummy; };$/;"	m	struct:plugin_return
dummy	src/openvpn/proxy.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/reliable.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/session_id.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/shaper.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/socks.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/ssl.c	/^static void dummy(void) {}$/;"	f	file:
dummy	src/openvpn/tun.h	/^  int dummy; \/* not used *\/$/;"	m	struct:tuntap_options
dump_residual	src/openvpn/proxy.c	/^dump_residual (socket_descriptor_t sd,$/;"	f	file:
duplicate_cn	src/openvpn/options.h	/^  bool duplicate_cn;$/;"	m	struct:options
duplicate_cn	src/openvpn/pool.h	/^  bool duplicate_cn;$/;"	m	struct:ifconfig_pool
dwErr	src/openvpnserv/service.c	/^DWORD                   dwErr = 0;$/;"	v
earliest_wakeup	src/openvpn/multi.h	/^  struct multi_instance *earliest_wakeup;$/;"	m	struct:multi_context	typeref:struct:multi_context::multi_instance
earliest_wakeup	src/openvpn/schedule.h	/^  struct schedule_entry *earliest_wakeup; \/* cached earliest wakeup *\/$/;"	m	struct:schedule	typeref:struct:schedule::schedule_entry
echo	src/openvpn/manage.h	/^  struct log_history *echo; \/* saved --echo strings *\/$/;"	m	struct:man_persist	typeref:struct:man_persist::log_history
echo_buffer_size	src/openvpn/manage.h	/^  int echo_buffer_size;$/;"	m	struct:man_settings
echo_realtime	src/openvpn/manage.h	/^  bool echo_realtime;$/;"	m	struct:man_connection
elem	src/openvpn/list.h	/^  struct hash_element *elem;$/;"	m	struct:hash_iterator	typeref:struct:hash_iterator::hash_element
enable	src/openvpn/pushlist.h	/^  bool enable;$/;"	m	struct:push_entry
enable_c2c	src/openvpn/multi.h	/^  bool enable_c2c;$/;"	m	struct:multi_context
enable_c2c	src/openvpn/options.h	/^  bool enable_c2c;$/;"	m	struct:options
enabled	src/openvpn/pf.h	/^  bool enabled;$/;"	m	struct:pf_context
encrypt	src/openvpn/crypto.h	/^  struct key_ctx encrypt;       \/**< OpenSSL cipher and\/or HMAC contexts$/;"	m	struct:key_ctx_bi	typeref:struct:key_ctx_bi::key_ctx
encrypt_buf	src/openvpn/openvpn.h	/^  struct buffer encrypt_buf;$/;"	m	struct:context_buffers	typeref:struct:context_buffers::buffer
encrypt_sign	src/openvpn/forward.c	/^encrypt_sign (struct context *c, bool comp_frag)$/;"	f
end	msvc-build.bat	/^:end$/;"	l
end	msvc-dev.bat	/^:end$/;"	l
end	src/openvpn/interval.h	/^  struct timeval end;$/;"	m	struct:usec_timer	typeref:struct:usec_timer::timeval
endless_buf_read	src/openvpn/ssl_polarssl.c	/^static int endless_buf_read( void * ctx, unsigned char * out, size_t out_len )$/;"	f	file:
endless_buf_write	src/openvpn/ssl_polarssl.c	/^static int endless_buf_write( void *ctx, const unsigned char *in, size_t len )$/;"	f	file:
endless_buffer	src/openvpn/ssl_polarssl.h	/^} endless_buffer;$/;"	t	typeref:struct:__anon8
endpoint	src/openvpn/ssl_polarssl.h	/^    int endpoint; 		\/**< Whether or not this is a server or a client *\/$/;"	m	struct:tls_root_ctx
engine	src/openvpn/options.h	/^  const char *engine;$/;"	m	struct:options
engine_initialized	src/openvpn/crypto_openssl.c	/^static bool engine_initialized = false; \/* GLOBAL *\/$/;"	v	file:
engine_persist	src/openvpn/crypto_openssl.c	/^static ENGINE *engine_persist = NULL;   \/* GLOBAL *\/$/;"	v	file:
entries	src/openvpn/clinat.h	/^  struct client_nat_entry entries[MAX_CLIENT_NAT];$/;"	m	struct:client_nat_option_list	typeref:struct:client_nat_option_list::client_nat_entry
env_allowed	src/openvpn/misc.c	/^env_allowed (const char *str)$/;"	f
env_block	src/openvpn/win32.c	/^env_block (const struct env_set *es)$/;"	f	file:
env_filter_level	src/openvpn/manage.h	/^  int env_filter_level;$/;"	m	struct:man_connection
env_filter_match	src/openvpn/manage.c	/^env_filter_match (const char *env_str, const int env_filter_level)$/;"	f	file:
env_item	src/openvpn/misc.h	/^struct env_item {$/;"	s
env_safe_to_print	src/openvpn/misc.c	/^env_safe_to_print (const char *str)$/;"	f
env_set	src/openvpn/misc.h	/^struct env_set {$/;"	s
env_set_add	src/openvpn/misc.c	/^env_set_add (struct env_set *es, const char *str)$/;"	f
env_set_add_nolock	src/openvpn/misc.c	/^env_set_add_nolock (struct env_set *es, const char *str)$/;"	f	file:
env_set_add_to_environment	src/openvpn/misc.c	/^env_set_add_to_environment (const struct env_set *es)$/;"	f
env_set_create	src/openvpn/misc.c	/^env_set_create (struct gc_arena *gc)$/;"	f
env_set_del	src/openvpn/misc.c	/^env_set_del (struct env_set *es, const char *str)$/;"	f
env_set_del_nolock	src/openvpn/misc.c	/^env_set_del_nolock (struct env_set *es, const char *str)$/;"	f	file:
env_set_destroy	src/openvpn/misc.c	/^env_set_destroy (struct env_set *es)$/;"	f
env_set_inherit	src/openvpn/misc.c	/^env_set_inherit (struct env_set *es, const struct env_set *src)$/;"	f
env_set_print	src/openvpn/misc.c	/^env_set_print (int msglevel, const struct env_set *es)$/;"	f
env_set_remove_from_environment	src/openvpn/misc.c	/^env_set_remove_from_environment (const struct env_set *es)$/;"	f
env_string_equal	src/openvpn/misc.c	/^env_string_equal (const char *s1, const char *s2)$/;"	f	file:
envp	include/openvpn-plugin.h	/^  const char ** const envp;$/;"	m	struct:openvpn_plugin_args_func_in
envp	include/openvpn-plugin.h	/^  const char ** const envp;$/;"	m	struct:openvpn_plugin_args_open_in
ep_ctl	src/openvpn/event.c	/^ep_ctl (struct event_set *es, event_t event, unsigned int rwflags, void *arg)$/;"	f	file:
ep_del	src/openvpn/event.c	/^ep_del (struct event_set *es, event_t event)$/;"	f	file:
ep_free	src/openvpn/event.c	/^ep_free (struct event_set *es)$/;"	f	file:
ep_init	src/openvpn/event.c	/^ep_init (int *maxevents, unsigned int flags)$/;"	f	file:
ep_reset	src/openvpn/event.c	/^ep_reset (struct event_set *es)$/;"	f	file:
ep_set	src/openvpn/event.c	/^struct ep_set$/;"	s	file:
ep_wait	src/openvpn/event.c	/^ep_wait (struct event_set *es, const struct timeval *tv, struct event_set_return *out, int outlen)$/;"	f	file:
epfd	src/openvpn/event.c	/^  int epfd;$/;"	m	struct:ep_set	file:
err_put_ms_error	src/openvpn/cryptoapi.c	/^static void err_put_ms_error(DWORD ms_err, int func, const char *file, int line)$/;"	f	file:
error	msvc-build.bat	/^:error$/;"	l
error	msvc-dev.bat	/^:error$/;"	l
error	src/openvpn/socket.h	/^  bool error;  \/* if true, fatal TCP error has occurred,$/;"	m	struct:stream_buf
error_reset	src/openvpn/error.c	/^error_reset ()$/;"	f
errors	src/openvpn/status.h	/^  bool errors;$/;"	m	struct:status_output
errors_to_stderr	src/openvpn/error.c	/^errors_to_stderr (void)$/;"	f
es	src/openvpn/manage.h	/^  struct event_set *es;$/;"	m	struct:man_connection	typeref:struct:man_connection::event_set
es	src/openvpn/mtcp.h	/^  struct event_set *es;$/;"	m	struct:multi_tcp	typeref:struct:multi_tcp::event_set
es	src/openvpn/openvpn.h	/^  struct env_set *es;           \/**< Set of environment variables. *\/$/;"	m	struct:context	typeref:struct:context::env_set
es	src/openvpn/openvpn.h	/^  struct env_set *es;$/;"	m	struct:context_2	typeref:struct:context_2::env_set
es	src/openvpn/ssl_common.h	/^  struct env_set *es;$/;"	m	struct:tls_options	typeref:struct:tls_options::env_set
es_owned	src/openvpn/openvpn.h	/^  bool es_owned;$/;"	m	struct:context_2
esr	src/openvpn/event.c	/^  struct event_set_return *esr;$/;"	m	struct:we_set	typeref:struct:we_set::event_set_return	file:
esr	src/openvpn/mtcp.h	/^  struct event_set_return *esr;$/;"	m	struct:multi_tcp	typeref:struct:multi_tcp::event_set_return
establish_http_proxy_passthru	src/openvpn/proxy.c	/^establish_http_proxy_passthru (struct http_proxy_info *p,$/;"	f
establish_socks_proxy_passthru	src/openvpn/socks.c	/^establish_socks_proxy_passthru (struct socks_proxy_info *p,$/;"	f
establish_socks_proxy_udpassoc	src/openvpn/socks.c	/^establish_socks_proxy_udpassoc (struct socks_proxy_info *p,$/;"	f
established	src/openvpn/ssl_common.h	/^  time_t established;		\/* when our state went S_ACTIVE *\/$/;"	m	struct:key_state
et	src/openvpn/status.h	/^  struct event_timeout et;$/;"	m	struct:status_output	typeref:struct:status_output::event_timeout
event_ctl	src/openvpn/event.h	/^event_ctl (struct event_set *es, event_t event, unsigned int rwflags, void *arg)$/;"	f
event_del	src/openvpn/event.h	/^event_del (struct event_set *es, event_t event)$/;"	f
event_free	src/openvpn/event.h	/^event_free (struct event_set *es)$/;"	f
event_mask	src/openvpn/win32.h	/^  long event_mask;$/;"	m	struct:net_event_win32
event_reset	src/openvpn/event.h	/^event_reset (struct event_set *es)$/;"	f
event_set	src/openvpn/event.h	/^struct event_set$/;"	s
event_set	src/openvpn/openvpn.h	/^  struct event_set *event_set;$/;"	m	struct:context_2	typeref:struct:context_2::event_set
event_set_functions	src/openvpn/event.h	/^struct event_set_functions$/;"	s
event_set_init	src/openvpn/event.c	/^event_set_init (int *maxevents, unsigned int flags)$/;"	f
event_set_init_scalable	src/openvpn/event.c	/^event_set_init_scalable (int *maxevents, unsigned int flags)$/;"	f	file:
event_set_init_simple	src/openvpn/event.c	/^event_set_init_simple (int *maxevents, unsigned int flags)$/;"	f	file:
event_set_max	src/openvpn/openvpn.h	/^  int event_set_max;$/;"	m	struct:context_2
event_set_owned	src/openvpn/openvpn.h	/^  bool event_set_owned;$/;"	m	struct:context_2
event_set_return	src/openvpn/event.h	/^struct event_set_return$/;"	s
event_set_return_init	src/openvpn/event.h	/^event_set_return_init (struct event_set_return *esr)$/;"	f
event_set_status	src/openvpn/openvpn.h	/^  unsigned int event_set_status;$/;"	m	struct:context_2
event_t	src/openvpn/event.h	/^typedef const struct rw_handle *event_t;$/;"	t	typeref:struct:rw_handle
event_t	src/openvpn/event.h	/^typedef int event_t;$/;"	t
event_timeout	src/openvpn/interval.h	/^struct event_timeout$/;"	s
event_timeout_clear	src/openvpn/interval.h	/^event_timeout_clear (struct event_timeout* et)$/;"	f
event_timeout_clear_ret	src/openvpn/interval.h	/^event_timeout_clear_ret ()$/;"	f
event_timeout_defined	src/openvpn/interval.h	/^event_timeout_defined (const struct event_timeout* et)$/;"	f
event_timeout_init	src/openvpn/interval.h	/^event_timeout_init (struct event_timeout* et, interval_t n, const time_t local_now)$/;"	f
event_timeout_modify_wakeup	src/openvpn/interval.h	/^event_timeout_modify_wakeup (struct event_timeout* et, interval_t n)$/;"	f
event_timeout_reset	src/openvpn/interval.h	/^event_timeout_reset (struct event_timeout* et)$/;"	f
event_timeout_trigger	src/openvpn/interval.c	/^event_timeout_trigger (struct event_timeout *et,$/;"	f
event_wait	src/openvpn/event.h	/^event_wait (struct event_set *es, const struct timeval *tv, struct event_set_return *out, int outlen)$/;"	f
events	src/openvpn/event.c	/^  HANDLE *events;$/;"	m	struct:we_set	file:
events	src/openvpn/event.c	/^  struct epoll_event *events;$/;"	m	struct:ep_set	typeref:struct:ep_set::epoll_event	file:
events	src/openvpn/event.c	/^  struct pollfd *events;$/;"	m	struct:po_set	typeref:struct:po_set::pollfd	file:
exclude	src/openvpn/pf.h	/^  bool exclude;$/;"	m	struct:ipv4_subnet
exclude	src/openvpn/pf.h	/^  bool exclude;$/;"	m	struct:pf_cn
exit_event	src/openvpnserv/openvpnserv.c	/^static HANDLE exit_event = NULL;$/;"	v	file:
exit_event_initial_state	src/openvpn/options.h	/^  bool exit_event_initial_state;$/;"	m	struct:options
exit_event_name	src/openvpn/options.h	/^  const char *exit_event_name;$/;"	m	struct:options
explicit_exit_notification	src/openvpn/options.h	/^  int explicit_exit_notification;  \/* Explicitly tell peer when we are exiting via OCC_EXIT message *\/$/;"	m	struct:connection_entry
explicit_exit_notification_interval	src/openvpn/openvpn.h	/^  struct event_timeout explicit_exit_notification_interval;$/;"	m	struct:context_2	typeref:struct:context_2::event_timeout
explicit_exit_notification_time_wait	src/openvpn/openvpn.h	/^  time_t explicit_exit_notification_time_wait;$/;"	m	struct:context_2
ext_key_input	src/openvpn/manage.h	/^  struct buffer_list *ext_key_input;$/;"	m	struct:man_connection	typeref:struct:man_connection::buffer_list
ext_key_state	src/openvpn/manage.h	/^  int ext_key_state;$/;"	m	struct:man_connection
external_context	src/openvpn/ssl_polarssl.c	/^struct external_context {$/;"	s	file:
external_key	src/openvpn/ssl_polarssl.h	/^    struct external_context *external_key; \/**< Management external key *\/$/;"	m	struct:tls_root_ctx	typeref:struct:tls_root_ctx::external_context
external_key_len	src/openvpn/ssl_polarssl.c	/^static inline size_t external_key_len(void *vctx)$/;"	f	file:
external_pkcs1_sign	src/openvpn/ssl_polarssl.c	/^static inline int external_pkcs1_sign( void *ctx_voidptr,$/;"	f	file:
extra_buffer	src/openvpn/mtu.h	/^  int extra_buffer;             \/**< Maximum number of bytes that$/;"	m	struct:frame
extra_certs_file	src/openvpn/options.h	/^  const char *extra_certs_file;$/;"	m	struct:options
extra_certs_file_inline	src/openvpn/options.h	/^  const char *extra_certs_file_inline;$/;"	m	struct:options
extra_frame	src/openvpn/mtu.h	/^  int extra_frame;              \/**< Maximum number of bytes that all$/;"	m	struct:frame
extra_link	src/openvpn/mtu.h	/^  int extra_link;               \/**< Maximum number of bytes in excess of$/;"	m	struct:frame
extra_tun	src/openvpn/mtu.h	/^  int extra_tun;                \/**< Maximum number of bytes in excess of$/;"	m	struct:frame
extract_x509_extension	src/openvpn/ssl_verify_openssl.c	/^bool extract_x509_extension(X509 *cert, char *fieldname, char *out, int size)$/;"	f	file:
extract_x509_field_ssl	src/openvpn/ssl_verify_openssl.c	/^extract_x509_field_ssl (X509_NAME *x509, const char *field_name, char *out,$/;"	f	file:
factor	src/openvpn/shaper.h	/^  double factor;$/;"	m	struct:shaper
factor	src/openvpn/shaper.h	/^  int factor;$/;"	m	struct:shaper
fail	tests/t_client.sh	/^fail()$/;"	f
false	sample/sample-plugins/defer/simple.c	64;"	d	file:
false	src/compat/compat-stdbool.h	8;"	d
false	src/openvpnserv/openvpnserv.c	51;"	d	file:
fast	src/openvpn/event.c	/^  bool fast;$/;"	m	struct:ep_set	file:
fast	src/openvpn/event.c	/^  bool fast;$/;"	m	struct:po_set	file:
fast	src/openvpn/event.c	/^  bool fast;$/;"	m	struct:se_set	file:
fast	src/openvpn/event.c	/^  bool fast;$/;"	m	struct:we_set	file:
fast_io	src/openvpn/openvpn.h	/^  bool fast_io;$/;"	m	struct:context_2
fast_io	src/openvpn/options.h	/^  bool fast_io;$/;"	m	struct:options
fd	src/openvpn/packet_id.h	/^  int fd;$/;"	m	struct:packet_id_persist
fd	src/openvpn/status.h	/^  int fd;$/;"	m	struct:status_output
fd	src/openvpn/tun.h	/^  int fd;   \/* file descriptor for TUN\/TAP dev *\/$/;"	m	struct:tuntap
file	src/openvpn/dhcp.h	/^  uint8_t  file[128];  \/* boot file name *\/$/;"	m	struct:dhcp
file	src/openvpn/pool.h	/^  struct status_output *file;$/;"	m	struct:ifconfig_pool_persist	typeref:struct:ifconfig_pool_persist::status_output
file_last_mod	src/openvpn/pf.h	/^  time_t file_last_mod;$/;"	m	struct:pf_context
filename	src/openvpn/misc.h	/^  const char *filename;$/;"	m	struct:pid_state
filename	src/openvpn/packet_id.h	/^  const char *filename;$/;"	m	struct:packet_id_persist
filename	src/openvpn/pf.h	/^  char *filename;$/;"	m	struct:pf_context
filename	src/openvpn/status.h	/^  char *filename;$/;"	m	struct:status_output
find_certificate_in_store	src/openvpn/cryptoapi.c	/^static const CERT_CONTEXT *find_certificate_in_store(const char *cert_prop, HCERTSTORE cert_store)$/;"	f	file:
finish	src/openvpn/cryptoapi.c	/^static int finish(RSA *rsa)$/;"	f	file:
first_block	src/openvpn/ssl_polarssl.h	/^    buffer_entry *first_block;$/;"	m	struct:__anon8
first_time	src/openvpn/openvpn.h	/^  bool first_time;              \/**< True on the first iteration of$/;"	m	struct:context
fixed	src/openvpn/pool.h	/^  bool fixed;$/;"	m	struct:ifconfig_pool_entry
fixed	src/openvpn/pool.h	/^  bool fixed;$/;"	m	struct:ifconfig_pool_persist
fixup_key	src/openvpn/crypto.c	/^fixup_key (struct key *key, const struct key_type *kt)$/;"	f
flags	src/openvpn/crypto.h	/^  unsigned int flags;           \/**< Bit-flags determining behavior of$/;"	m	struct:crypto_options
flags	src/openvpn/dhcp.h	/^  uint16_t flags;$/;"	m	struct:dhcp
flags	src/openvpn/lzo.h	/^  unsigned int flags;$/;"	m	struct:lzo_compress_workspace
flags	src/openvpn/manage.h	/^  unsigned int flags; \/* MF_x flags *\/$/;"	m	struct:man_settings
flags	src/openvpn/manage.h	/^  unsigned int flags;$/;"	m	struct:man_def_auth_context
flags	src/openvpn/manage.h	/^  unsigned int flags;$/;"	m	struct:management_callback
flags	src/openvpn/mbuf.h	/^  unsigned int flags;$/;"	m	struct:mbuf_buffer
flags	src/openvpn/misc.h	/^  unsigned int flags;$/;"	m	struct:auth_challenge_info
flags	src/openvpn/misc.h	/^  unsigned int flags;$/;"	m	struct:static_challenge_info
flags	src/openvpn/mtcp.c	/^  unsigned int flags;$/;"	m	struct:ta_iow_flags	file:
flags	src/openvpn/multi.h	/^  unsigned int flags;$/;"	m	struct:multi_route
flags	src/openvpn/options.h	/^  unsigned int flags;$/;"	m	struct:connection_entry
flags	src/openvpn/proto.h	/^  uint8_t       flags;$/;"	m	struct:openvpn_tcphdr
flags	src/openvpn/route.h	/^  unsigned int flags;     \/* RG_x flags *\/$/;"	m	struct:route_list
flags	src/openvpn/route.h	/^  unsigned int flags;  \/* RG_x flags *\/$/;"	m	struct:route_option_list
flags	src/openvpn/route.h	/^  unsigned int flags;$/;"	m	struct:route_gateway_info
flags	src/openvpn/route.h	/^  unsigned int flags;$/;"	m	struct:route_ipv4
flags	src/openvpn/route.h	/^  unsigned int flags;$/;"	m	struct:route_ipv6_list
flags	src/openvpn/route.h	/^  unsigned int flags;$/;"	m	struct:route_ipv6_option_list
flags	src/openvpn/route.h	/^  unsigned int flags;$/;"	m	struct:route_special_addr
flags	src/openvpn/ssl_verify.h	/^  unsigned int flags;$/;"	m	struct:x509_track
flags	src/openvpn/status.h	/^  unsigned int flags;$/;"	m	struct:status_output
flags	src/openvpn/win32.h	/^  DWORD flags;$/;"	m	struct:overlapped_io
flags_default	src/openvpn/status.h	/^  unsigned int flags_default;$/;"	m	struct:virtual_output
flip	src/openvpn/gremlin.c	/^static bool flip(int n) {$/;"	f	file:
flow_lbl	src/openvpn/proto.h	/^        uint8_t		flow_lbl[3];$/;"	m	struct:openvpn_ipv6hdr
flush_payload_buffer	src/openvpn/ssl.c	/^flush_payload_buffer (struct key_state *ks)$/;"	f	file:
force_connection_list	src/openvpn/options.h	/^  bool force_connection_list;$/;"	m	struct:options
foreground_fd	src/openvpn/ps.h	/^  socket_descriptor_t foreground_fd;$/;"	m	struct:port_share
foreground_fd	src/plugins/auth-pam/auth-pam.c	/^  int foreground_fd;$/;"	m	struct:auth_pam_context	file:
foreground_fd	src/plugins/down-root/down-root.c	/^  int foreground_fd;$/;"	m	struct:down_root_context	file:
foreign_network	src/openvpn/clinat.h	/^  in_addr_t foreign_network;$/;"	m	struct:client_nat_entry
foreign_option	src/openvpn/options.c	/^foreign_option (struct options *o, char *argv[], int len, struct env_set *es)$/;"	f	file:
foreign_option_index	src/openvpn/options.h	/^  int foreign_option_index;$/;"	m	struct:options
foreign_option_index	src/openvpn/options.h	/^  int foreign_option_index;$/;"	m	struct:options_pre_pull
fork_dhcp_action	src/openvpn/tun.c	/^fork_dhcp_action (struct tuntap *tt)$/;"	f	file:
fork_register_dns_action	src/openvpn/tun.c	/^fork_register_dns_action (struct tuntap *tt)$/;"	f
fork_to_self	src/openvpn/win32.c	/^fork_to_self (const char *cmdline)$/;"	f
forked	src/openvpn/error.c	/^static bool forked;         \/* GLOBAL *\/$/;"	v	file:
format_common_name	src/openvpn/init.c	/^format_common_name (struct context *c, struct gc_arena *gc)$/;"	f
format_extended_socket_error	src/openvpn/mtu.c	/^format_extended_socket_error (int fd, int *mtu, struct gc_arena *gc)$/;"	f
format_hex	src/openvpn/buffer.h	/^format_hex (const uint8_t *data, int size, int maxoutput, struct gc_arena *gc)$/;"	f
format_hex_ex	src/openvpn/buffer.c	/^format_hex_ex (const uint8_t *data, int size, int maxoutput,$/;"	f
format_ip_addr_string	src/openvpn/tun.c	/^format_ip_addr_string (const IP_ADDR_STRING *ip, struct gc_arena *gc)$/;"	f	file:
format_route_entry	src/openvpn/route.c	/^format_route_entry (const MIB_IPFORWARDROW *r, struct gc_arena *gc)$/;"	f	file:
forward_compatible	src/openvpn/options.h	/^  bool forward_compatible;$/;"	m	struct:options
fp	src/openvpn/misc.h	/^  FILE *fp;$/;"	m	struct:pid_state
fp	src/openvpn/options.c	/^    FILE *fp;$/;"	m	union:in_src::__anon3	file:
frag_off	src/openvpn/proto.h	/^  uint16_t   frag_off;$/;"	m	struct:openvpn_iphdr
fragment	src/openvpn/fragment.h	/^struct fragment {$/;"	s
fragment	src/openvpn/openvpn.h	/^  struct fragment_master *fragment;$/;"	m	struct:context_2	typeref:struct:context_2::fragment_master
fragment	src/openvpn/options.h	/^  int fragment;          \/* internal fragmentation size *\/$/;"	m	struct:connection_entry
fragment_frame_init	src/openvpn/fragment.c	/^fragment_frame_init (struct fragment_master *f, const struct frame *frame)$/;"	f
fragment_free	src/openvpn/fragment.c	/^fragment_free (struct fragment_master *f)$/;"	f
fragment_header_format	src/openvpn/common.h	62;"	d
fragment_header_type	src/openvpn/fragment.h	/^typedef uint32_t fragment_header_type;$/;"	t
fragment_housekeeping	src/openvpn/fragment.h	/^fragment_housekeeping (struct fragment_master *f, struct frame *frame, struct timeval *tv)$/;"	f
fragment_incoming	src/openvpn/fragment.c	/^fragment_incoming (struct fragment_master *f, struct buffer *buf,$/;"	f
fragment_init	src/openvpn/fragment.c	/^fragment_init (struct frame *frame)$/;"	f
fragment_list	src/openvpn/fragment.h	/^struct fragment_list {$/;"	s
fragment_list_buf_free	src/openvpn/fragment.c	/^fragment_list_buf_free (struct fragment_list *list)$/;"	f	file:
fragment_list_buf_init	src/openvpn/fragment.c	/^fragment_list_buf_init (struct fragment_list *list, const struct frame *frame)$/;"	f	file:
fragment_list_get_buf	src/openvpn/fragment.c	/^fragment_list_get_buf (struct fragment_list *list, int seq_id)$/;"	f	file:
fragment_master	src/openvpn/fragment.h	/^struct fragment_master {$/;"	s
fragment_outgoing	src/openvpn/fragment.c	/^fragment_outgoing (struct fragment_master *f, struct buffer *buf,$/;"	f
fragment_outgoing_defined	src/openvpn/fragment.h	/^fragment_outgoing_defined (struct fragment_master *f)$/;"	f
fragment_prepend_flags	src/openvpn/fragment.c	/^fragment_prepend_flags (struct buffer *buf,$/;"	f	file:
fragment_ready_to_send	src/openvpn/fragment.c	/^fragment_ready_to_send (struct fragment_master *f, struct buffer *buf,$/;"	f
fragment_ttl_reap	src/openvpn/fragment.c	/^fragment_ttl_reap (struct fragment_master *f)$/;"	f	file:
fragment_wakeup	src/openvpn/fragment.c	/^fragment_wakeup (struct fragment_master *f, struct frame *frame)$/;"	f
fragments	src/openvpn/fragment.h	/^  struct fragment fragments[N_FRAG_BUF];$/;"	m	struct:fragment_list	typeref:struct:fragment_list::fragment
frame	src/openvpn/mtu.h	/^struct frame {$/;"	s
frame	src/openvpn/openvpn.h	/^  struct frame frame;$/;"	m	struct:context_2	typeref:struct:context_2::frame
frame	src/openvpn/ssl.h	/^  struct frame frame;$/;"	m	struct:tls_auth_standalone	typeref:struct:tls_auth_standalone::frame
frame	src/openvpn/ssl_common.h	/^  struct frame frame;$/;"	m	struct:tls_options	typeref:struct:tls_options::frame
frame_add_to_align_adjust	src/openvpn/mtu.h	/^frame_add_to_align_adjust (struct frame *frame, const int increment)$/;"	f
frame_add_to_extra_buffer	src/openvpn/mtu.h	/^frame_add_to_extra_buffer (struct frame *frame, const int increment)$/;"	f
frame_add_to_extra_frame	src/openvpn/mtu.h	/^frame_add_to_extra_frame (struct frame *frame, const int increment)$/;"	f
frame_add_to_extra_link	src/openvpn/mtu.h	/^frame_add_to_extra_link (struct frame *frame, const int increment)$/;"	f
frame_add_to_extra_tun	src/openvpn/mtu.h	/^frame_add_to_extra_tun (struct frame *frame, const int increment)$/;"	f
frame_adjust_path_mtu	src/openvpn/socket.c	/^frame_adjust_path_mtu (struct frame *frame, int pmtu, int proto)$/;"	f
frame_align_to_extra_frame	src/openvpn/mtu.h	/^frame_align_to_extra_frame (struct frame *frame)$/;"	f
frame_defined	src/openvpn/mtu.h	/^frame_defined (const struct frame *frame)$/;"	f
frame_finalize	src/openvpn/mtu.c	/^frame_finalize (struct frame *frame,$/;"	f
frame_finalize_options	src/openvpn/init.c	/^frame_finalize_options (struct context *c, const struct options *o)$/;"	f	file:
frame_fragment	src/openvpn/openvpn.h	/^  struct frame frame_fragment;$/;"	m	struct:context_2	typeref:struct:context_2::frame
frame_fragment_omit	src/openvpn/openvpn.h	/^  struct frame frame_fragment_omit;$/;"	m	struct:context_2	typeref:struct:context_2::frame
frame_headroom	src/openvpn/mtu.h	/^frame_headroom (const struct frame *f, const unsigned int flag_mask)$/;"	f
frame_or_align_flags	src/openvpn/mtu.h	/^frame_or_align_flags (struct frame *frame, const unsigned int flag_mask)$/;"	f
frame_print	src/openvpn/mtu.c	/^frame_print (const struct frame *frame,$/;"	f
frame_set_mtu_dynamic	src/openvpn/mtu.c	/^frame_set_mtu_dynamic (struct frame *frame, int mtu, unsigned int flags)$/;"	f
frame_subtract_extra	src/openvpn/mtu.c	/^frame_subtract_extra (struct frame *frame, const struct frame *src)$/;"	f
free	src/openvpn/event.h	/^  void (*free)(struct event_set *es);$/;"	m	struct:event_set_functions
free_buf	src/openvpn/buffer.c	/^free_buf (struct buffer *buf)$/;"	f
free_context	src/plugins/down-root/down-root.c	/^free_context (struct down_root_context *context)$/;"	f	file:
free_context_buffers	src/openvpn/init.c	/^free_context_buffers (struct context_buffers *b)$/;"	f
free_crypt_prov	src/openvpn/cryptoapi.c	/^    BOOL free_crypt_prov;$/;"	m	struct:_CAPI_DATA	file:
free_key_ctx	src/openvpn/crypto.c	/^free_key_ctx (struct key_ctx *ctx)$/;"	f
free_key_ctx_bi	src/openvpn/crypto.c	/^free_key_ctx_bi (struct key_ctx_bi *ctx)$/;"	f
free_ssl_lib	src/openvpn/crypto.c	/^free_ssl_lib (void)$/;"	f
free_ssl_lib	src/openvpn/ssl.c	/^free_ssl_lib ()$/;"	f
freebsd_modify_read_write_return	src/openvpn/tun.c	/^freebsd_modify_read_write_return (int len)$/;"	f	file:
frequency_limit	src/openvpn/otime.h	/^struct frequency_limit$/;"	s
frequency_limit_event_allowed	src/openvpn/otime.c	/^frequency_limit_event_allowed (struct frequency_limit *f)$/;"	f
frequency_limit_free	src/openvpn/otime.c	/^frequency_limit_free (struct frequency_limit *f)$/;"	f
frequency_limit_init	src/openvpn/otime.c	/^frequency_limit_init (int max, int per)$/;"	f
from	src/openvpn/openvpn.h	/^  struct link_socket_actual from;               \/* address of incoming datagram *\/$/;"	m	struct:context_2	typeref:struct:context_2::link_socket_actual
func	src/openvpn/event.c	/^  struct event_set_functions func;$/;"	m	struct:ep_set	typeref:struct:ep_set::event_set_functions	file:
func	src/openvpn/event.c	/^  struct event_set_functions func;$/;"	m	struct:po_set	typeref:struct:po_set::event_set_functions	file:
func	src/openvpn/event.c	/^  struct event_set_functions func;$/;"	m	struct:se_set	typeref:struct:se_set::event_set_functions	file:
func	src/openvpn/event.c	/^  struct event_set_functions func;$/;"	m	struct:we_set	typeref:struct:we_set::event_set_functions	file:
func	src/openvpn/event.h	/^  struct event_set_functions func;$/;"	m	struct:event_set	typeref:struct:event_set::event_set_functions
func	src/openvpn/status.h	/^  void (*func) (void *arg, const unsigned int flags, const char *str);$/;"	m	struct:virtual_output
func1	src/openvpn/plugin.h	/^  openvpn_plugin_func_v1 func1;$/;"	m	struct:plugin
func2	src/openvpn/plugin.h	/^  openvpn_plugin_func_v2 func2;$/;"	m	struct:plugin
func3	src/openvpn/plugin.h	/^  openvpn_plugin_func_v3 func3;$/;"	m	struct:plugin
func_append	configure	/^func_append ()\\$/;"	f
func_append	ltmain.sh	/^func_append ()$/;"	f
func_append_quoted	configure	/^func_append_quoted ()\\$/;"	f
func_append_quoted	ltmain.sh	/^func_append_quoted ()$/;"	f
func_arith	configure	/^func_arith ()\\$/;"	f
func_arith	ltmain.sh	/^func_arith ()$/;"	f
func_basename	configure	/^func_basename ()\\$/;"	f
func_basename	ltmain.sh	/^func_basename ()$/;"	f
func_check_version_match	ltmain.sh	/^func_check_version_match ()$/;"	f
func_cl_dashL	compile	/^func_cl_dashL ()$/;"	f
func_cl_dashl	compile	/^func_cl_dashl ()$/;"	f
func_cl_wrapper	compile	/^func_cl_wrapper ()$/;"	f
func_config	ltmain.sh	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	ltmain.sh	/^func_cygpath ()$/;"	f
func_dirname	configure	/^func_dirname ()\\$/;"	f
func_dirname	ltmain.sh	/^func_dirname ()$/;"	f
func_dirname_and_basename	configure	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_echo	ltmain.sh	/^func_echo ()$/;"	f
func_echo_all	configure	/^func_echo_all ()$/;"	f
func_echo_all	ltmain.sh	/^func_echo_all ()$/;"	f
func_emit_cwrapperexe_src	ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_enable_tag	ltmain.sh	/^func_enable_tag ()$/;"	f
func_error	ltmain.sh	/^func_error ()$/;"	f
func_exec_program	ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program_core	ltmain.sh	/^func_exec_program_core ()$/;"	f
func_execute_cmds	ltmain.sh	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_archives	ltmain.sh	/^func_extract_archives ()$/;"	f
func_fallback_echo	configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_error	ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_help	ltmain.sh	/^func_fatal_help ()$/;"	f
func_features	ltmain.sh	/^func_features ()$/;"	f
func_file_conv	compile	/^func_file_conv ()$/;"	f
func_generate_dlsyms	ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_grep	ltmain.sh	/^func_grep ()$/;"	f
func_help	ltmain.sh	/^func_help ()$/;"	f
func_infer_tag	ltmain.sh	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_len	configure	/^func_len ()\\$/;"	f
func_len	ltmain.sh	/^func_len ()$/;"	f
func_lo2o	configure	/^func_lo2o ()\\$/;"	f
func_lo2o	ltmain.sh	/^func_lo2o ()$/;"	f
func_lt_dump_args	ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_ltwrapper_executable_p	ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	ltmain.sh	/^func_missing_arg ()$/;"	f
func_mkdir_p	ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mktempdir	ltmain.sh	/^func_mktempdir ()$/;"	f
func_mode_compile	ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_execute	ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_finish	ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_help	ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_install	ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_link	ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_uninstall	ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_normal_abspath	ltmain.sh	/^func_normal_abspath ()$/;"	f
func_parse_lt_options	ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_quote_for_eval	ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_relative_path	ltmain.sh	/^func_relative_path ()$/;"	f
func_replace_sysroot	ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_resolve_sysroot	ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_show_eval	ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval_locale	ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_source	ltmain.sh	/^func_source ()$/;"	f
func_split_long_opt	configure	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	ltmain.sh	/^func_split_long_opt ()$/;"	f
func_split_short_opt	configure	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	ltmain.sh	/^func_split_short_opt ()$/;"	f
func_stripname	configure	/^func_stripname ()\\$/;"	f
func_stripname	ltmain.sh	/^func_stripname ()$/;"	f
func_to_host_file	ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_path	ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_tool_file	ltmain.sh	/^func_to_tool_file ()$/;"	f
func_tr_sh	ltmain.sh	/^func_tr_sh ()$/;"	f
func_usage	ltmain.sh	/^func_usage ()$/;"	f
func_verbose	ltmain.sh	/^func_verbose ()$/;"	f
func_version	ltmain.sh	/^func_version ()$/;"	f
func_warning	ltmain.sh	/^func_warning ()$/;"	f
func_win32_import_lib_p	ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	ltmain.sh	/^func_win32_libid ()$/;"	f
func_write_libtool_object	ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_xform	configure	/^func_xform ()\\$/;"	f
func_xform	ltmain.sh	/^func_xform ()$/;"	f
future_trigger	src/openvpn/interval.h	/^  time_t future_trigger;$/;"	m	struct:interval
gateway	src/openvpn/route.h	/^  const char *gateway;		\/* e.g. "2001:db8:0::2" *\/$/;"	m	struct:route_ipv6_option
gateway	src/openvpn/route.h	/^  const char *gateway;$/;"	m	struct:route_option
gateway	src/openvpn/route.h	/^  in_addr_t gateway;$/;"	m	struct:route_ipv4
gateway	src/openvpn/route.h	/^  struct in6_addr gateway;$/;"	m	struct:route_ipv6	typeref:struct:route_ipv6::in6_addr
gateway	src/openvpn/route.h	/^  struct route_gateway_address gateway;$/;"	m	struct:route_gateway_info	typeref:struct:route_gateway_info::route_gateway_address
gc	src/openvpn/misc.h	/^  struct gc_arena *gc;$/;"	m	struct:env_set	typeref:struct:env_set::gc_arena
gc	src/openvpn/multi.h	/^  struct gc_arena gc;$/;"	m	struct:multi_instance	typeref:struct:multi_instance::gc_arena
gc	src/openvpn/openvpn.h	/^  struct gc_arena gc;           \/**< Garbage collection arena for$/;"	m	struct:context	typeref:struct:context::gc_arena
gc	src/openvpn/openvpn.h	/^  struct gc_arena gc;           \/**< Garbage collection arena for$/;"	m	struct:context_2	typeref:struct:context_2::gc_arena
gc	src/openvpn/options.h	/^  struct gc_arena gc;$/;"	m	struct:options	typeref:struct:options::gc_arena
gc_arena	src/openvpn/buffer.h	/^struct gc_arena$/;"	s
gc_defined	src/openvpn/buffer.h	/^gc_defined (struct gc_arena *a)$/;"	f
gc_detach	src/openvpn/buffer.h	/^gc_detach (struct gc_arena *a)$/;"	f
gc_entry	src/openvpn/buffer.h	/^struct gc_entry$/;"	s
gc_free	src/openvpn/buffer.h	/^gc_free (struct gc_arena *a)$/;"	f
gc_init	src/openvpn/buffer.h	/^gc_init (struct gc_arena *a)$/;"	f
gc_malloc	src/openvpn/buffer.h	144;"	d
gc_malloc_debug	src/openvpn/buffer.c	/^gc_malloc_debug (size_t size, bool clear, struct gc_arena *a, const char *file, int line)$/;"	f
gc_new	src/openvpn/buffer.h	/^gc_new (void)$/;"	f
gc_owned	src/openvpn/options.h	/^  bool gc_owned;$/;"	m	struct:options
gc_reset	src/openvpn/buffer.h	/^gc_reset (struct gc_arena *a)$/;"	f
gc_transfer	src/openvpn/buffer.c	/^gc_transfer (struct gc_arena *dest, struct gc_arena *src)$/;"	f
gen_hmac_md5	src/openvpn/ntlm.c	/^gen_hmac_md5 (const char* data, int data_len, const char* key, int key_len,char *result)$/;"	f	file:
gen_md4_hash	src/openvpn/ntlm.c	/^gen_md4_hash (const char* data, int data_len, char *result)$/;"	f	file:
gen_nonce	src/openvpn/ntlm.c	/^gen_nonce (unsigned char *nonce)$/;"	f	file:
gen_path	src/openvpn/misc.c	/^gen_path (const char *directory, const char *filename, struct gc_arena *gc)$/;"	f
gen_timestamp	src/openvpn/ntlm.c	/^gen_timestamp (unsigned char *timestamp)$/;"	f	file:
generate_ifconfig_broadcast_addr	src/openvpn/tun.c	/^generate_ifconfig_broadcast_addr (in_addr_t local,$/;"	f	file:
generate_key_expansion	src/openvpn/ssl.c	/^generate_key_expansion (struct key_ctx_bi *key,$/;"	f	file:
generate_key_random	src/openvpn/crypto.c	/^generate_key_random (struct key *key, const struct key_type *kt)$/;"	f
generate_prefix	src/openvpn/multi.c	/^generate_prefix (struct multi_instance *mi)$/;"	f
generated_pf_file	sample/sample-plugins/defer/simple.c	/^  bool generated_pf_file;$/;"	m	struct:plugin_per_client_context	file:
genhash	src/openvpn/pf.c	/^genhash (struct pf_cn_set *cns, const char *prefix, const int n_clients)$/;"	f	file:
genkey	src/openvpn/options.h	/^  bool genkey;$/;"	m	struct:options
get_adapter	src/openvpn/tun.c	/^get_adapter (const IP_ADAPTER_INFO *ai, DWORD index)$/;"	f
get_adapter_index	src/openvpn/tun.c	/^get_adapter_index (const char *guid)$/;"	f	file:
get_adapter_index_flexible	src/openvpn/tun.c	/^get_adapter_index_flexible (const char *name) \/* actual name or GUID *\/$/;"	f	file:
get_adapter_index_method_1	src/openvpn/tun.c	/^get_adapter_index_method_1 (const char *guid)$/;"	f	file:
get_adapter_index_method_2	src/openvpn/tun.c	/^get_adapter_index_method_2 (const char *guid)$/;"	f	file:
get_adapter_info	src/openvpn/tun.c	/^get_adapter_info (DWORD index, struct gc_arena *gc)$/;"	f
get_adapter_info_list	src/openvpn/tun.c	/^get_adapter_info_list (struct gc_arena *gc)$/;"	f
get_adapter_ip_netmask	src/openvpn/tun.c	/^get_adapter_ip_netmask (const IP_ADAPTER_INFO *ai, const int n, in_addr_t *ip, in_addr_t *netmask)$/;"	f	file:
get_adapter_n_ip_netmask	src/openvpn/tun.c	/^get_adapter_n_ip_netmask (const IP_ADAPTER_INFO *ai)$/;"	f	file:
get_auth_challenge	src/openvpn/misc.c	/^get_auth_challenge (const char *auth_challenge, struct gc_arena *gc)$/;"	f
get_bypass_addresses	src/openvpn/route.c	/^get_bypass_addresses (struct route_bypass *rb, const unsigned int flags)  \/* PLATFORM-SPECIFIC *\/$/;"	f	file:
get_bypass_addresses	src/openvpn/route.c	/^get_bypass_addresses (struct route_bypass *rb, const unsigned int flags)$/;"	f	file:
get_cipher_name_pair	src/openvpn/crypto_polarssl.c	/^get_cipher_name_pair(const char *cipher_name) {$/;"	f
get_console_input	src/openvpn/console.c	/^get_console_input (const char *prompt, const bool echo, char *input, const int capacity)$/;"	f
get_console_input_systemd	src/openvpn/console.c	/^get_console_input_systemd (const char *prompt, const bool echo, char *input, const int capacity)$/;"	f	file:
get_console_input_win32	src/openvpn/console.c	/^get_console_input_win32 (const char *prompt, const bool echo, char *input, const int capacity)$/;"	f	file:
get_debug_level	src/openvpn/error.c	/^get_debug_level (void)$/;"	f
get_default_gateway	src/openvpn/route.c	/^get_default_gateway (struct route_gateway_info *rgi)$/;"	f
get_default_gateway_row	src/openvpn/route.c	/^get_default_gateway_row (const MIB_IPFORWARDTABLE *routes)$/;"	f	file:
get_device_guid	src/openvpn/tun.c	/^get_device_guid (const char *name,$/;"	f	file:
get_dhcp_message_type	src/openvpn/dhcp.c	/^get_dhcp_message_type (const struct dhcp *dhcp, const int optlen)$/;"	f	file:
get_env	sample/sample-plugins/defer/simple.c	/^get_env (const char *name, const char *envp[])$/;"	f	file:
get_env	sample/sample-plugins/log/log.c	/^get_env (const char *name, const char *envp[])$/;"	f	file:
get_env	sample/sample-plugins/log/log_v3.c	/^get_env (const char *name, const char *envp[])$/;"	f	file:
get_env	sample/sample-plugins/simple/simple.c	/^get_env (const char *name, const char *envp[])$/;"	f	file:
get_env	src/plugins/auth-pam/auth-pam.c	/^get_env (const char *name, const char *envp[])$/;"	f	file:
get_env	src/plugins/down-root/down-root.c	/^get_env (const char *name, const char *envp[])$/;"	f	file:
get_highest_preference_tls_cipher	src/openvpn/ssl_openssl.c	/^get_highest_preference_tls_cipher (char *buf, int size)$/;"	f
get_highest_preference_tls_cipher	src/openvpn/ssl_polarssl.c	/^get_highest_preference_tls_cipher (char *buf, int size)$/;"	f
get_ifconfig_route	tests/t_client.sh	/^get_ifconfig_route()$/;"	f
get_interface_info	src/openvpn/tun.c	/^get_interface_info (DWORD index, struct gc_arena *gc)$/;"	f	file:
get_interface_info_list	src/openvpn/tun.c	/^get_interface_info_list (struct gc_arena *gc)$/;"	f	file:
get_ip_addr	src/openvpn/options.c	/^get_ip_addr (const char *ip_string, int msglevel, bool *error)$/;"	f	file:
get_ipv6_addr	src/openvpn/options.c	/^get_ipv6_addr( const char * prefix_str, struct in6_addr *network,$/;"	f
get_key_value	src/openvpn/proxy.c	/^get_key_value(const char *str,       \/* source string *\/$/;"	f	file:
get_link_socket_info	src/openvpn/forward-inline.h	/^get_link_socket_info (struct context *c)$/;"	f
get_mute_cutoff	src/openvpn/error.c	/^get_mute_cutoff (void)$/;"	f
get_orig_stderr	src/openvpn/error.c	/^get_orig_stderr (void)$/;"	f
get_pa_var	src/openvpn/proxy.c	/^get_pa_var (const char *key, const char *pa, struct gc_arena *gc)$/;"	f	file:
get_packet_flood_parms	src/openvpn/gremlin.c	/^get_packet_flood_parms (int level)$/;"	f
get_panel_reg	src/openvpn/tun.c	/^get_panel_reg (struct gc_arena *gc)$/;"	f
get_peer_info	src/openvpn/manage.h	/^  char *(*get_peer_info) (void *arg, const unsigned long cid);$/;"	m	struct:management_callback
get_per_adapter_info	src/openvpn/tun.c	/^get_per_adapter_info (const DWORD index, struct gc_arena *gc)$/;"	f
get_perf	src/openvpn/perf.c	/^get_perf (int sdelta)$/;"	f	file:
get_perf_index	src/openvpn/perf.c	/^get_perf_index (int sdelta)$/;"	f	file:
get_pid_file	src/openvpn/misc.c	/^get_pid_file (const char* filename, struct pid_state *state)$/;"	f
get_proxy_authenticate	src/openvpn/proxy.c	/^get_proxy_authenticate (socket_descriptor_t sd,$/;"	f	file:
get_random	src/openvpn/crypto.c	/^get_random()$/;"	f
get_random	src/openvpn/misc.h	177;"	d
get_signal	src/openvpn/sig.h	/^get_signal (volatile int *sig)$/;"	f
get_special_addr	src/openvpn/route.c	/^get_special_addr (const struct route_list *rl,$/;"	f	file:
get_ssl_library_version	src/openvpn/ssl_openssl.c	/^get_ssl_library_version(void)$/;"	f
get_ssl_library_version	src/openvpn/ssl_polarssl.c	/^get_ssl_library_version(void)$/;"	f
get_stack_index	src/openvpn/perf.c	/^get_stack_index (int sdelta)$/;"	f	file:
get_tap_reg	src/openvpn/tun.c	/^get_tap_reg (struct gc_arena *gc)$/;"	f
get_tls_handshake_key	src/openvpn/crypto.c	/^get_tls_handshake_key (const struct key_type *key_type,$/;"	f
get_tun_adapter	src/openvpn/tun.c	/^get_tun_adapter (const struct tuntap *tt, const IP_ADAPTER_INFO *list)$/;"	f
get_unspecified_device_guid	src/openvpn/tun.c	/^get_unspecified_device_guid (const int device_number,$/;"	f	file:
get_user_pass	src/openvpn/misc.h	/^get_user_pass (struct user_pass *up,$/;"	f
get_user_pass_auto_userid	src/openvpn/misc.c	/^get_user_pass_auto_userid (struct user_pass *up, const char *tag)$/;"	f
get_user_pass_cr	src/openvpn/misc.c	/^get_user_pass_cr (struct user_pass *up,$/;"	f
get_user_pass_http	src/openvpn/proxy.c	/^get_user_pass_http (struct http_proxy_info *p, const bool force)$/;"	f	file:
get_win_sys_path	src/openvpn/win32.c	/^get_win_sys_path (void)$/;"	f
get_windows_routing_table	src/openvpn/route.c	/^get_windows_routing_table (struct gc_arena *gc)$/;"	f	file:
getaddr	src/openvpn/socket.c	/^getaddr (unsigned int flags,$/;"	f
getbio	src/openvpn/ssl_openssl.c	/^getbio (BIO_METHOD * type, const char *desc)$/;"	f	file:
gettimeofday	src/compat/compat-gettimeofday.c	/^gettimeofday (struct timeval *tv, void *tz)$/;"	f
gettimeofday_calibrate	src/compat/compat-gettimeofday.c	/^gettimeofday_calibrate (void)$/;"	f	file:
giaddr	src/openvpn/dhcp.h	/^  uint32_t giaddr;     \/* relay agent IP address *\/$/;"	m	struct:dhcp
give_advice	missing	/^give_advice ()$/;"	f
global_auth_retry	src/openvpn/options.c	/^static int global_auth_retry; \/* GLOBAL *\/$/;"	v	file:
global_env	src/openvpn/misc.c	/^static struct env_item *global_env = NULL; \/* GLOBAL *\/$/;"	v	typeref:struct:env_item	file:
gr	src/openvpn/platform.h	/^  struct group *gr;$/;"	m	struct:platform_state_group	typeref:struct:platform_state_group::group
gremlin	src/openvpn/options.h	/^  int gremlin;$/;"	m	struct:options
gremlin	src/openvpn/socket.h	/^  int gremlin; \/* --gremlin bits *\/$/;"	m	struct:link_socket
gremlin	src/openvpn/ssl_common.h	/^  int gremlin;$/;"	m	struct:tls_options
gremlin_flood_clients	src/openvpn/multi.c	/^gremlin_flood_clients (struct multi_context *m)$/;"	f	file:
groupname	src/openvpn/options.h	/^  const char *groupname;$/;"	m	struct:options
groupname	src/openvpn/platform.h	/^  const char *groupname;$/;"	m	struct:platform_state_group
gt	src/openvpn/schedule.h	/^  struct schedule_entry *gt;$/;"	m	struct:schedule_entry	typeref:struct:schedule_entry::schedule_entry
gtc_base	src/compat/compat-gettimeofday.c	/^static time_t gtc_base = 0;$/;"	v	file:
gtc_last	src/compat/compat-gettimeofday.c	/^static DWORD gtc_last = 0;$/;"	v	file:
guess_tuntap_dev	src/openvpn/tun.c	/^guess_tuntap_dev (const char *dev,$/;"	f
guid	src/openvpn/tun.h	/^  const char *guid;$/;"	m	struct:panel_reg
guid	src/openvpn/tun.h	/^  const char *guid;$/;"	m	struct:tap_reg
guid_to_name	src/openvpn/tun.c	/^guid_to_name (const char *guid, const struct panel_reg *panel_reg)$/;"	f	file:
h_errno_msg	src/openvpn/socket.c	/^h_errno_msg(int h_errno_err)$/;"	f	file:
halt	src/openvpn/manage.h	/^  bool halt;$/;"	m	struct:man_connection
halt	src/openvpn/multi.h	/^  bool halt;$/;"	m	struct:multi_instance
halt_non_edge_triggered_signals	src/openvpn/sig.h	/^halt_non_edge_triggered_signals (void)$/;"	f
hand	src/openvpn/tun.h	/^  HANDLE hand;$/;"	m	struct:tuntap
hand	src/openvpn/win32.h	/^  HANDLE hand;$/;"	m	struct:semaphore
handle	include/openvpn-plugin.h	/^  openvpn_plugin_handle_t *handle;$/;"	m	struct:openvpn_plugin_args_open_return
handle	include/openvpn-plugin.h	/^  openvpn_plugin_handle_t handle;$/;"	m	struct:openvpn_plugin_args_func_in
handle	src/openvpn/plugin.h	/^  void *handle;$/;"	m	struct:plugin
handle	src/openvpn/win32.h	/^  struct rw_handle handle;$/;"	m	struct:net_event_win32	typeref:struct:net_event_win32::rw_handle
handshake_window	src/openvpn/options.h	/^  int handshake_window;$/;"	m	struct:options
handshake_window	src/openvpn/ssl_common.h	/^  int handshake_window;$/;"	m	struct:tls_options
hard	src/openvpn/sig.h	/^  volatile bool hard;$/;"	m	struct:signal_info
has_digit	src/openvpn/buffer.h	/^has_digit (const unsigned char* src)$/;"	f
hash	src/openvpn/list.h	/^  struct hash *hash;$/;"	m	struct:hash_iterator	typeref:struct:hash_iterator::hash
hash	src/openvpn/list.h	/^struct hash$/;"	s
hash	src/openvpn/multi.h	/^  struct hash *hash;            \/**< VPN tunnel instances indexed by real$/;"	m	struct:multi_context	typeref:struct:multi_context::hash
hash_add	src/openvpn/list.c	/^hash_add (struct hash *hash, const void *key, void *value, bool replace)$/;"	f
hash_add_fast	src/openvpn/list.h	/^hash_add_fast (struct hash *hash,$/;"	f
hash_bucket	src/openvpn/list.h	/^hash_bucket (struct hash *hash, uint32_t hv)$/;"	f
hash_bucket	src/openvpn/list.h	/^struct hash_bucket$/;"	s
hash_element	src/openvpn/list.h	/^struct hash_element$/;"	s
hash_free	src/openvpn/list.c	/^hash_free (struct hash *hash)$/;"	f
hash_func	src/openvpn/list.c	/^hash_func (const uint8_t *k, uint32_t length, uint32_t initval)$/;"	f
hash_function	src/openvpn/list.h	/^  uint32_t (*hash_function)(const void *key, uint32_t iv);$/;"	m	struct:hash
hash_init	src/openvpn/list.c	/^hash_init (const int n_buckets,$/;"	f
hash_iterator	src/openvpn/list.h	/^struct hash_iterator$/;"	s
hash_iterator_advance	src/openvpn/list.c	/^hash_iterator_advance (struct hash_iterator *hi)$/;"	f	file:
hash_iterator_delete_element	src/openvpn/list.c	/^hash_iterator_delete_element (struct hash_iterator *hi)$/;"	f
hash_iterator_free	src/openvpn/list.c	/^hash_iterator_free (struct hash_iterator *hi)$/;"	f
hash_iterator_init	src/openvpn/list.c	/^hash_iterator_init (struct hash *hash,$/;"	f
hash_iterator_init_range	src/openvpn/list.c	/^hash_iterator_init_range (struct hash *hash,$/;"	f
hash_iterator_lock	src/openvpn/list.c	/^hash_iterator_lock (struct hash_iterator *hi, struct hash_bucket *b)$/;"	f	file:
hash_iterator_next	src/openvpn/list.c	/^hash_iterator_next (struct hash_iterator *hi)$/;"	f
hash_iterator_unlock	src/openvpn/list.c	/^hash_iterator_unlock (struct hash_iterator *hi)$/;"	f	file:
hash_lookup	src/openvpn/list.h	/^hash_lookup (struct hash *hash, const void *key)$/;"	f
hash_lookup_fast	src/openvpn/list.c	/^hash_lookup_fast (struct hash *hash,$/;"	f
hash_n_buckets	src/openvpn/list.h	/^hash_n_buckets (const struct hash *hash)$/;"	f
hash_n_elements	src/openvpn/list.h	/^hash_n_elements (const struct hash *hash)$/;"	f
hash_remove	src/openvpn/list.h	/^hash_remove (struct hash *hash, const void *key)$/;"	f
hash_remove_by_value	src/openvpn/list.c	/^hash_remove_by_value (struct hash *hash, void *value)$/;"	f
hash_remove_fast	src/openvpn/list.c	/^hash_remove_fast (struct hash *hash,$/;"	f
hash_remove_marked	src/openvpn/list.c	/^hash_remove_marked (struct hash *hash, struct hash_bucket *bucket)$/;"	f	file:
hash_table	src/openvpn/pf.h	/^  struct hash *hash_table;$/;"	m	struct:pf_cn_set	typeref:struct:pf_cn_set::hash
hash_value	src/openvpn/list.h	/^  unsigned int hash_value;$/;"	m	struct:hash_element
hash_value	src/openvpn/list.h	/^hash_value (const struct hash *hash, const void *key)$/;"	f
hashmask	src/openvpn/list.h	46;"	d
hashsize	src/openvpn/list.h	45;"	d
head	src/openvpn/buffer.h	/^  struct buffer_entry *head; \/* next item to pop\/peek *\/$/;"	m	struct:buffer_list	typeref:struct:buffer_list::buffer_entry
head	src/openvpn/mbuf.h	/^  unsigned int head;$/;"	m	struct:mbuf_set
head	src/openvpn/pushlist.h	/^  struct push_entry *head;$/;"	m	struct:push_list	typeref:struct:push_list::push_entry
header_modify_read_write_return	src/openvpn/tun.c	/^header_modify_read_write_return (int len)$/;"	f	file:
helper_add_route	src/openvpn/helper.c	/^helper_add_route (const in_addr_t network, const in_addr_t netmask, struct options *o)$/;"	f	file:
helper_client_server	src/openvpn/helper.c	/^helper_client_server (struct options *o)$/;"	f
helper_keepalive	src/openvpn/helper.c	/^helper_keepalive (struct options *o)$/;"	f
helper_tcp_nodelay	src/openvpn/helper.c	/^helper_tcp_nodelay (struct options *o)$/;"	f
hlen	src/openvpn/dhcp.h	/^  uint8_t  hlen;       \/* hardware address length (e.g. '6' for 10Mb Ethernet) *\/$/;"	m	struct:dhcp
hmac	src/openvpn/crypto.h	/^  hmac_ctx_t *hmac;               \/**< Generic HMAC %context. *\/$/;"	m	struct:key_ctx
hmac	src/openvpn/crypto.h	/^  uint8_t hmac[MAX_HMAC_KEY_LENGTH];$/;"	m	struct:key
hmac_ctx_cleanup	src/openvpn/crypto_openssl.c	/^hmac_ctx_cleanup(HMAC_CTX *ctx)$/;"	f
hmac_ctx_cleanup	src/openvpn/crypto_polarssl.c	/^hmac_ctx_cleanup(md_context_t *ctx)$/;"	f
hmac_ctx_final	src/openvpn/crypto_openssl.c	/^hmac_ctx_final (HMAC_CTX *ctx, uint8_t *dst)$/;"	f
hmac_ctx_final	src/openvpn/crypto_polarssl.c	/^hmac_ctx_final (md_context_t *ctx, uint8_t *dst)$/;"	f
hmac_ctx_init	src/openvpn/crypto_openssl.c	/^hmac_ctx_init (HMAC_CTX *ctx, const uint8_t *key, int key_len,$/;"	f
hmac_ctx_init	src/openvpn/crypto_polarssl.c	/^hmac_ctx_init (md_context_t *ctx, const uint8_t *key, int key_len, const md_info_t *kt)$/;"	f
hmac_ctx_reset	src/openvpn/crypto_openssl.c	/^hmac_ctx_reset (HMAC_CTX *ctx)$/;"	f
hmac_ctx_reset	src/openvpn/crypto_polarssl.c	/^hmac_ctx_reset (md_context_t *ctx)$/;"	f
hmac_ctx_size	src/openvpn/crypto_openssl.c	/^hmac_ctx_size (const HMAC_CTX *ctx)$/;"	f
hmac_ctx_size	src/openvpn/crypto_polarssl.c	/^hmac_ctx_size (const md_context_t *ctx)$/;"	f
hmac_ctx_t	src/openvpn/crypto_openssl.h	/^typedef HMAC_CTX hmac_ctx_t;$/;"	t
hmac_ctx_t	src/openvpn/crypto_polarssl.h	/^typedef md_context_t hmac_ctx_t;$/;"	t
hmac_ctx_update	src/openvpn/crypto_openssl.c	/^hmac_ctx_update (HMAC_CTX *ctx, const uint8_t *src, int src_len)$/;"	f
hmac_ctx_update	src/openvpn/crypto_polarssl.c	/^hmac_ctx_update (md_context_t *ctx, const uint8_t *src, int src_len)$/;"	f
hmac_length	src/openvpn/crypto.h	/^  uint8_t hmac_length;		\/**< HMAC length, in bytes *\/$/;"	m	struct:key_type
hold	src/openvpn/reliable.h	/^  bool hold; \/* don't xmit until reliable_schedule_now is called *\/$/;"	m	struct:reliable
hold_release	src/openvpn/manage.h	/^  bool hold_release;$/;"	m	struct:man_persist
hop_limit	src/openvpn/proto.h	/^        uint8_t		hop_limit;$/;"	m	struct:openvpn_ipv6hdr
hops	src/openvpn/dhcp.h	/^  uint8_t  hops;       \/* client sets to 0, may be used by relay agents *\/$/;"	m	struct:dhcp
horizon	src/openvpn/interval.h	/^  interval_t horizon;$/;"	m	struct:interval
host	src/openvpn/options.h	/^  char host[RH_HOST_LEN];$/;"	m	struct:remote_host_store
hostname_randomize	src/openvpn/misc.c	/^hostname_randomize(const char *hostname, struct gc_arena *gc)$/;"	f
hton_fragment_header_type	src/openvpn/fragment.h	195;"	d
htonpid	src/openvpn/packet_id.h	63;"	d
htonpid	src/openvpn/packet_id.h	87;"	d
htonps	src/openvpn/socket.h	64;"	d
htontime	src/openvpn/packet_id.h	69;"	d
htontime	src/openvpn/packet_id.h	89;"	d
http_proxy	src/openvpn/openvpn.h	/^  struct http_proxy_info *http_proxy;$/;"	m	struct:context_1	typeref:struct:context_1::http_proxy_info
http_proxy	src/openvpn/socket.h	/^  struct http_proxy_info *http_proxy;$/;"	m	struct:link_socket	typeref:struct:link_socket::http_proxy_info
http_proxy_close	src/openvpn/proxy.c	/^http_proxy_close (struct http_proxy_info *hp)$/;"	f
http_proxy_info	src/openvpn/proxy.h	/^struct http_proxy_info {$/;"	s
http_proxy_new	src/openvpn/proxy.c	/^http_proxy_new (const struct http_proxy_options *o)$/;"	f
http_proxy_options	src/openvpn/options.h	/^  struct http_proxy_options *http_proxy_options;$/;"	m	struct:connection_entry	typeref:struct:connection_entry::http_proxy_options
http_proxy_options	src/openvpn/proxy.h	/^struct http_proxy_options {$/;"	s
http_proxy_options_simple	src/openvpn/proxy.h	/^struct http_proxy_options_simple {$/;"	s
http_proxy_override	src/openvpn/options.h	/^  struct http_proxy_options *http_proxy_override;$/;"	m	struct:options	typeref:struct:options::http_proxy_options
http_proxy_owned	src/openvpn/openvpn.h	/^  bool http_proxy_owned;$/;"	m	struct:context_1
http_version	src/openvpn/proxy.h	/^  const char *http_version;$/;"	m	struct:http_proxy_options
htype	src/openvpn/dhcp.h	/^  uint8_t  htype;      \/* hardware address type (e.g. '1' = 10Mb Ethernet) *\/$/;"	m	struct:dhcp
hwaddr	src/openvpn/route.h	/^  uint8_t hwaddr[6];$/;"	m	struct:route_gateway_info
iana_name	src/openvpn/ssl_backend.h	/^typedef struct { const char *openssl_name; const char *iana_name; } tls_cipher_name_pair;$/;"	m	struct:__anon9
id	src/openvpn/multi.c	/^id (struct multi_instance *mi)$/;"	f	file:
id	src/openvpn/packet_id.h	/^  packet_id_type id;          \/* highest sequence number received *\/$/;"	m	struct:packet_id_rec
id	src/openvpn/packet_id.h	/^  packet_id_type id;       \/* sequence number *\/$/;"	m	struct:packet_id_persist
id	src/openvpn/packet_id.h	/^  packet_id_type id;       \/* sequence number *\/$/;"	m	struct:packet_id_persist_file_image
id	src/openvpn/packet_id.h	/^  packet_id_type id;$/;"	m	struct:packet_id_net
id	src/openvpn/packet_id.h	/^  packet_id_type id;$/;"	m	struct:packet_id_send
id	src/openvpn/proto.h	/^  uint16_t   id;$/;"	m	struct:openvpn_iphdr
id	src/openvpn/session_id.h	/^  uint8_t id[8];$/;"	m	struct:session_id
id_last_written	src/openvpn/packet_id.h	/^  packet_id_type id_last_written;$/;"	m	struct:packet_id_persist
iface	src/openvpn/route.h	/^  char iface[16]; \/* interface name (null terminated), may be empty *\/$/;"	m	struct:route_gateway_info
ifconfig_ipv6_local	src/openvpn/options.h	/^  const char *ifconfig_ipv6_local;$/;"	m	struct:options
ifconfig_ipv6_netbits	src/openvpn/options.h	/^  int         ifconfig_ipv6_netbits;$/;"	m	struct:options
ifconfig_ipv6_pool_base	src/openvpn/options.h	/^  struct in6_addr ifconfig_ipv6_pool_base;		\/* IPv6 *\/$/;"	m	struct:options	typeref:struct:options::in6_addr
ifconfig_ipv6_pool_defined	src/openvpn/options.h	/^  bool   ifconfig_ipv6_pool_defined;			\/* IPv6 *\/$/;"	m	struct:options
ifconfig_ipv6_pool_netbits	src/openvpn/options.h	/^  int    ifconfig_ipv6_pool_netbits;			\/* IPv6 *\/$/;"	m	struct:options
ifconfig_ipv6_remote	src/openvpn/options.h	/^  const char *ifconfig_ipv6_remote;$/;"	m	struct:options
ifconfig_local	src/openvpn/options.h	/^  const char *ifconfig_local;$/;"	m	struct:options
ifconfig_noexec	src/openvpn/options.h	/^  bool ifconfig_noexec;$/;"	m	struct:options
ifconfig_nowarn	src/openvpn/options.h	/^  bool ifconfig_nowarn;$/;"	m	struct:options
ifconfig_options_string	src/openvpn/tun.c	/^ifconfig_options_string (const struct tuntap* tt, bool remote, bool disable, struct gc_arena *gc)$/;"	f
ifconfig_order	src/openvpn/tun.h	/^ifconfig_order(void)$/;"	f
ifconfig_pool	src/openvpn/multi.h	/^  struct ifconfig_pool *ifconfig_pool;$/;"	m	struct:multi_context	typeref:struct:multi_context::ifconfig_pool
ifconfig_pool	src/openvpn/pool.h	/^struct ifconfig_pool$/;"	s
ifconfig_pool_acquire	src/openvpn/pool.c	/^ifconfig_pool_acquire (struct ifconfig_pool *pool, in_addr_t *local, in_addr_t *remote, struct in6_addr *remote_ipv6, const char *common_name)$/;"	f
ifconfig_pool_defined	src/openvpn/options.h	/^  bool ifconfig_pool_defined;$/;"	m	struct:options
ifconfig_pool_end	src/openvpn/options.h	/^  in_addr_t ifconfig_pool_end;$/;"	m	struct:options
ifconfig_pool_entry	src/openvpn/pool.h	/^struct ifconfig_pool_entry$/;"	s
ifconfig_pool_entry_free	src/openvpn/pool.c	/^ifconfig_pool_entry_free (struct ifconfig_pool_entry *ipe, bool hard)$/;"	f	file:
ifconfig_pool_find	src/openvpn/pool.c	/^ifconfig_pool_find (struct ifconfig_pool *pool, const char *common_name)$/;"	f	file:
ifconfig_pool_free	src/openvpn/pool.c	/^ifconfig_pool_free (struct ifconfig_pool *pool)$/;"	f
ifconfig_pool_handle	src/openvpn/pool.h	/^typedef int ifconfig_pool_handle;$/;"	t
ifconfig_pool_handle_to_ip_base	src/openvpn/pool.c	/^ifconfig_pool_handle_to_ip_base (const struct ifconfig_pool* pool, ifconfig_pool_handle hand)$/;"	f	file:
ifconfig_pool_handle_to_ipv6_base	src/openvpn/pool.c	/^ifconfig_pool_handle_to_ipv6_base (const struct ifconfig_pool* pool, ifconfig_pool_handle hand)$/;"	f	file:
ifconfig_pool_init	src/openvpn/pool.c	/^ifconfig_pool_init (int type, in_addr_t start, in_addr_t end, $/;"	f
ifconfig_pool_ip_base_to_handle	src/openvpn/pool.c	/^ifconfig_pool_ip_base_to_handle (const struct ifconfig_pool* pool, const in_addr_t addr)$/;"	f	file:
ifconfig_pool_list	src/openvpn/pool.c	/^ifconfig_pool_list (const struct ifconfig_pool* pool, struct status_output *out)$/;"	f	file:
ifconfig_pool_msg	src/openvpn/pool.c	/^ifconfig_pool_msg (const struct ifconfig_pool* pool, int msglevel)$/;"	f	file:
ifconfig_pool_netmask	src/openvpn/options.h	/^  in_addr_t ifconfig_pool_netmask;$/;"	m	struct:options
ifconfig_pool_persist	src/openvpn/openvpn.h	/^  struct ifconfig_pool_persist *ifconfig_pool_persist;$/;"	m	struct:context_1	typeref:struct:context_1::ifconfig_pool_persist
ifconfig_pool_persist	src/openvpn/pool.h	/^struct ifconfig_pool_persist$/;"	s
ifconfig_pool_persist_close	src/openvpn/pool.c	/^ifconfig_pool_persist_close (struct ifconfig_pool_persist *persist)$/;"	f
ifconfig_pool_persist_filename	src/openvpn/options.h	/^  const char *ifconfig_pool_persist_filename;$/;"	m	struct:options
ifconfig_pool_persist_init	src/openvpn/pool.c	/^ifconfig_pool_persist_init (const char *filename, int refresh_freq)$/;"	f
ifconfig_pool_persist_owned	src/openvpn/openvpn.h	/^  bool ifconfig_pool_persist_owned;$/;"	m	struct:context_1
ifconfig_pool_persist_refresh_freq	src/openvpn/options.h	/^  int ifconfig_pool_persist_refresh_freq;$/;"	m	struct:options
ifconfig_pool_read	src/openvpn/pool.c	/^ifconfig_pool_read (struct ifconfig_pool_persist *persist, struct ifconfig_pool *pool)$/;"	f
ifconfig_pool_release	src/openvpn/pool.c	/^ifconfig_pool_release (struct ifconfig_pool* pool, ifconfig_pool_handle hand, const bool hard)$/;"	f
ifconfig_pool_set	src/openvpn/pool.c	/^ifconfig_pool_set (struct ifconfig_pool* pool, const char *cn, const in_addr_t addr, const bool fixed)$/;"	f	file:
ifconfig_pool_start	src/openvpn/options.h	/^  in_addr_t ifconfig_pool_start;$/;"	m	struct:options
ifconfig_pool_test	src/openvpn/pool.c	/^ifconfig_pool_test (in_addr_t start, in_addr_t end)$/;"	f
ifconfig_pool_verify_range	src/openvpn/pool.c	/^ifconfig_pool_verify_range (const int msglevel, const in_addr_t start, const in_addr_t end)$/;"	f
ifconfig_pool_write	src/openvpn/pool.c	/^ifconfig_pool_write (struct ifconfig_pool_persist *persist, const struct ifconfig_pool *pool)$/;"	f
ifconfig_pool_write_trigger	src/openvpn/pool.c	/^ifconfig_pool_write_trigger (struct ifconfig_pool_persist *persist)$/;"	f
ifconfig_push_constraint_satisfied	src/openvpn/multi.c	/^ifconfig_push_constraint_satisfied (const struct context *c)$/;"	f	file:
ifconfig_remote_netmask	src/openvpn/options.h	/^  const char *ifconfig_remote_netmask;$/;"	m	struct:options
ifconfig_sanity_check	src/openvpn/tun.c	/^ifconfig_sanity_check (bool tun, in_addr_t addr, int topology)$/;"	f	file:
ifconfig_warn_how_to_silence	src/openvpn/tun.c	/^static const char ifconfig_warn_how_to_silence[] = "(silence this warning with --ifconfig-nowarn)";$/;"	v	file:
iflags	src/openvpn/route.h	/^  unsigned int iflags;$/;"	m	struct:route_list
ignore_sys_error	src/openvpn/error.h	/^ignore_sys_error (const int err)$/;"	f
ignore_unknown_option	src/openvpn/options.h	/^  const char **  ignore_unknown_option;$/;"	m	struct:options
in	src/openvpn/manage.h	/^  struct command_line *in;$/;"	m	struct:man_connection	typeref:struct:man_connection::command_line
in	src/openvpn/win32.h	/^  struct rw_handle in;$/;"	m	struct:win32_signal	typeref:struct:win32_signal::rw_handle
in4	src/openvpn/socket.h	/^    struct in_pktinfo in4;$/;"	m	union:link_socket_actual::__anon13	typeref:struct:link_socket_actual::__anon13::in_pktinfo
in4	src/openvpn/socket.h	/^    struct sockaddr_in in4;$/;"	m	union:openvpn_sockaddr::__anon12	typeref:struct:openvpn_sockaddr::__anon12::sockaddr_in
in6	src/openvpn/socket.h	/^    struct in6_pktinfo in6;$/;"	m	union:link_socket_actual::__anon13	typeref:struct:link_socket_actual::__anon13::in6_pktinfo
in6	src/openvpn/socket.h	/^    struct sockaddr_in6 in6;$/;"	m	union:openvpn_sockaddr::__anon12	typeref:struct:openvpn_sockaddr::__anon12::sockaddr_in6
in_addr_t	config-msvc.h	100;"	d
in_addr_t_from_mroute_addr	src/openvpn/mroute.h	/^in_addr_t_from_mroute_addr (const struct mroute_addr *addr)$/;"	f
in_extra	src/openvpn/manage.h	/^  struct buffer_list *in_extra;$/;"	m	struct:man_connection	typeref:struct:man_connection::buffer_list
in_extra_cid	src/openvpn/manage.h	/^  unsigned long in_extra_cid;$/;"	m	struct:man_connection
in_extra_cmd	src/openvpn/manage.h	/^  int in_extra_cmd;$/;"	m	struct:man_connection
in_extra_dispatch	src/openvpn/manage.c	/^in_extra_dispatch (struct management *man)$/;"	f	file:
in_extra_kid	src/openvpn/manage.h	/^  unsigned int in_extra_kid;$/;"	m	struct:man_connection
in_extra_reset	src/openvpn/manage.c	/^in_extra_reset (struct man_connection *mc, const int mode)$/;"	f	file:
in_key	src/openvpn/crypto.h	/^  int in_key;                   \/**< Index into the \\c key2.keys array for$/;"	m	struct:key_direction_state
in_src	src/openvpn/options.c	/^struct in_src {$/;"	s	file:
in_src_get	src/openvpn/options.c	/^in_src_get (const struct in_src *is, char *line, const int size)$/;"	f	file:
in_use	src/openvpn/pool.h	/^  bool in_use;$/;"	m	struct:ifconfig_pool_entry
inactivity_bytes	src/openvpn/openvpn.h	/^  int inactivity_bytes;$/;"	m	struct:context_2
inactivity_interval	src/openvpn/openvpn.h	/^  struct event_timeout inactivity_interval;$/;"	m	struct:context_2	typeref:struct:context_2::event_timeout
inactivity_minimum_bytes	src/openvpn/options.h	/^  int inactivity_minimum_bytes;$/;"	m	struct:options
inactivity_timeout	src/openvpn/options.h	/^  int inactivity_timeout;       \/* --inactive *\/$/;"	m	struct:options
incoming	src/openvpn/fragment.h	/^  struct fragment_list incoming;$/;"	m	struct:fragment_master	typeref:struct:fragment_master::fragment_list
incoming_push_message	src/openvpn/push.c	/^incoming_push_message (struct context *c, const struct buffer *buffer)$/;"	f
index	src/openvpn/fragment.h	/^  int index;                    \/**< Index of the packet being reassembled$/;"	m	struct:fragment_list
index_verify	src/openvpn/integer.h	/^index_verify (int index, int size, const char *file, int line)$/;"	f
inet_ntop	src/compat/compat-inet_ntop.c	/^inet_ntop(int af, const void *src, char *dst, socklen_t size)$/;"	f
inet_pton	src/compat/compat-inet_pton.c	/^inet_pton(int af, const char *src, void *dst)$/;"	f
inetd	src/openvpn/options.h	/^  int inetd;$/;"	m	struct:options
inetd	src/openvpn/socket.h	/^  int inetd;$/;"	m	struct:link_socket
inetd_socket_descriptor	src/openvpn/misc.c	/^int inetd_socket_descriptor = SOCKET_UNDEFINED; \/* GLOBAL *\/$/;"	v
info	src/openvpn/socket.h	/^  struct link_socket_info info;$/;"	m	struct:link_socket	typeref:struct:link_socket::link_socket_info
info_callback	src/openvpn/ssl_openssl.c	/^info_callback (INFO_CALLBACK_SSL_CONST SSL * s, int where, int ret)$/;"	f	file:
inherit_context_child	src/openvpn/init.c	/^inherit_context_child (struct context *dest,$/;"	f
inherit_context_top	src/openvpn/init.c	/^inherit_context_top (struct context *dest,$/;"	f
init	src/openvpn/cryptoapi.c	/^static int init(RSA *rsa)$/;"	f	file:
init_connection_list	src/openvpn/init.c	/^init_connection_list (struct context *c)$/;"	f	file:
init_context_buffers	src/openvpn/init.c	/^init_context_buffers (const struct frame *frame)$/;"	f
init_crypto_pre	src/openvpn/init.c	/^init_crypto_pre (struct context *c, const unsigned int flags)$/;"	f	file:
init_http_proxy_options_once	src/openvpn/proxy.c	/^init_http_proxy_options_once (struct http_proxy_options **hpo,$/;"	f
init_instance	src/openvpn/init.c	/^init_instance (struct context *c, const struct env_set *env, const unsigned int flags)$/;"	f
init_instance_handle_signals	src/openvpn/init.c	/^init_instance_handle_signals (struct context *c, const struct env_set *env, const unsigned int flags)$/;"	f
init_ip_addr_string2	src/openvpn/tun.c	/^init_ip_addr_string2 (IP_ADDR_STRING *dest, const IP_ADDR_STRING *src1, const IP_ADDR_STRING *src2)$/;"	f	file:
init_key_ctx	src/openvpn/crypto.c	/^init_key_ctx (struct key_ctx *ctx, struct key *key,$/;"	f
init_key_type	src/openvpn/crypto.c	/^init_key_type (struct key_type *kt, const char *ciphername,$/;"	f
init_management	src/openvpn/init.c	/^init_management (struct context *c)$/;"	f
init_management_callback_multi	src/openvpn/multi.c	/^init_management_callback_multi (struct multi_context *m)$/;"	f
init_management_callback_p2p	src/openvpn/init.c	/^init_management_callback_p2p (struct context *c)$/;"	f
init_net_event_win32	src/openvpn/win32.c	/^init_net_event_win32 (struct rw_handle *event, long network_events, socket_descriptor_t sd, unsigned int flags)$/;"	f
init_options	src/openvpn/options.c	/^init_options (struct options *o, const bool init_gc)$/;"	f
init_options_dev	src/openvpn/init.c	/^init_options_dev (struct options *options)$/;"	f
init_plugins	src/openvpn/init.c	/^init_plugins (struct context *c)$/;"	f
init_port_share	src/openvpn/init.c	/^init_port_share (struct context *c)$/;"	f	file:
init_proxy	src/openvpn/init.c	/^init_proxy (struct context *c, const int scope)$/;"	f	file:
init_proxy_dowork	src/openvpn/init.c	/^init_proxy_dowork (struct context *c)$/;"	f	file:
init_query_passwords	src/openvpn/init.c	/^init_query_passwords (struct context *c)$/;"	f	file:
init_random_seed	src/openvpn/misc.c	/^init_random_seed(void)$/;"	f
init_route	src/openvpn/route.c	/^init_route (struct route_ipv4 *r,$/;"	f	file:
init_route_ipv6	src/openvpn/route.c	/^init_route_ipv6 (struct route_ipv6 *r6,$/;"	f	file:
init_route_ipv6_list	src/openvpn/route.c	/^init_route_ipv6_list (struct route_ipv6_list *rl6,$/;"	f
init_route_list	src/openvpn/route.c	/^init_route_list (struct route_list *rl,$/;"	f
init_security_attributes_allow_all	src/openvpn/win32.c	/^init_security_attributes_allow_all (struct security_attributes *obj)$/;"	f
init_security_attributes_allow_all	src/openvpnserv/openvpnserv.c	/^init_security_attributes_allow_all (struct security_attributes *obj)$/;"	f
init_ssl	src/openvpn/ssl.c	/^init_ssl (const struct options *options, struct tls_root_ctx *new_ctx)$/;"	f
init_ssl_lib	src/openvpn/crypto.c	/^init_ssl_lib (void)$/;"	f
init_ssl_lib	src/openvpn/ssl.c	/^init_ssl_lib ()$/;"	f
init_static	src/openvpn/init.c	/^init_static (void)$/;"	f
init_tun	src/openvpn/tun.c	/^init_tun (const char *dev,       \/* --dev option *\/$/;"	f
init_tun_post	src/openvpn/tun.c	/^init_tun_post (struct tuntap *tt,$/;"	f
init_verb_mute	src/openvpn/init.c	/^init_verb_mute (struct context *c, unsigned int flags)$/;"	f
init_win32	src/openvpn/win32.c	/^init_win32 (void)$/;"	f
initial_opcode	src/openvpn/ssl_common.h	/^  int initial_opcode;		\/* our initial P_ opcode *\/$/;"	m	struct:key_state
initial_opcode	src/openvpn/ssl_common.h	/^  int initial_opcode;		\/* our initial P_ opcode *\/$/;"	m	struct:tls_session
initial_timeout	src/openvpn/reliable.h	/^  interval_t initial_timeout;$/;"	m	struct:reliable
initialised	src/openvpn/ssl_polarssl.h	/^    bool initialised; 		\/**< True if the context has been initialised *\/$/;"	m	struct:tls_root_ctx
initialization_point	src/openvpn/plugin.h	/^  openvpn_plugin_select_initialization_point_v1 initialization_point;$/;"	m	struct:plugin
initialization_sequence_completed	src/openvpn/init.c	/^initialization_sequence_completed (struct context *c, const unsigned int flags)$/;"	f
initialize	build/msvc/msvc-generate/msvc-generate.js	/^function initialize() {$/;"	f
initialized	src/openvpn/gremlin.c	/^static bool initialized; \/* GLOBAL *\/$/;"	v	file:
initialized	src/openvpn/packet_id.h	/^  bool initialized;           \/* true if packet_id_init was called *\/$/;"	m	struct:packet_id_rec
initialized	src/openvpn/plugin.h	/^  bool initialized;$/;"	m	struct:plugin
inline	config-msvc.h	83;"	d
inline	src/openvpn/syshead.h	387;"	d
inline	src/openvpn/syshead.h	388;"	d
input	build/msvc/msvc-generate/msvc-generate.js	/^var input = "nul";$/;"	v
ins	src/openvpn/schedule.c	/^  int ins;$/;"	m	struct:status	file:
instance	src/openvpn/mbuf.h	/^  struct multi_instance *instance;$/;"	m	struct:mbuf_item	typeref:struct:mbuf_item::multi_instance
instance	src/openvpn/multi.h	/^  struct multi_instance *instance;$/;"	m	struct:multi_route	typeref:struct:multi_route::multi_instance
int16_t	config-msvc.h	/^typedef __int16		int16_t;$/;"	t
int32_t	config-msvc.h	/^typedef __int32		int32_t;$/;"	t
int64_t	config-msvc.h	/^typedef __int64		int64_t;$/;"	t
int8_t	config-msvc.h	/^typedef __int8		int8_t;$/;"	t
interval	src/openvpn/interval.h	/^struct interval$/;"	s
interval_action	src/openvpn/interval.h	/^interval_action (struct interval* top)$/;"	f
interval_earliest_wakeup	src/openvpn/otime.h	/^interval_earliest_wakeup (interval_t *wakeup, time_t at, time_t current) {$/;"	f
interval_future_trigger	src/openvpn/interval.h	/^interval_future_trigger (struct interval* top, interval_t wakeup) {$/;"	f
interval_init	src/openvpn/interval.c	/^interval_init (struct interval *top, int horizon, int refresh)$/;"	f
interval_schedule_wakeup	src/openvpn/interval.h	/^interval_schedule_wakeup (struct interval* top, interval_t *wakeup)$/;"	f
interval_t	src/openvpn/common.h	/^typedef int interval_t;$/;"	t
interval_test	src/openvpn/interval.h	/^interval_test (struct interval* top)$/;"	f
intval	src/openvpn/manage.h	/^  int intval;$/;"	m	union:log_entry_union
io_wait	src/openvpn/forward-inline.h	/^io_wait (struct context *c, const unsigned int flags)$/;"	f
io_wait_dowork	src/openvpn/forward.c	/^io_wait_dowork (struct context *c, const unsigned int flags)$/;"	f
iostate	src/openvpn/win32.h	/^  int iostate;$/;"	m	struct:overlapped_io
ip	src/openvpn/dhcp.h	/^  struct openvpn_iphdr ip;$/;"	m	struct:dhcp_full	typeref:struct:dhcp_full::openvpn_iphdr
ip	src/openvpn/proto.h	/^  struct openvpn_iphdr ip;$/;"	m	struct:ip_tcp_udp_hdr	typeref:struct:ip_tcp_udp_hdr::openvpn_iphdr
ip_addr_dotted_quad_safe	src/openvpn/socket.c	/^ip_addr_dotted_quad_safe (const char *dotted_quad)$/;"	f
ip_addr_member_of	src/openvpn/tun.c	/^ip_addr_member_of (const in_addr_t addr, const IP_ADDR_STRING *ias)$/;"	f	file:
ip_addr_one_to_one	src/openvpn/tun.c	/^ip_addr_one_to_one (const in_addr_t *a1, const int a1len, const IP_ADDR_STRING *ias)$/;"	f	file:
ip_addr_string_to_array	src/openvpn/tun.c	/^ip_addr_string_to_array (in_addr_t *dest, int *dest_len, const IP_ADDR_STRING *src)$/;"	f
ip_dest	src/openvpn/proto.h	/^  in_addr_t ip_dest;$/;"	m	struct:openvpn_arp
ip_fd	src/openvpn/tun.h	/^  int ip_fd;$/;"	m	struct:tuntap
ip_or_dns_addr_safe	src/openvpn/socket.c	/^ip_or_dns_addr_safe (const char *addr, const bool allow_fqdn)$/;"	f
ip_src	src/openvpn/proto.h	/^  in_addr_t ip_src;$/;"	m	struct:openvpn_arp
ip_tcp_udp_hdr	src/openvpn/proto.h	/^struct ip_tcp_udp_hdr {$/;"	s
ip_win32_defined	src/openvpn/tun.h	/^  bool ip_win32_defined;$/;"	m	struct:tuntap_options
ip_win32_type	src/openvpn/tun.h	/^  int ip_win32_type;$/;"	m	struct:tuntap_options
ipapi_context	src/openvpn/tun.h	/^  ULONG ipapi_context;$/;"	m	struct:tuntap
ipapi_context_defined	src/openvpn/tun.h	/^  bool ipapi_context_defined;$/;"	m	struct:tuntap
ipapi_instance	src/openvpn/tun.h	/^  ULONG ipapi_instance;$/;"	m	struct:tuntap
ipchange	src/openvpn/options.h	/^  const char *ipchange;$/;"	m	struct:options
ipchange_command	src/openvpn/socket.h	/^  const char *ipchange_command;$/;"	m	struct:link_socket_info
ipchange_fmt	src/openvpn/socket.c	/^ipchange_fmt (const bool include_cmd, struct argv *argv, const struct link_socket_info *info, struct gc_arena *gc)$/;"	f	file:
ipconfig_register_dns	src/openvpn/tun.c	/^ipconfig_register_dns (const struct env_set *es)$/;"	f
iproute_path	src/openvpn/misc.c	/^const char *iproute_path = IPROUTE_PATH; \/* GLOBAL *\/$/;"	v
ipset2ascii	src/openvpn/tun.c	/^ipset2ascii (int index)$/;"	f
ipset2ascii_all	src/openvpn/tun.c	/^ipset2ascii_all (struct gc_arena *gc)$/;"	f
ipset_names	src/openvpn/tun.c	/^static const struct ipset_names ipset_names[] = {$/;"	v	typeref:struct:ipset_names	file:
ipset_names	src/openvpn/tun.c	/^struct ipset_names {$/;"	s	file:
ipv4_packet_size_verify	src/openvpn/proto.c	/^ipv4_packet_size_verify (const uint8_t *data,$/;"	f
ipv4_subnet	src/openvpn/pf.h	/^struct ipv4_subnet {$/;"	s
ipv4_tun	src/openvpn/openvpn.h	/^  bool ipv4_tun;$/;"	m	struct:context_2
ipv6	src/openvpn/pool.h	/^  bool ipv6;$/;"	m	struct:ifconfig_pool
ipv6	src/openvpn/tun.h	/^  bool ipv6;$/;"	m	struct:tuntap
ipv6_addr_safe	src/openvpn/socket.c	/^ipv6_addr_safe (const char *ipv6_text_addr)$/;"	f
ipv6_addr_safe_hexplusbits	src/openvpn/options.c	/^static bool ipv6_addr_safe_hexplusbits( const char * ipv6_prefix_spec )$/;"	f	file:
iroute	src/openvpn/route.h	/^struct iroute {$/;"	s
iroute_ipv6	src/openvpn/route.h	/^struct iroute_ipv6 {$/;"	s
iroutes	src/openvpn/options.h	/^  struct iroute *iroutes;$/;"	m	struct:options	typeref:struct:options::iroute
iroutes_ipv6	src/openvpn/options.h	/^  struct iroute_ipv6 *iroutes_ipv6;			\/* IPv6 *\/$/;"	m	struct:options	typeref:struct:options::iroute_ipv6
is_adapter_up	src/openvpn/tun.c	/^is_adapter_up (const struct tuntap *tt, const IP_ADAPTER_INFO *list)$/;"	f
is_dev_type	src/openvpn/tun.c	/^is_dev_type (const char *dev, const char *dev_type, const char *match_type)$/;"	f
is_dgram	src/openvpn/socket.c	/^  bool	is_dgram;$/;"	m	struct:proto_names	file:
is_hard_reset	src/openvpn/ssl.c	/^is_hard_reset (int op, int key_method)$/;"	f	file:
is_ip_in_adapter_subnet	src/openvpn/tun.c	/^is_ip_in_adapter_subnet (const IP_ADAPTER_INFO *ai, const in_addr_t ip, in_addr_t *highest_netmask)$/;"	f
is_ipv4	src/openvpn/proto.c	/^is_ipv4 (int tunnel_type, struct buffer *buf)$/;"	f
is_ipv6	src/openvpn/proto.c	/^is_ipv6 (int tunnel_type, struct buffer *buf)$/;"	f
is_ipv_X	src/openvpn/proto.c	/^is_ipv_X ( int tunnel_type, struct buffer *buf, int ip_ver )$/;"	f	file:
is_mac_mcast_addr	src/openvpn/mroute.c	/^is_mac_mcast_addr (const uint8_t *mac)$/;"	f	file:
is_mac_mcast_maddr	src/openvpn/mroute.c	/^is_mac_mcast_maddr (const struct mroute_addr *addr)$/;"	f	file:
is_net	src/openvpn/socket.c	/^  bool	is_net;$/;"	m	struct:proto_names	file:
is_occ_msg	src/openvpn/occ.h	/^is_occ_msg (const struct buffer* buf)$/;"	f
is_on_link	src/openvpn/route.c	/^is_on_link (const int is_local_route, const unsigned int flags, const struct route_gateway_info *rgi)$/;"	f	file:
is_openvpn_protocol	src/openvpn/ps.c	/^is_openvpn_protocol (const struct buffer *buf)$/;"	f
is_password_env_var	src/openvpn/misc.c	/^is_password_env_var (const char *str)$/;"	f	file:
is_ping_msg	src/openvpn/ping.h	/^is_ping_msg (const struct buffer* buf)$/;"	f
is_route_parm_defined	src/openvpn/route.c	/^is_route_parm_defined (const char *parm)$/;"	f	file:
is_special_addr	src/openvpn/route.c	/^is_special_addr (const char *addr_str)$/;"	f
is_tap_win	src/openvpn/tun.c	/^is_tap_win (const char *guid, const struct tap_reg *tap_reg)$/;"	f	file:
is_tun_p2p	src/openvpn/tun.c	/^is_tun_p2p (const struct tuntap *tt)$/;"	f
is_utun	src/openvpn/tun.h	/^  bool is_utun;$/;"	m	struct:tuntap
iter	src/openvpn/multi.h	/^  struct hash *iter;            \/**< VPN tunnel instances indexed by real$/;"	m	struct:multi_context	typeref:struct:multi_context::hash
iv	src/openvpn/list.h	/^  uint32_t iv;$/;"	m	struct:hash
jfn	src/openvpn/ps.c	/^  char *jfn;$/;"	m	struct:proxy_connection	file:
journal_add	src/openvpn/ps.c	/^journal_add (const char *journal_dir, struct proxy_connection *pc, struct proxy_connection *cp)$/;"	f	file:
keepalive_ping	src/openvpn/options.h	/^  int keepalive_ping;           \/* a proxy for ping\/ping-restart *\/$/;"	m	struct:options
keepalive_timeout	src/openvpn/options.h	/^  int keepalive_timeout;$/;"	m	struct:options
key	src/openvpn/crypto.h	/^struct key$/;"	s
key	src/openvpn/list.h	/^  const void *key;$/;"	m	struct:hash_element
key	src/openvpn/ssl_common.h	/^  struct key_ctx_bi key;	       \/* data channel keys for encrypt\/decrypt\/hmac *\/$/;"	m	struct:key_state	typeref:struct:key_state::key_ctx_bi
key	src/openvpn/ssl_common.h	/^  struct key_state key[KS_SIZE];$/;"	m	struct:tls_session	typeref:struct:tls_session::key_state
key2	src/openvpn/crypto.h	/^struct key2$/;"	s
key2_print	src/openvpn/crypto.c	/^key2_print (const struct key2* k,$/;"	f
key_ctx	src/openvpn/crypto.h	/^struct key_ctx$/;"	s
key_ctx_bi	src/openvpn/crypto.h	/^  struct key_ctx_bi *key_ctx_bi;$/;"	m	struct:crypto_options	typeref:struct:crypto_options::key_ctx_bi
key_ctx_bi	src/openvpn/crypto.h	/^struct key_ctx_bi$/;"	s
key_ctx_bi_defined	src/openvpn/crypto.h	/^key_ctx_bi_defined(const struct key_ctx_bi* key)$/;"	f
key_des_check	src/openvpn/crypto_openssl.c	/^key_des_check (uint8_t *key, int key_len, int ndc)$/;"	f
key_des_check	src/openvpn/crypto_polarssl.c	/^key_des_check (uint8_t *key, int key_len, int ndc)$/;"	f
key_des_fixup	src/openvpn/crypto_openssl.c	/^key_des_fixup (uint8_t *key, int key_len, int ndc)$/;"	f
key_des_fixup	src/openvpn/crypto_polarssl.c	/^key_des_fixup (uint8_t *key, int key_len, int ndc)$/;"	f
key_des_num_cblocks	src/openvpn/crypto_openssl.c	/^key_des_num_cblocks (const EVP_CIPHER *kt)$/;"	f
key_des_num_cblocks	src/openvpn/crypto_polarssl.c	/^key_des_num_cblocks (const cipher_info_t *kt)$/;"	f
key_direction	src/openvpn/options.h	/^  int key_direction;$/;"	m	struct:options
key_direction_state	src/openvpn/crypto.h	/^struct key_direction_state$/;"	s
key_direction_state_init	src/openvpn/crypto.c	/^key_direction_state_init (struct key_direction_state *kds, int key_direction)$/;"	f
key_id	src/openvpn/ssl_common.h	/^  int key_id;			\/* increments with each soft reset (for key renegotiation) *\/$/;"	m	struct:tls_session
key_id	src/openvpn/ssl_common.h	/^  int key_id;			\/* inherited from struct tls_session below *\/$/;"	m	struct:key_state
key_is_zero	src/openvpn/crypto.c	/^key_is_zero (struct key *key, const struct key_type *kt)$/;"	f	file:
key_method	src/openvpn/options.h	/^  int key_method;$/;"	m	struct:options
key_method	src/openvpn/ssl_common.h	/^  int key_method;$/;"	m	struct:tls_options
key_method_1_read	src/openvpn/ssl.c	/^key_method_1_read (struct buffer *buf, struct tls_session *session)$/;"	f	file:
key_method_1_write	src/openvpn/ssl.c	/^key_method_1_write (struct buffer *buf, struct tls_session *session)$/;"	f	file:
key_method_2_read	src/openvpn/ssl.c	/^key_method_2_read (struct buffer *buf, struct tls_multi *multi, struct tls_session *session)$/;"	f	file:
key_method_2_write	src/openvpn/ssl.c	/^key_method_2_write (struct buffer *buf, struct tls_session *session)$/;"	f	file:
key_pass_file	src/openvpn/options.h	/^  const char *key_pass_file;$/;"	m	struct:options
key_scan	src/openvpn/ssl_common.h	/^  struct key_state* key_scan[KEY_SCAN_SIZE];$/;"	m	struct:tls_multi	typeref:struct:tls_multi::key_state
key_schedule	src/openvpn/openvpn.h	/^struct key_schedule$/;"	s
key_schedule_free	src/openvpn/init.c	/^key_schedule_free (struct key_schedule *ks, bool free_ssl_ctx)$/;"	f	file:
key_source	src/openvpn/ssl_common.h	/^struct key_source {$/;"	s
key_source2	src/openvpn/ssl_common.h	/^struct key_source2 {$/;"	s
key_source2_print	src/openvpn/ssl.c	/^key_source2_print (const struct key_source2 *k)$/;"	f	file:
key_source2_randomize_write	src/openvpn/ssl.c	/^key_source2_randomize_write (struct key_source2 *k2,$/;"	f	file:
key_source2_read	src/openvpn/ssl.c	/^key_source2_read (struct key_source2 *k2,$/;"	f	file:
key_source_print	src/openvpn/ssl.c	/^key_source_print (const struct key_source *k,$/;"	f	file:
key_spec	src/openvpn/cryptoapi.c	/^    DWORD key_spec;$/;"	m	struct:_CAPI_DATA	file:
key_src	src/openvpn/ssl_common.h	/^  struct key_source2 *key_src;         \/* source entropy for key expansion *\/$/;"	m	struct:key_state	typeref:struct:key_state::key_source2
key_state	src/openvpn/ssl_common.h	/^struct key_state$/;"	s
key_state_free	src/openvpn/ssl.c	/^key_state_free (struct key_state *ks, bool clear)$/;"	f	file:
key_state_gen_auth_control_file	src/openvpn/ssl_verify.c	/^key_state_gen_auth_control_file (struct key_state *ks, const struct tls_options *opt)$/;"	f	file:
key_state_init	src/openvpn/ssl.c	/^key_state_init (struct tls_session *session, struct key_state *ks)$/;"	f	file:
key_state_read_ciphertext	src/openvpn/ssl_openssl.c	/^key_state_read_ciphertext (struct key_state_ssl *ks_ssl, struct buffer *buf,$/;"	f
key_state_read_ciphertext	src/openvpn/ssl_polarssl.c	/^key_state_read_ciphertext (struct key_state_ssl *ks, struct buffer *buf,$/;"	f
key_state_read_plaintext	src/openvpn/ssl_openssl.c	/^key_state_read_plaintext (struct key_state_ssl *ks_ssl, struct buffer *buf,$/;"	f
key_state_read_plaintext	src/openvpn/ssl_polarssl.c	/^key_state_read_plaintext (struct key_state_ssl *ks, struct buffer *buf,$/;"	f
key_state_rm_auth_control_file	src/openvpn/ssl_verify.c	/^key_state_rm_auth_control_file (struct key_state *ks)$/;"	f
key_state_soft_reset	src/openvpn/ssl.c	/^key_state_soft_reset (struct tls_session *session)$/;"	f	file:
key_state_ssl	src/openvpn/ssl_openssl.h	/^struct key_state_ssl {$/;"	s
key_state_ssl	src/openvpn/ssl_polarssl.h	/^struct key_state_ssl {$/;"	s
key_state_ssl_free	src/openvpn/ssl_openssl.c	/^void key_state_ssl_free(struct key_state_ssl *ks_ssl)$/;"	f
key_state_ssl_free	src/openvpn/ssl_polarssl.c	/^key_state_ssl_free(struct key_state_ssl *ks_ssl)$/;"	f
key_state_ssl_init	src/openvpn/ssl_openssl.c	/^key_state_ssl_init(struct key_state_ssl *ks_ssl, const struct tls_root_ctx *ssl_ctx, bool is_server, struct tls_session *session)$/;"	f
key_state_ssl_init	src/openvpn/ssl_polarssl.c	/^void key_state_ssl_init(struct key_state_ssl *ks_ssl,$/;"	f
key_state_test_auth_control_file	src/openvpn/ssl_verify.c	/^key_state_test_auth_control_file (struct key_state *ks)$/;"	f	file:
key_state_write_ciphertext	src/openvpn/ssl_openssl.c	/^key_state_write_ciphertext (struct key_state_ssl *ks_ssl, struct buffer *buf)$/;"	f
key_state_write_ciphertext	src/openvpn/ssl_polarssl.c	/^key_state_write_ciphertext (struct key_state_ssl *ks, struct buffer *buf)$/;"	f
key_state_write_plaintext	src/openvpn/ssl_openssl.c	/^key_state_write_plaintext (struct key_state_ssl *ks_ssl, struct buffer *buf)$/;"	f
key_state_write_plaintext	src/openvpn/ssl_polarssl.c	/^key_state_write_plaintext (struct key_state_ssl *ks, struct buffer *buf)$/;"	f
key_state_write_plaintext_const	src/openvpn/ssl_openssl.c	/^key_state_write_plaintext_const (struct key_state_ssl *ks_ssl, const uint8_t *data, int len)$/;"	f
key_state_write_plaintext_const	src/openvpn/ssl_polarssl.c	/^key_state_write_plaintext_const (struct key_state_ssl *ks, const uint8_t *data, int len)$/;"	f
key_type	src/openvpn/crypto.h	/^struct key_type$/;"	s
key_type	src/openvpn/openvpn.h	/^  struct key_type key_type;$/;"	m	struct:key_schedule	typeref:struct:key_schedule::key_type
key_type	src/openvpn/ssl_common.h	/^  struct key_type key_type;$/;"	m	struct:tls_options	typeref:struct:tls_options::key_type
keyboard_input_available	src/openvpn/win32.c	/^keyboard_input_available (struct win32_signal *ws)$/;"	f	file:
keyboard_ir_to_key	src/openvpn/win32.c	/^keyboard_ir_to_key (INPUT_RECORD *ir)$/;"	f	file:
keydirection2ascii	src/openvpn/crypto.c	/^keydirection2ascii (int kd, bool remote)$/;"	f
keys	src/openvpn/crypto.h	/^  struct key keys[2];           \/**< Two unidirectional sets of %key$/;"	m	struct:key2	typeref:struct:key2::key
keysize	src/openvpn/options.h	/^  int keysize;$/;"	m	struct:options
kill	src/openvpn/pf.h	/^  bool kill;$/;"	m	struct:pf_set
kill_by_addr	src/openvpn/manage.h	/^  int (*kill_by_addr) (void *arg, const in_addr_t addr, const int port);$/;"	m	struct:management_callback
kill_by_cid	src/openvpn/manage.h	/^  bool (*kill_by_cid) (void *arg, const unsigned long cid, const char *kill_msg);$/;"	m	struct:management_callback
kill_by_cn	src/openvpn/manage.h	/^  int (*kill_by_cn) (void *arg, const char *common_name);$/;"	m	struct:management_callback
ks	src/openvpn/openvpn.h	/^  struct key_schedule ks;$/;"	m	struct:context_1	typeref:struct:context_1::key_schedule
ks_ssl	src/openvpn/ssl_common.h	/^  struct key_state_ssl ks_ssl;	\/* contains SSL object and BIOs for the control channel *\/$/;"	m	struct:key_state	typeref:struct:key_state::key_state_ssl
lame_duck_must_die	src/openvpn/ssl.c	/^lame_duck_must_die (const struct tls_session* session, interval_t *wakeup)$/;"	f	file:
last	src/openvpn/interval.h	/^  time_t last; \/* time of last event *\/$/;"	m	struct:event_timeout
last	src/openvpn/list.h	/^  struct hash_element *last;$/;"	m	struct:hash_iterator	typeref:struct:hash_iterator::hash_element
last_action	src/openvpn/interval.h	/^  time_t last_action;$/;"	m	struct:interval
last_block	src/openvpn/ssl_polarssl.h	/^    buffer_entry *last_block;$/;"	m	struct:__anon8
last_call	src/openvpn/multi.h	/^  time_t last_call;$/;"	m	struct:multi_reap
last_msec	src/compat/compat-gettimeofday.c	/^static unsigned int last_msec = 0;$/;"	v	file:
last_reap	src/openvpn/packet_id.h	/^  time_t last_reap;           \/* last call of packet_id_reap *\/$/;"	m	struct:packet_id_rec
last_reference	src/openvpn/multi.h	/^  time_t last_reference;$/;"	m	struct:multi_route
last_release	src/openvpn/pool.h	/^  time_t last_release;$/;"	m	struct:ifconfig_pool_entry
last_sec	src/compat/compat-gettimeofday.c	/^static time_t last_sec = 0;$/;"	v	file:
last_test_true	src/openvpn/interval.h	/^  time_t last_test_true;$/;"	m	struct:interval
learn_address_script	src/openvpn/multi.c	/^learn_address_script (const struct multi_context *m,$/;"	f	file:
learn_address_script	src/openvpn/options.h	/^  const char *learn_address_script;$/;"	m	struct:options
legal_ipv4_port	src/openvpn/socket.h	/^legal_ipv4_port (int port)$/;"	f
len	src/openvpn/buffer.h	/^  int len;                      \/**< Length in bytes of the actual content$/;"	m	struct:buffer
len	src/openvpn/mbuf.h	/^  unsigned int len;$/;"	m	struct:mbuf_set
len	src/openvpn/mroute.h	/^  uint8_t len;      \/* length of address *\/$/;"	m	struct:mroute_addr
len	src/openvpn/options.h	/^  int len;$/;"	m	struct:connection_list
len	src/openvpn/options.h	/^  int len;$/;"	m	struct:remote_list
len	src/openvpn/proto.h	/^  uint16_t   len;$/;"	m	struct:openvpn_udphdr
len	src/openvpn/reliable.h	/^  int len;$/;"	m	struct:reliable_ack
len	src/openvpn/socket.h	/^  int len;     \/* -1 if not yet known *\/$/;"	m	struct:stream_buf
len	src/plugins/auth-pam/auth-pam.c	/^  int len;$/;"	m	struct:name_value_list	file:
length	src/openvpn/ssl_polarssl.h	/^    size_t length;$/;"	m	struct:_buffer_entry
libdl_resolve_symbol	src/openvpn/plugin.c	/^libdl_resolve_symbol (void *handle, void **dest, const char *symbol, const char *plugin_name, const unsigned int flags)$/;"	f	file:
libpam_h	src/plugins/auth-pam/pamdl.c	/^static void *libpam_h = NULL;$/;"	v	file:
likely	src/openvpn/syshead.h	33;"	d
likely	src/openvpn/syshead.h	36;"	d
limit_next	src/openvpn/ssl_common.h	/^  int limit_next;               \/* used for traffic shaping on the control channel *\/$/;"	m	struct:tls_session
link_mtu	src/openvpn/mtu.h	/^  int link_mtu;                 \/**< Maximum packet size to be sent over$/;"	m	struct:frame
link_mtu	src/openvpn/options.h	/^  int link_mtu;          \/* MTU of device over which tunnel packets pass via TCP\/UDP *\/$/;"	m	struct:connection_entry
link_mtu_defined	src/openvpn/options.h	/^  bool link_mtu_defined; \/* true if user overriding parm with command line option *\/$/;"	m	struct:connection_entry
link_mtu_dynamic	src/openvpn/mtu.h	/^  int link_mtu_dynamic;         \/**< Dynamic MTU value for the external$/;"	m	struct:frame
link_read_bytes	src/openvpn/mstats.h	/^  counter_type link_read_bytes;   \/* counter_type can be assumed to be a uint64_t *\/$/;"	m	struct:mmap_stats
link_read_bytes	src/openvpn/openvpn.h	/^  counter_type link_read_bytes;$/;"	m	struct:context_2
link_read_bytes_auth	src/openvpn/openvpn.h	/^  counter_type link_read_bytes_auth;$/;"	m	struct:context_2
link_read_bytes_global	src/openvpn/forward.c	/^counter_type link_read_bytes_global;  \/* GLOBAL *\/$/;"	v
link_socket	src/openvpn/openvpn.h	/^  struct link_socket *link_socket;	 \/* socket used for TCP\/UDP connection to remote *\/$/;"	m	struct:context_2	typeref:struct:context_2::link_socket
link_socket	src/openvpn/socket.h	/^struct link_socket$/;"	s
link_socket_actual	src/openvpn/socket.h	/^struct link_socket_actual$/;"	s
link_socket_actual_defined	src/openvpn/socket.h	/^link_socket_actual_defined (const struct link_socket_actual *act)$/;"	f
link_socket_actual_match	src/openvpn/socket.h	/^link_socket_actual_match (const struct link_socket_actual *a1, const struct link_socket_actual *a2)$/;"	f
link_socket_addr	src/openvpn/openvpn.h	/^  struct link_socket_addr link_socket_addr;$/;"	m	struct:context_1	typeref:struct:context_1::link_socket_addr
link_socket_addr	src/openvpn/socket.h	/^struct link_socket_addr$/;"	s
link_socket_bad_incoming_addr	src/openvpn/socket.c	/^link_socket_bad_incoming_addr (struct buffer *buf,$/;"	f
link_socket_bad_outgoing_addr	src/openvpn/socket.c	/^link_socket_bad_outgoing_addr (void)$/;"	f
link_socket_close	src/openvpn/socket.c	/^link_socket_close (struct link_socket *sock)$/;"	f
link_socket_connection_initiated	src/openvpn/socket.c	/^link_socket_connection_initiated (const struct buffer *buf,$/;"	f
link_socket_connection_oriented	src/openvpn/socket.h	/^link_socket_connection_oriented (const struct link_socket *sock)$/;"	f
link_socket_current_remote	src/openvpn/socket.c	/^link_socket_current_remote (const struct link_socket_info *info)$/;"	f
link_socket_extract_tos	src/openvpn/socket.h	/^link_socket_extract_tos (struct link_socket *ls, const struct buffer *ipbuf)$/;"	f
link_socket_get_outgoing_addr	src/openvpn/socket.h	/^link_socket_get_outgoing_addr (struct buffer *buf,$/;"	f
link_socket_info	src/openvpn/openvpn.h	/^  struct link_socket_info *link_socket_info;$/;"	m	struct:context_2	typeref:struct:context_2::link_socket_info
link_socket_info	src/openvpn/socket.h	/^struct link_socket_info$/;"	s
link_socket_init_phase1	src/openvpn/socket.c	/^link_socket_init_phase1 (struct link_socket *sock,$/;"	f
link_socket_init_phase2	src/openvpn/socket.c	/^link_socket_init_phase2 (struct link_socket *sock,$/;"	f
link_socket_new	src/openvpn/socket.c	/^link_socket_new (void)$/;"	f
link_socket_owned	src/openvpn/openvpn.h	/^  bool link_socket_owned;$/;"	m	struct:context_2
link_socket_proto_connection_oriented	src/openvpn/socket.h	/^link_socket_proto_connection_oriented (int proto)$/;"	f
link_socket_read	src/openvpn/socket.h	/^link_socket_read (struct link_socket *sock,$/;"	f
link_socket_read_tcp	src/openvpn/socket.c	/^link_socket_read_tcp (struct link_socket *sock,$/;"	f
link_socket_read_udp_posix	src/openvpn/socket.c	/^link_socket_read_udp_posix (struct link_socket *sock,$/;"	f
link_socket_read_udp_posix_recvmsg	src/openvpn/socket.c	/^link_socket_read_udp_posix_recvmsg (struct link_socket *sock,$/;"	f	file:
link_socket_read_udp_win32	src/openvpn/socket.h	/^link_socket_read_udp_win32 (struct link_socket *sock,$/;"	f
link_socket_set_outgoing_addr	src/openvpn/socket.h	/^link_socket_set_outgoing_addr (const struct buffer *buf,$/;"	f
link_socket_set_tos	src/openvpn/socket.h	/^link_socket_set_tos (struct link_socket *ls)$/;"	f
link_socket_update_buffer_sizes	src/openvpn/socket.c	/^link_socket_update_buffer_sizes (struct link_socket *ls, int rcvbuf, int sndbuf)$/;"	f
link_socket_update_flags	src/openvpn/socket.c	/^link_socket_update_flags (struct link_socket *ls, unsigned int sockflags)$/;"	f
link_socket_verify_incoming_addr	src/openvpn/socket.h	/^link_socket_verify_incoming_addr (struct buffer *buf,$/;"	f
link_socket_write	src/openvpn/socket.h	/^link_socket_write (struct link_socket *sock,$/;"	f
link_socket_write_post_size_adjust	src/openvpn/forward.c	/^link_socket_write_post_size_adjust (int *size,$/;"	f	file:
link_socket_write_tcp	src/openvpn/socket.c	/^link_socket_write_tcp (struct link_socket *sock,$/;"	f
link_socket_write_tcp_posix	src/openvpn/socket.h	/^link_socket_write_tcp_posix (struct link_socket *sock,$/;"	f
link_socket_write_udp	src/openvpn/socket.h	/^link_socket_write_udp (struct link_socket *sock,$/;"	f
link_socket_write_udp_posix	src/openvpn/socket.h	/^link_socket_write_udp_posix (struct link_socket *sock,$/;"	f
link_socket_write_udp_posix_sendmsg	src/openvpn/socket.c	/^link_socket_write_udp_posix_sendmsg (struct link_socket *sock,$/;"	f
link_socket_write_win32	src/openvpn/socket.h	/^link_socket_write_win32 (struct link_socket *sock,$/;"	f
link_write_bytes	src/openvpn/mstats.h	/^  counter_type link_write_bytes;$/;"	m	struct:mmap_stats
link_write_bytes	src/openvpn/openvpn.h	/^  counter_type link_write_bytes;$/;"	m	struct:context_2
link_write_bytes_global	src/openvpn/forward.c	/^counter_type link_write_bytes_global; \/* GLOBAL *\/$/;"	v
list	src/openvpn/buffer.h	/^  struct gc_entry *list;        \/**< First element of the linked list of$/;"	m	struct:gc_arena	typeref:struct:gc_arena::gc_entry
list	src/openvpn/list.h	/^  struct hash_element *list;$/;"	m	struct:hash_bucket	typeref:struct:hash_bucket::hash_element
list	src/openvpn/misc.h	/^  struct env_item *list;$/;"	m	struct:env_set	typeref:struct:env_set::env_item
list	src/openvpn/pf.h	/^  struct pf_cn_elem *list;$/;"	m	struct:pf_cn_set	typeref:struct:pf_cn_set::pf_cn_elem
list	src/openvpn/pf.h	/^  struct pf_subnet *list;$/;"	m	struct:pf_subnet_set	typeref:struct:pf_subnet_set::pf_subnet
list	src/openvpn/plugin.h	/^  struct openvpn_plugin_string_list *list[MAX_PLUGINS];$/;"	m	struct:plugin_return	typeref:struct:plugin_return::openvpn_plugin_string_list
list	src/openvpn/pool.h	/^  struct ifconfig_pool_entry *list;$/;"	m	struct:ifconfig_pool	typeref:struct:ifconfig_pool::ifconfig_pool_entry
list_test	src/openvpn/list.c	/^list_test (void)$/;"	f
listen_handle	src/openvpn/socket.h	/^  struct rw_handle listen_handle; \/* For listening on TCP socket in server mode *\/$/;"	m	struct:link_socket	typeref:struct:link_socket::rw_handle
listen_persistent_queued	src/openvpn/socket.h	/^  bool listen_persistent_queued;$/;"	m	struct:link_socket
lladdr	src/openvpn/options.h	/^  const char *lladdr;$/;"	m	struct:options
local	src/openvpn/manage.h	/^  struct openvpn_sockaddr local;$/;"	m	struct:man_settings	typeref:struct:man_settings::openvpn_sockaddr
local	src/openvpn/multi.h	/^  struct mroute_addr local;$/;"	m	struct:multi_context	typeref:struct:multi_context::mroute_addr
local	src/openvpn/options.h	/^  const char *local;$/;"	m	struct:connection_entry
local	src/openvpn/socket.h	/^  struct openvpn_sockaddr local;$/;"	m	struct:link_socket_addr	typeref:struct:link_socket_addr::openvpn_sockaddr
local	src/openvpn/tun.h	/^  in_addr_t local;$/;"	m	struct:tuntap
local_host	src/openvpn/socket.h	/^  const char *local_host;$/;"	m	struct:link_socket
local_ip	src/openvpn/manage.h	/^  in_addr_t local_ip;$/;"	m	struct:log_entry
local_ipv6	src/openvpn/tun.h	/^  struct in6_addr local_ipv6;$/;"	m	struct:tuntap	typeref:struct:tuntap::in6_addr
local_options	src/openvpn/ssl_common.h	/^  const char *local_options;$/;"	m	struct:tls_options
local_options_string	src/openvpn/ssl.c	/^local_options_string (const struct tls_session *session)$/;"	f	file:
local_port	src/openvpn/options.h	/^  int local_port;$/;"	m	struct:connection_entry
local_port	src/openvpn/socket.h	/^  int local_port;$/;"	m	struct:link_socket
local_port_defined	src/openvpn/options.h	/^  bool local_port_defined;$/;"	m	struct:connection_entry
local_route	src/openvpn/route.c	/^local_route (in_addr_t network,$/;"	f	file:
local_unix	src/openvpn/manage.h	/^  struct sockaddr_un local_unix;$/;"	m	struct:man_settings	typeref:struct:man_settings::sockaddr_un
locked	src/openvpn/win32.h	/^  bool locked;$/;"	m	struct:semaphore
locked_cert_hash_set	src/openvpn/ssl_common.h	/^  struct cert_hash_set *locked_cert_hash_set;$/;"	m	struct:tls_multi	typeref:struct:tls_multi::cert_hash_set
locked_cn	src/openvpn/ssl_common.h	/^  char *locked_cn;$/;"	m	struct:tls_multi
locked_username	src/openvpn/ssl_common.h	/^  char *locked_username;$/;"	m	struct:tls_multi
log	src/openvpn/manage.h	/^  struct log_history *log;$/;"	m	struct:man_persist	typeref:struct:man_persist::log_history
log	src/openvpn/options.h	/^  bool log;$/;"	m	struct:options
log_entry	src/openvpn/manage.h	/^struct log_entry$/;"	s
log_entry_free_contents	src/openvpn/manage.c	/^log_entry_free_contents (struct log_entry *e)$/;"	f	file:
log_entry_print	src/openvpn/manage.c	/^log_entry_print (const struct log_entry *e, unsigned int flags, struct gc_arena *gc)$/;"	f
log_entry_union	src/openvpn/manage.h	/^union log_entry_union {$/;"	u
log_history	src/openvpn/manage.h	/^struct log_history$/;"	s
log_history_add	src/openvpn/manage.c	/^log_history_add (struct log_history *h, const struct log_entry *le)$/;"	f
log_history_cache	src/openvpn/manage.h	/^  int log_history_cache;$/;"	m	struct:man_settings
log_history_capacity	src/openvpn/manage.h	/^log_history_capacity (const struct log_history *h)$/;"	f
log_history_close	src/openvpn/manage.c	/^log_history_close (struct log_history *h)$/;"	f
log_history_free_contents	src/openvpn/manage.c	/^log_history_free_contents (struct log_history *h)$/;"	f	file:
log_history_init	src/openvpn/manage.c	/^log_history_init (const int capacity)$/;"	f
log_history_obj_init	src/openvpn/manage.c	/^log_history_obj_init (struct log_history *h, int capacity)$/;"	f	file:
log_history_ref	src/openvpn/manage.c	/^log_history_ref (const struct log_history *h, const int index)$/;"	f
log_history_resize	src/openvpn/manage.c	/^log_history_resize (struct log_history *h, const int capacity)$/;"	f
log_history_size	src/openvpn/manage.h	/^log_history_size (const struct log_history *h)$/;"	f
log_index	src/openvpn/manage.c	/^log_index (const struct log_history *h, int i)$/;"	f	file:
log_realtime	src/openvpn/manage.h	/^  bool log_realtime;$/;"	m	struct:man_connection
log_rw	src/openvpn/openvpn.h	/^  bool log_rw;$/;"	m	struct:context_2
lookup_by_cid	src/openvpn/multi.c	/^lookup_by_cid (struct multi_context *m, const unsigned long cid)$/;"	f	file:
lookup_cn_rule	src/openvpn/pf.c	/^lookup_cn_rule (struct hash *h, const char *cn, const uint32_t cn_hash)$/;"	f	file:
lower	src/openvpn/sig.c	/^  const char *lower;$/;"	m	struct:signame	file:
lsa	src/openvpn/socket.h	/^  struct link_socket_addr *lsa;$/;"	m	struct:link_socket_info	typeref:struct:link_socket_info::link_socket_addr
lsteps	src/openvpn/schedule.c	/^  int lsteps;$/;"	m	struct:status	file:
lt	src/openvpn/schedule.h	/^  struct schedule_entry *lt;$/;"	m	struct:schedule_entry	typeref:struct:schedule_entry::schedule_entry
lzo	src/openvpn/options.h	/^  unsigned int lzo;$/;"	m	struct:options
lzo_adaptive_compress	src/openvpn/lzo.h	/^struct lzo_adaptive_compress {$/;"	s
lzo_adaptive_compress_data	src/openvpn/lzo.c	/^lzo_adaptive_compress_data (struct lzo_adaptive_compress *ac, int n_total, int n_comp)$/;"	f	file:
lzo_adaptive_compress_test	src/openvpn/lzo.c	/^lzo_adaptive_compress_test (struct lzo_adaptive_compress *ac)$/;"	f	file:
lzo_adjust_frame_parameters	src/openvpn/lzo.c	/^void lzo_adjust_frame_parameters (struct frame *frame)$/;"	f
lzo_compress	src/openvpn/lzo.c	/^lzo_compress (struct buffer *buf, struct buffer work,$/;"	f
lzo_compress_buf	src/openvpn/openvpn.h	/^  struct buffer lzo_compress_buf;$/;"	m	struct:context_buffers	typeref:struct:context_buffers::buffer
lzo_compress_init	src/openvpn/lzo.c	/^lzo_compress_init (struct lzo_compress_workspace *lzowork, unsigned int flags)$/;"	f
lzo_compress_uninit	src/openvpn/lzo.c	/^lzo_compress_uninit (struct lzo_compress_workspace *lzowork)$/;"	f
lzo_compress_workspace	src/openvpn/lzo.h	/^struct lzo_compress_workspace$/;"	s
lzo_compression_enabled	src/openvpn/lzo.c	/^lzo_compression_enabled (struct lzo_compress_workspace *lzowork)$/;"	f	file:
lzo_compwork	src/openvpn/openvpn.h	/^  struct lzo_compress_workspace lzo_compwork;$/;"	m	struct:context_2	typeref:struct:context_2::lzo_compress_workspace
lzo_decompress	src/openvpn/lzo.c	/^lzo_decompress (struct buffer *buf, struct buffer work,$/;"	f
lzo_decompress_buf	src/openvpn/openvpn.h	/^  struct buffer lzo_decompress_buf;$/;"	m	struct:context_buffers	typeref:struct:context_buffers::buffer
lzo_defined	src/openvpn/lzo.h	/^lzo_defined (const struct lzo_compress_workspace *lzowork)$/;"	f
lzo_modify_flags	src/openvpn/lzo.c	/^lzo_modify_flags (struct lzo_compress_workspace *lzowork, unsigned int flags)$/;"	f
lzo_print_stats	src/openvpn/lzo.c	/^void lzo_print_stats (const struct lzo_compress_workspace *lzo_compwork, struct status_output *so)$/;"	f
m_rtm	src/openvpn/route.c	/^  struct rt_msghdr m_rtm;$/;"	m	struct:__anon6	typeref:struct:__anon6::rt_msghdr	file:
m_rtm	src/openvpn/route.c	/^  struct rt_msghdr m_rtm;$/;"	m	struct:__anon7	typeref:struct:__anon7::rt_msghdr	file:
m_rtm	src/openvpn/route.c	/^  struct rt_msghdr m_rtm;$/;"	m	struct:rtmsg	typeref:struct:rtmsg::rt_msghdr	file:
m_rtmsg	src/openvpn/route.c	/^} m_rtmsg;$/;"	v	typeref:struct:__anon6
m_rtmsg	src/openvpn/route.c	/^} m_rtmsg;$/;"	v	typeref:struct:__anon7
m_space	src/openvpn/route.c	/^  char       m_space[512];$/;"	m	struct:__anon6	file:
m_space	src/openvpn/route.c	/^  char       m_space[512];$/;"	m	struct:__anon7	file:
m_space	src/openvpn/route.c	/^  char       m_space[512];$/;"	m	struct:rtmsg	file:
mac_addr_safe	src/openvpn/socket.c	/^mac_addr_safe (const char *mac_addr)$/;"	f
mac_addr_size	src/openvpn/proto.h	/^  uint8_t  mac_addr_size;       \/* 0x06 *\/$/;"	m	struct:openvpn_arp
mac_addr_type	src/openvpn/proto.h	/^  uint16_t mac_addr_type;       \/* 0x0001 *\/$/;"	m	struct:openvpn_arp
mac_dest	src/openvpn/proto.h	/^  uint8_t   mac_dest[OPENVPN_ETH_ALEN];$/;"	m	struct:openvpn_arp
mac_src	src/openvpn/proto.h	/^  uint8_t   mac_src[OPENVPN_ETH_ALEN];$/;"	m	struct:openvpn_arp
magic	src/openvpn/dhcp.h	/^  uint32_t magic;      \/* must be 0x63825363 (network order) *\/$/;"	m	struct:dhcp
main	build/msvc/msvc-generate/msvc-generate.js	/^function main() {$/;"	f
main	config.guess	/^		main()$/;"	f
main	config.guess	/^	main ()$/;"	f
main	config.guess	/^main ()$/;"	f
main	src/openvpn/openvpn.c	/^main (int argc, char *argv[]) {$/;"	f
main	src/openvpnserv/service.c	/^int __cdecl main(int argc, char **argv)$/;"	f
make_arg_array	src/openvpn/misc.c	/^make_arg_array (const char *first, const char *parms, struct gc_arena *gc)$/;"	f
make_arg_copy	src/openvpn/misc.c	/^make_arg_copy (char **p, struct gc_arena *gc)$/;"	f	file:
make_base64_string	src/openvpn/proxy.c	/^make_base64_string (const uint8_t *str, struct gc_arena *gc)$/;"	f
make_base64_string2	src/openvpn/proxy.c	/^make_base64_string2 (const uint8_t *str, int src_len, struct gc_arena *gc)$/;"	f
make_dummy_depfile	depcomp	/^make_dummy_depfile ()$/;"	f
make_env_array	src/openvpn/misc.c	/^make_env_array (const struct env_set *es,$/;"	f
make_extended_arg_array	src/openvpn/misc.c	/^make_extended_arg_array (char **p, struct gc_arena *gc)$/;"	f
make_inline_array	src/openvpn/misc.c	/^make_inline_array (const char *str, struct gc_arena *gc)$/;"	f	file:
man_accept	src/openvpn/manage.c	/^man_accept (struct management *man)$/;"	f	file:
man_block	src/openvpn/manage.c	/^man_block (struct management *man, volatile int *signal_received, const time_t expire)$/;"	f	file:
man_bytecount	src/openvpn/manage.c	/^man_bytecount (struct management *man, const int update_seconds)$/;"	f	file:
man_bytecount_output_client	src/openvpn/manage.c	/^man_bytecount_output_client (struct management *man)$/;"	f
man_bytecount_output_server	src/openvpn/manage.c	/^man_bytecount_output_server (struct management *man,$/;"	f
man_bytecount_possible_output_client	src/openvpn/manage.h	/^man_bytecount_possible_output_client (struct management *man)$/;"	f
man_check_for_signals	src/openvpn/manage.c	/^man_check_for_signals (volatile int *signal_received)$/;"	f	file:
man_check_password	src/openvpn/manage.c	/^man_check_password (struct management *man, const char *line)$/;"	f	file:
man_client_auth	src/openvpn/manage.c	/^man_client_auth (struct management *man, const char *cid_str, const char *kid_str, const bool extra)$/;"	f	file:
man_client_deny	src/openvpn/manage.c	/^man_client_deny (struct management *man, const char *cid_str, const char *kid_str, const char *reason, const char *client_reason)$/;"	f	file:
man_client_kill	src/openvpn/manage.c	/^man_client_kill (struct management *man, const char *cid_str, const char *kill_msg)$/;"	f	file:
man_client_n_clients	src/openvpn/manage.c	/^man_client_n_clients (struct management *man)$/;"	f	file:
man_client_pf	src/openvpn/manage.c	/^man_client_pf (struct management *man, const char *cid_str)$/;"	f	file:
man_close_socket	src/openvpn/manage.c	/^man_close_socket (struct management *man, const socket_descriptor_t sd)$/;"	f	file:
man_connect	src/openvpn/manage.c	/^man_connect (struct management *man)$/;"	f	file:
man_connection	src/openvpn/manage.h	/^struct man_connection {$/;"	s
man_connection_clear	src/openvpn/manage.c	/^man_connection_clear (struct man_connection *mc)$/;"	f	file:
man_connection_close	src/openvpn/manage.c	/^man_connection_close (struct management *man)$/;"	f	file:
man_connection_init	src/openvpn/manage.c	/^man_connection_init (struct management *man)$/;"	f	file:
man_connection_settings_reset	src/openvpn/manage.c	/^man_connection_settings_reset (struct management *man)$/;"	f	file:
man_def_auth_context	src/openvpn/manage.h	/^struct man_def_auth_context {$/;"	s
man_def_auth_set_client_reason	src/openvpn/ssl_verify.c	/^man_def_auth_set_client_reason (struct tls_multi *multi, const char *client_reason)$/;"	f
man_def_auth_test	src/openvpn/ssl_verify.c	/^man_def_auth_test (const struct key_state *ks)$/;"	f	file:
man_delete_unix_socket	src/openvpn/manage.c	/^man_delete_unix_socket (struct management *man)$/;"	f	file:
man_dispatch_command	src/openvpn/manage.c	/^man_dispatch_command (struct management *man, struct status_output *so, const char **p, const int nparms)$/;"	f	file:
man_echo	src/openvpn/manage.c	/^man_echo (struct management *man, const char *parm)$/;"	f	file:
man_env_filter	src/openvpn/manage.c	/^man_env_filter (struct management *man, const int level)$/;"	f	file:
man_forget_passwords	src/openvpn/manage.c	/^man_forget_passwords (struct management *man)$/;"	f	file:
man_help	src/openvpn/manage.c	/^man_help ()$/;"	f	file:
man_history	src/openvpn/manage.c	/^man_history (struct management *man,$/;"	f	file:
man_hold	src/openvpn/manage.c	/^man_hold (struct management *man, const char *cmd)$/;"	f	file:
man_io_error	src/openvpn/manage.c	/^man_io_error (struct management *man, const char *prefix)$/;"	f	file:
man_kill	src/openvpn/manage.c	/^man_kill (struct management *man, const char *victim)$/;"	f	file:
man_listen	src/openvpn/manage.c	/^man_listen (struct management *man)$/;"	f	file:
man_load_stats	src/openvpn/manage.c	/^man_load_stats (struct management *man)$/;"	f	file:
man_log	src/openvpn/manage.c	/^man_log (struct management *man, const char *parm)$/;"	f	file:
man_mod_signal	src/openvpn/manage.c	/^man_mod_signal (const struct management *man, const int signum)$/;"	f	file:
man_need	src/openvpn/manage.c	/^man_need (struct management *man, const char **p, const int n, unsigned int flags)$/;"	f	file:
man_net	src/openvpn/manage.c	/^man_net (struct management *man)$/;"	f	file:
man_new_connection_post	src/openvpn/manage.c	/^man_new_connection_post (struct management *man, const char *description)$/;"	f	file:
man_output_env	src/openvpn/manage.c	/^man_output_env (const struct env_set *es, const bool tail, const int env_filter_level, const char *prefix)$/;"	f	file:
man_output_extra_env	src/openvpn/manage.c	/^man_output_extra_env (struct management *man, const char *prefix)$/;"	f	file:
man_output_list_push	src/openvpn/manage.c	/^man_output_list_push (struct management *man, const char *str)$/;"	f	file:
man_output_list_push_finalize	src/openvpn/manage.c	/^man_output_list_push_finalize (struct management *man)$/;"	f	file:
man_output_list_push_str	src/openvpn/manage.c	/^man_output_list_push_str (struct management *man, const char *str)$/;"	f	file:
man_output_peer_info_env	src/openvpn/manage.c	/^man_output_peer_info_env (struct management *man, struct man_def_auth_context *mdac)$/;"	f	file:
man_output_standalone	src/openvpn/manage.c	/^man_output_standalone (struct management *man, volatile int *signal_received)$/;"	f	file:
man_password_needed	src/openvpn/manage.c	/^man_password_needed (struct management *man)$/;"	f	file:
man_persist	src/openvpn/manage.h	/^struct man_persist {$/;"	s
man_persist_close	src/openvpn/manage.c	/^man_persist_close (struct man_persist *mp)$/;"	f	file:
man_persist_init	src/openvpn/manage.c	/^man_persist_init (struct management *man,$/;"	f	file:
man_persist_state	src/openvpn/manage.c	/^man_persist_state (unsigned int *persistent, const int n)$/;"	f	file:
man_pkcs11_id_count	src/openvpn/manage.c	/^man_pkcs11_id_count (struct management *man)$/;"	f	file:
man_pkcs11_id_get	src/openvpn/manage.c	/^man_pkcs11_id_get (struct management *man, const int index)$/;"	f	file:
man_process_command	src/openvpn/manage.c	/^man_process_command (struct management *man, const char *line)$/;"	f	file:
man_prompt	src/openvpn/manage.c	/^man_prompt (struct management *man)$/;"	f	file:
man_proxy	src/openvpn/manage.c	/^man_proxy (struct management *man, const char **p)$/;"	f	file:
man_query_need_ok	src/openvpn/manage.c	/^man_query_need_ok (struct management *man, const char *type, const char *action)$/;"	f	file:
man_query_need_str	src/openvpn/manage.c	/^man_query_need_str (struct management *man, const char *type, const char *action)$/;"	f	file:
man_query_password	src/openvpn/manage.c	/^man_query_password (struct management *man, const char *type, const char *string)$/;"	f	file:
man_query_user_pass	src/openvpn/manage.c	/^man_query_user_pass (struct management *man,$/;"	f	file:
man_query_username	src/openvpn/manage.c	/^man_query_username (struct management *man, const char *type, const char *string)$/;"	f	file:
man_read	src/openvpn/manage.c	/^man_read (struct management *man)$/;"	f	file:
man_record_peer_info	src/openvpn/manage.c	/^man_record_peer_info (struct management *man)$/;"	f	file:
man_remote	src/openvpn/manage.c	/^man_remote (struct management *man, const char **p)$/;"	f	file:
man_reset_client_socket	src/openvpn/manage.c	/^man_reset_client_socket (struct management *man, const bool exiting)$/;"	f	file:
man_rsa_sig	src/openvpn/manage.c	/^man_rsa_sig (struct management *man)$/;"	f	file:
man_settings	src/openvpn/manage.h	/^struct man_settings {$/;"	s
man_settings_close	src/openvpn/manage.c	/^man_settings_close (struct man_settings *ms)$/;"	f	file:
man_settings_init	src/openvpn/manage.c	/^man_settings_init (struct man_settings *ms,$/;"	f	file:
man_signal	src/openvpn/manage.c	/^man_signal (struct management *man, const char *name)$/;"	f	file:
man_standalone_event_loop	src/openvpn/manage.c	/^man_standalone_event_loop (struct management *man, volatile int *signal_received, const time_t expire)$/;"	f	file:
man_standalone_ok	src/openvpn/manage.c	/^man_standalone_ok (const struct management *man)$/;"	f	file:
man_start_ne32	src/openvpn/manage.c	/^man_start_ne32 (struct management *man)$/;"	f	file:
man_state	src/openvpn/manage.c	/^man_state (struct management *man, const char *parm)$/;"	f	file:
man_state_name	src/openvpn/manage.c	/^man_state_name (const int state)$/;"	f	file:
man_status	src/openvpn/manage.c	/^man_status (struct management *man, const int version, struct status_output *so)$/;"	f	file:
man_stop_ne32	src/openvpn/manage.c	/^man_stop_ne32 (struct management *man)$/;"	f	file:
man_up_finalize	src/openvpn/manage.c	/^man_up_finalize (struct management *man)$/;"	f	file:
man_update_io_state	src/openvpn/manage.c	/^man_update_io_state (struct management *man)$/;"	f	file:
man_verify_unix_peer_uid_gid	src/openvpn/manage.c	/^man_verify_unix_peer_uid_gid (struct management *man, const socket_descriptor_t sd)$/;"	f	file:
man_wait_for_client_connection	src/openvpn/manage.c	/^man_wait_for_client_connection (struct management *man,$/;"	f	file:
man_welcome	src/openvpn/manage.c	/^man_welcome (struct management *man)$/;"	f	file:
man_write	src/openvpn/manage.c	/^man_write (struct management *man)$/;"	f	file:
management	src/openvpn/manage.c	/^struct management *management; \/* GLOBAL *\/$/;"	v	typeref:struct:management
management	src/openvpn/manage.h	/^struct management$/;"	s
management_addr	src/openvpn/options.h	/^  const char *management_addr;$/;"	m	struct:options
management_auth_failure	src/openvpn/manage.c	/^management_auth_failure (struct management *man, const char *type, const char *reason)$/;"	f
management_auth_token	src/openvpn/manage.c	/^management_auth_token (struct management *man, const char *token)$/;"	f
management_bytes_in	src/openvpn/manage.h	/^management_bytes_in (struct management *man, const int size)$/;"	f
management_bytes_in_client	src/openvpn/manage.h	/^management_bytes_in_client (struct management *man, const int size)$/;"	f
management_bytes_out	src/openvpn/manage.h	/^management_bytes_out (struct management *man, const int size)$/;"	f
management_bytes_out_client	src/openvpn/manage.h	/^management_bytes_out_client (struct management *man, const int size)$/;"	f
management_bytes_server	src/openvpn/manage.h	/^management_bytes_server (struct management *man,$/;"	f
management_callback	src/openvpn/manage.h	/^struct management_callback$/;"	s
management_callback_kill_by_addr	src/openvpn/multi.c	/^management_callback_kill_by_addr (void *arg, const in_addr_t addr, const int port)$/;"	f	file:
management_callback_kill_by_cn	src/openvpn/multi.c	/^management_callback_kill_by_cn (void *arg, const char *del_cn)$/;"	f	file:
management_callback_n_clients	src/openvpn/multi.c	/^management_callback_n_clients (void *arg)$/;"	f	file:
management_callback_proxy_cmd	src/openvpn/init.c	/^management_callback_proxy_cmd (void *arg, const char **p)$/;"	f	file:
management_callback_remote_cmd	src/openvpn/init.c	/^management_callback_remote_cmd (void *arg, const char **p)$/;"	f	file:
management_callback_status	src/openvpn/multi.c	/^management_callback_status (void *arg, const int version, struct status_output *so)$/;"	f	file:
management_callback_status_p2p	src/openvpn/init.c	/^management_callback_status_p2p (void *arg, const int version, struct status_output *so)$/;"	f	file:
management_clear_callback	src/openvpn/manage.c	/^management_clear_callback (struct management *man)$/;"	f
management_client_auth	src/openvpn/multi.c	/^management_client_auth (void *arg,$/;"	f	file:
management_client_group	src/openvpn/options.h	/^  const char *management_client_group;$/;"	m	struct:options
management_client_pf	src/openvpn/multi.c	/^management_client_pf (void *arg,$/;"	f	file:
management_client_user	src/openvpn/options.h	/^  const char *management_client_user;$/;"	m	struct:options
management_close	src/openvpn/manage.c	/^management_close (struct management *man)$/;"	f
management_connected	src/openvpn/manage.h	/^management_connected (const struct management *man)$/;"	f
management_connection_established	src/openvpn/manage.c	/^management_connection_established (struct management *management,$/;"	f
management_delete_event	src/openvpn/multi.c	/^management_delete_event (void *arg, event_t event)$/;"	f	file:
management_echo	src/openvpn/manage.c	/^management_echo (struct management *man, const char *string, const bool pull)$/;"	f
management_echo_buffer_size	src/openvpn/options.h	/^  int management_echo_buffer_size;$/;"	m	struct:options
management_enable_def_auth	src/openvpn/manage.h	/^management_enable_def_auth (const struct management *man)$/;"	f
management_enable_pf	src/openvpn/manage.h	/^management_enable_pf (const struct management *man)$/;"	f
management_event_loop_n_seconds	src/openvpn/manage.c	/^management_event_loop_n_seconds (struct management *man, int sec)$/;"	f
management_flags	src/openvpn/options.h	/^  unsigned int management_flags;$/;"	m	struct:options
management_get_peer_info	src/openvpn/multi.c	/^management_get_peer_info (void *arg, const unsigned long cid)$/;"	f	file:
management_hold	src/openvpn/manage.c	/^management_hold (struct management *man)$/;"	f
management_init	src/openvpn/manage.c	/^management_init (void)$/;"	f
management_io	src/openvpn/manage.c	/^management_io (struct management *man)$/;"	f
management_kill_by_cid	src/openvpn/multi.c	/^management_kill_by_cid (void *arg, const unsigned long cid, const char *kill_msg)$/;"	f	file:
management_learn_addr	src/openvpn/manage.c	/^management_learn_addr (struct management *management,$/;"	f
management_log_history_cache	src/openvpn/options.h	/^  int management_log_history_cache;$/;"	m	struct:options
management_notify	src/openvpn/manage.c	/^management_notify(struct management *man, const char *severity, const char *type, const char *text)$/;"	f
management_notify_client_close	src/openvpn/manage.c	/^management_notify_client_close (struct management *management,$/;"	f
management_notify_client_needing_auth	src/openvpn/manage.c	/^management_notify_client_needing_auth (struct management *management,$/;"	f
management_notify_generic	src/openvpn/manage.c	/^management_notify_generic (struct management *man, const char *str)$/;"	f
management_open	src/openvpn/manage.c	/^management_open (struct management *man,$/;"	f
management_over_tunnel	src/openvpn/manage.h	/^  bool management_over_tunnel;$/;"	m	struct:man_settings
management_persist_flags	src/openvpn/mtcp.h	/^  unsigned int management_persist_flags;$/;"	m	struct:multi_tcp
management_port	src/openvpn/options.h	/^  int management_port;$/;"	m	struct:options
management_post_tunnel_open	src/openvpn/manage.c	/^management_post_tunnel_open (struct management *man, const in_addr_t tun_local_ip)$/;"	f
management_pre_tunnel_close	src/openvpn/manage.c	/^management_pre_tunnel_close (struct management *man)$/;"	f
management_query_proxy_enabled	src/openvpn/manage.h	/^management_query_proxy_enabled (const struct management *man)$/;"	f
management_query_remote_enabled	src/openvpn/manage.h	/^management_query_remote_enabled (const struct management *man)$/;"	f
management_query_rsa_sig	src/openvpn/manage.c	/^management_query_rsa_sig (struct management *man,$/;"	f
management_query_user_pass	src/openvpn/manage.c	/^management_query_user_pass (struct management *man,$/;"	f
management_query_user_pass_enabled	src/openvpn/manage.h	/^management_query_user_pass_enabled (const struct management *man)$/;"	f
management_set_callback	src/openvpn/manage.c	/^management_set_callback (struct management *man,$/;"	f
management_set_state	src/openvpn/manage.c	/^management_set_state (struct management *man,$/;"	f
management_should_daemonize	src/openvpn/manage.c	/^management_should_daemonize (struct management *man)$/;"	f
management_show_net_callback	src/openvpn/init.c	/^management_show_net_callback (void *arg, const int msglevel)$/;"	f
management_socket_set	src/openvpn/manage.c	/^management_socket_set (struct management *man,$/;"	f
management_state_buffer_size	src/openvpn/options.h	/^  int management_state_buffer_size;$/;"	m	struct:options
management_up_down	src/openvpn/manage.c	/^management_up_down(struct management *man, const char *updown, const struct env_set *es)$/;"	f
management_user_pass	src/openvpn/options.h	/^  const char *management_user_pass;$/;"	m	struct:options
management_would_hold	src/openvpn/manage.c	/^management_would_hold (struct management *man)$/;"	f
management_write_peer_info_file	src/openvpn/options.h	/^  const char *management_write_peer_info_file;$/;"	m	struct:options
mansig	src/openvpn/manage.h	/^  unsigned int mansig;$/;"	m	struct:man_settings
map	src/openvpn/fragment.h	/^  unsigned int map;$/;"	m	struct:fragment
mark	src/openvpn/options.h	/^  int mark;$/;"	m	struct:options
mask	src/openvpn/list.h	/^  int mask;$/;"	m	struct:hash
match	src/openvpnserv/openvpnserv.c	/^match (const WIN32_FIND_DATA *find, const char *ext)$/;"	f	file:
max	src/openvpn/otime.h	/^  int max;$/;"	m	struct:frequency_limit
max	src/openvpn/perf.c	/^  double max;$/;"	m	struct:perf	file:
max	src/openvpn/route.c	2738;"	d	file:
max	src/openvpn/route.c	2922;"	d	file:
max_backtrack_stat	src/openvpn/packet_id.h	/^  int max_backtrack_stat;     \/* maximum backtrack seen so far *\/$/;"	m	struct:packet_id_rec
max_clients	src/openvpn/multi.h	/^  int max_clients;$/;"	m	struct:multi_context
max_clients	src/openvpn/options.h	/^  int max_clients;$/;"	m	struct:options
max_frag_size	src/openvpn/fragment.h	/^  int max_frag_size;		\/**< Maximum size of each %fragment. *\/$/;"	m	struct:fragment
max_int	src/openvpn/integer.h	/^max_int (int x, int y)$/;"	f
max_queued	src/openvpn/mbuf.h	/^  unsigned int max_queued;$/;"	m	struct:mbuf_set
max_recv_size_local	src/openvpn/openvpn.h	/^  int max_recv_size_local;	\/* max packet size received *\/$/;"	m	struct:context_2
max_recv_size_remote	src/openvpn/openvpn.h	/^  int max_recv_size_remote;	\/* max packet size received by remote *\/$/;"	m	struct:context_2
max_routes	src/openvpn/options.h	/^  int max_routes;$/;"	m	struct:options
max_routes_per_client	src/openvpn/options.h	/^  int max_routes_per_client;$/;"	m	struct:options
max_send_size_local	src/openvpn/openvpn.h	/^  int max_send_size_local;	\/* max packet size sent *\/$/;"	m	struct:context_2
max_send_size_remote	src/openvpn/openvpn.h	/^  int max_send_size_remote;	\/* max packet size sent by remote *\/$/;"	m	struct:context_2
max_size	src/openvpn/buffer.h	/^  int max_size;              \/* maximum size list should grow to *\/$/;"	m	struct:buffer_list
maxevents	src/openvpn/event.c	/^  int maxevents;$/;"	m	struct:ep_set	file:
maxevents	src/openvpn/mtcp.h	/^  int maxevents;$/;"	m	struct:multi_tcp
maxfd	src/openvpn/event.c	/^  int maxfd;    \/* largest fd seen so far, always < capacity *\/$/;"	m	struct:se_set	file:
maxlen	src/openvpn/socket.h	/^  int maxlen;$/;"	m	struct:stream_buf
mbuf	src/openvpn/multi.h	/^  struct mbuf_set *mbuf;        \/**< Set of buffers for passing data$/;"	m	struct:multi_context	typeref:struct:multi_context::mbuf_set
mbuf_add_item	src/openvpn/mbuf.c	/^mbuf_add_item (struct mbuf_set *ms, const struct mbuf_item *item)$/;"	f
mbuf_alloc_buf	src/openvpn/mbuf.c	/^mbuf_alloc_buf (const struct buffer *buf)$/;"	f
mbuf_buffer	src/openvpn/mbuf.h	/^struct mbuf_buffer$/;"	s
mbuf_defined	src/openvpn/mbuf.h	/^mbuf_defined (const struct mbuf_set *ms)$/;"	f
mbuf_dereference_instance	src/openvpn/mbuf.c	/^mbuf_dereference_instance (struct mbuf_set *ms, struct multi_instance *mi)$/;"	f
mbuf_extract_item	src/openvpn/mbuf.c	/^mbuf_extract_item (struct mbuf_set *ms, struct mbuf_item *item)$/;"	f
mbuf_free	src/openvpn/mbuf.c	/^mbuf_free (struct mbuf_set *ms)$/;"	f
mbuf_free_buf	src/openvpn/mbuf.c	/^mbuf_free_buf (struct mbuf_buffer *mb)$/;"	f
mbuf_init	src/openvpn/mbuf.c	/^mbuf_init (unsigned int size)$/;"	f
mbuf_item	src/openvpn/mbuf.h	/^struct mbuf_item$/;"	s
mbuf_len	src/openvpn/mbuf.h	/^mbuf_len (const struct mbuf_set *ms)$/;"	f
mbuf_maximum_queued	src/openvpn/mbuf.h	/^mbuf_maximum_queued (const struct mbuf_set *ms)$/;"	f
mbuf_peek	src/openvpn/mbuf.h	/^mbuf_peek (struct mbuf_set *ms)$/;"	f
mbuf_peek_dowork	src/openvpn/mbuf.c	/^mbuf_peek_dowork (struct mbuf_set *ms)$/;"	f
mbuf_set	src/openvpn/mbuf.h	/^struct mbuf_set$/;"	s
md5_digest	src/openvpn/crypto.h	/^struct md5_digest {$/;"	s
md5_digest_clear	src/openvpn/crypto.c	/^md5_digest_clear (struct md5_digest *digest)$/;"	f
md5_digest_defined	src/openvpn/crypto.c	/^md5_digest_defined (const struct md5_digest *digest)$/;"	f
md5_digest_equal	src/openvpn/crypto.c	/^md5_digest_equal (const struct md5_digest *d1, const struct md5_digest *d2)$/;"	f
md5_state	src/openvpn/crypto.h	/^struct md5_state {$/;"	s
md5_state_final	src/openvpn/crypto.c	/^md5_state_final (struct md5_state *s, struct md5_digest *out)$/;"	f
md5_state_init	src/openvpn/crypto.c	/^md5_state_init (struct md5_state *s)$/;"	f
md5_state_update	src/openvpn/crypto.c	/^md5_state_update (struct md5_state *s, void *data, size_t len)$/;"	f
md5sum	src/openvpn/crypto.c	/^md5sum (uint8_t *buf, int len, int n_print_chars, struct gc_arena *gc)$/;"	f
md_ctx_cleanup	src/openvpn/crypto_openssl.c	/^md_ctx_cleanup(EVP_MD_CTX *ctx)$/;"	f
md_ctx_cleanup	src/openvpn/crypto_polarssl.c	/^md_ctx_cleanup(md_context_t *ctx)$/;"	f
md_ctx_final	src/openvpn/crypto_openssl.c	/^md_ctx_final (EVP_MD_CTX *ctx, uint8_t *dst)$/;"	f
md_ctx_final	src/openvpn/crypto_polarssl.c	/^md_ctx_final (md_context_t *ctx, uint8_t *dst)$/;"	f
md_ctx_init	src/openvpn/crypto_openssl.c	/^md_ctx_init (EVP_MD_CTX *ctx, const EVP_MD *kt)$/;"	f
md_ctx_init	src/openvpn/crypto_polarssl.c	/^md_ctx_init (md_context_t *ctx, const md_info_t *kt)$/;"	f
md_ctx_size	src/openvpn/crypto_openssl.c	/^md_ctx_size (const EVP_MD_CTX *ctx)$/;"	f
md_ctx_size	src/openvpn/crypto_polarssl.c	/^md_ctx_size (const md_context_t *ctx)$/;"	f
md_ctx_t	src/openvpn/crypto_openssl.h	/^typedef EVP_MD_CTX md_ctx_t;$/;"	t
md_ctx_t	src/openvpn/crypto_polarssl.h	/^typedef md_context_t md_ctx_t;$/;"	t
md_ctx_update	src/openvpn/crypto_openssl.c	/^md_ctx_update (EVP_MD_CTX *ctx, const uint8_t *src, int src_len)$/;"	f
md_ctx_update	src/openvpn/crypto_polarssl.c	/^md_ctx_update (md_context_t *ctx, const uint8_t *src, int src_len)$/;"	f
md_full	src/openvpn/crypto_openssl.c	/^md_full (const EVP_MD *kt, const uint8_t *src, int src_len, uint8_t *dst)$/;"	f
md_full	src/openvpn/crypto_polarssl.c	/^md_full (const md_kt_t *kt, const uint8_t *src, int src_len, uint8_t *dst)$/;"	f
md_kt_get	src/openvpn/crypto_openssl.c	/^md_kt_get (const char *digest)$/;"	f
md_kt_get	src/openvpn/crypto_polarssl.c	/^md_kt_get (const char *digest)$/;"	f
md_kt_name	src/openvpn/crypto_openssl.c	/^md_kt_name (const EVP_MD *kt)$/;"	f
md_kt_name	src/openvpn/crypto_polarssl.c	/^md_kt_name (const md_info_t *kt)$/;"	f
md_kt_size	src/openvpn/crypto_openssl.c	/^md_kt_size (const EVP_MD *kt)$/;"	f
md_kt_size	src/openvpn/crypto_polarssl.c	/^md_kt_size (const md_info_t *kt)$/;"	f
md_kt_t	src/openvpn/crypto_openssl.h	/^typedef EVP_MD md_kt_t;$/;"	t
md_kt_t	src/openvpn/crypto_polarssl.h	/^typedef md_info_t md_kt_t;$/;"	t
mda_context	src/openvpn/openvpn.h	/^  struct man_def_auth_context mda_context;$/;"	m	struct:context_2	typeref:struct:context_2::man_def_auth_context
mda_context	src/openvpn/ssl_common.h	/^  struct man_def_auth_context *mda_context;$/;"	m	struct:tls_options	typeref:struct:tls_options::man_def_auth_context
mda_key_id	src/openvpn/ssl_common.h	/^  unsigned int mda_key_id;$/;"	m	struct:key_state
mda_key_id_counter	src/openvpn/manage.h	/^  unsigned int mda_key_id_counter;$/;"	m	struct:man_def_auth_context
mda_status	src/openvpn/ssl_common.h	/^  unsigned int mda_status;$/;"	m	struct:key_state
memcmp_constant_time	src/openvpn/crypto.c	/^memcmp_constant_time (const void *a, const void *b, size_t size) {$/;"	f	file:
memstats_fn	src/openvpn/options.h	/^  char *memstats_fn;$/;"	m	struct:options
metric	src/openvpn/route.h	/^  const char *metric;		\/* e.g. "5" *\/$/;"	m	struct:route_ipv6_option
metric	src/openvpn/route.h	/^  const char *metric;$/;"	m	struct:route_option
metric	src/openvpn/route.h	/^  int metric;$/;"	m	struct:route_ipv4
metric	src/openvpn/route.h	/^  int metric;$/;"	m	struct:route_ipv6
metric_defined	src/openvpn/route.h	/^  bool metric_defined;$/;"	m	struct:route_ipv6
metric_names	src/openvpn/perf.c	/^static const char *metric_names[] = {$/;"	v	file:
mi_prefix	src/openvpn/multi.c	/^mi_prefix (const struct multi_instance *mi)$/;"	f	file:
min_int	src/openvpn/integer.h	/^min_int (int x, int y)$/;"	f
min_version_required	src/openvpn/plugin.h	/^  openvpn_plugin_min_version_required_v1 min_version_required;$/;"	m	struct:plugin
mix	src/openvpn/list.c	573;"	d	file:
mlock	src/openvpn/options.h	/^  bool mlock;$/;"	m	struct:options
mmap_fn	src/openvpn/mstats.c	/^static char mmap_fn[128];$/;"	v	file:
mmap_stats	src/openvpn/mstats.c	/^volatile struct mmap_stats *mmap_stats = NULL; \/* GLOBAL *\/$/;"	v	typeref:struct:mmap_stats
mmap_stats	src/openvpn/mstats.h	/^struct mmap_stats {$/;"	s
mode	src/openvpn/openvpn.h	/^  int mode;                     \/**< Role of this context within the$/;"	m	struct:context
mode	src/openvpn/options.h	/^  int mode;$/;"	m	struct:options
mode	src/openvpn/socket.h	/^  int mode;$/;"	m	struct:link_socket
mode	src/openvpn/win32.h	/^  int mode;$/;"	m	struct:win32_signal
modext	src/openvpnserv/openvpnserv.c	/^modext (char *dest, int size, const char *src, const char *newext)$/;"	f	file:
module	src/openvpn/plugin.h	/^  HMODULE module;$/;"	m	struct:plugin
modulo_add	src/openvpn/integer.h	/^modulo_add(int x, int y, int mod)$/;"	f
modulo_subtract	src/openvpn/integer.h	/^modulo_subtract(int x, int y, int mod)$/;"	f
move_session	src/openvpn/ssl.c	/^move_session (struct tls_multi* multi, int dest, int src, bool reinit_src)$/;"	f	file:
mpp_touched	src/openvpn/multi.h	/^  struct multi_instance **mpp_touched;$/;"	m	struct:multi_context	typeref:struct:multi_context::multi_instance
mroute_addr	src/openvpn/mroute.h	/^struct mroute_addr {$/;"	s
mroute_addr_compare_function	src/openvpn/mroute.c	/^mroute_addr_compare_function (const void *key1, const void *key2)$/;"	f
mroute_addr_equal	src/openvpn/mroute.h	/^mroute_addr_equal (const struct mroute_addr *a1, const struct mroute_addr *a2)$/;"	f
mroute_addr_hash_function	src/openvpn/mroute.c	/^mroute_addr_hash_function (const void *key, uint32_t iv)$/;"	f
mroute_addr_hash_len	src/openvpn/mroute.h	/^mroute_addr_hash_len (const struct mroute_addr *a)$/;"	f
mroute_addr_hash_ptr	src/openvpn/mroute.h	/^mroute_addr_hash_ptr (const struct mroute_addr *a)$/;"	f
mroute_addr_init	src/openvpn/mroute.c	/^mroute_addr_init (struct mroute_addr *addr)$/;"	f
mroute_addr_mask_host_bits	src/openvpn/mroute.c	/^mroute_addr_mask_host_bits (struct mroute_addr *ma)$/;"	f
mroute_addr_print	src/openvpn/mroute.c	/^mroute_addr_print (const struct mroute_addr *ma,$/;"	f
mroute_addr_print_ex	src/openvpn/mroute.c	/^mroute_addr_print_ex (const struct mroute_addr *ma,$/;"	f
mroute_addr_reset	src/openvpn/mroute.h	/^mroute_addr_reset (struct mroute_addr *ma)$/;"	f
mroute_extract_addr_arp	src/openvpn/mroute.c	/^mroute_extract_addr_arp (struct mroute_addr *src,$/;"	f	file:
mroute_extract_addr_ether	src/openvpn/mroute.c	/^mroute_extract_addr_ether (struct mroute_addr *src,$/;"	f
mroute_extract_addr_from_packet	src/openvpn/mroute.h	/^mroute_extract_addr_from_packet (struct mroute_addr *src,$/;"	f
mroute_extract_addr_ipv4	src/openvpn/mroute.c	/^mroute_extract_addr_ipv4 (struct mroute_addr *src,$/;"	f
mroute_extract_in_addr_t	src/openvpn/mroute.h	/^mroute_extract_in_addr_t (struct mroute_addr *dest, const in_addr_t src)$/;"	f
mroute_extract_openvpn_sockaddr	src/openvpn/mroute.c	/^bool mroute_extract_openvpn_sockaddr (struct mroute_addr *addr,$/;"	f
mroute_get_in6_addr	src/openvpn/mroute.c	/^mroute_get_in6_addr (struct mroute_addr *ma, const struct in6_addr src, unsigned int mask)$/;"	f	file:
mroute_get_in_addr_t	src/openvpn/mroute.c	/^mroute_get_in_addr_t (struct mroute_addr *ma, const in_addr_t src, unsigned int mask)$/;"	f	file:
mroute_helper	src/openvpn/mroute.h	/^struct mroute_helper {$/;"	s
mroute_helper_add_iroute	src/openvpn/mroute.c	/^mroute_helper_add_iroute (struct mroute_helper *mh, const struct iroute *ir)$/;"	f
mroute_helper_add_iroute6	src/openvpn/mroute.c	/^mroute_helper_add_iroute6 (struct mroute_helper *mh, $/;"	f
mroute_helper_del_iroute	src/openvpn/mroute.c	/^mroute_helper_del_iroute (struct mroute_helper *mh, const struct iroute *ir)$/;"	f
mroute_helper_del_iroute6	src/openvpn/mroute.c	/^mroute_helper_del_iroute6 (struct mroute_helper *mh, $/;"	f
mroute_helper_free	src/openvpn/mroute.c	/^mroute_helper_free (struct mroute_helper *mh)$/;"	f
mroute_helper_init	src/openvpn/mroute.c	/^mroute_helper_init (int ageable_ttl_secs)$/;"	f
mroute_helper_regenerate	src/openvpn/mroute.c	/^mroute_helper_regenerate (struct mroute_helper *mh)$/;"	f	file:
mroute_is_mcast	src/openvpn/mroute.c	/^mroute_is_mcast (const in_addr_t addr)$/;"	f	file:
mroute_is_mcast_ipv6	src/openvpn/mroute.c	/^mroute_is_mcast_ipv6 (const struct in6_addr addr)$/;"	f	file:
mroute_learnable_address	src/openvpn/mroute.c	/^mroute_learnable_address (const struct mroute_addr *addr)$/;"	f
ms_error_text	src/openvpn/cryptoapi.c	/^static char *ms_error_text(DWORD ms_err)$/;"	f	file:
msg	src/openvpn/error.h	149;"	d
msg	src/openvpn/error.h	157;"	d
msg	src/openvpn/error.h	171;"	d
msg_flags	src/openvpn/manage.h	/^  unsigned int msg_flags;$/;"	m	union:log_entry_union
msg_flags_string	src/openvpn/error.c	/^msg_flags_string (const unsigned int flags, struct gc_arena *gc)$/;"	f
msg_forked	src/openvpn/error.c	/^msg_forked (void)$/;"	f
msg_fp	src/openvpn/error.c	/^msg_fp(const unsigned int flags)$/;"	f
msg_get_prefix	src/openvpn/error.h	/^msg_get_prefix (void)$/;"	f
msg_get_virtual_output	src/openvpn/error.h	/^msg_get_virtual_output (void)$/;"	f
msg_prefix	src/openvpn/multi.h	/^  const char *msg_prefix;$/;"	m	struct:multi_instance
msg_set_prefix	src/openvpn/error.h	/^msg_set_prefix (const char *prefix)$/;"	f
msg_set_virtual_output	src/openvpn/error.h	/^msg_set_virtual_output (const struct virtual_output *vo)$/;"	f
msgfp	src/openvpn/error.c	/^static FILE *msgfp;         \/* GLOBAL *\/$/;"	v	file:
msglevel	src/openvpn/status.h	/^  int msglevel;$/;"	m	struct:status_output
msglevel_forward_compatible	src/openvpn/options.c	/^msglevel_forward_compatible (struct options *options, const int msglevel)$/;"	f	file:
msgpi4	src/openvpn/socket.c	/^	struct openvpn_in4_pktinfo msgpi4;$/;"	m	union:openvpn_pktinfo	typeref:struct:openvpn_pktinfo::openvpn_in4_pktinfo	file:
msgpi6	src/openvpn/socket.c	/^	struct openvpn_in6_pktinfo msgpi6;$/;"	m	union:openvpn_pktinfo	typeref:struct:openvpn_pktinfo::openvpn_in6_pktinfo	file:
mss_fixup_dowork	src/openvpn/mss.c	/^mss_fixup_dowork (struct buffer *buf, uint16_t maxmss)$/;"	f
mss_fixup_ipv4	src/openvpn/mss.c	/^mss_fixup_ipv4 (struct buffer *buf, int maxmss)$/;"	f
mss_fixup_ipv6	src/openvpn/mss.c	/^mss_fixup_ipv6 (struct buffer *buf, int maxmss)$/;"	f
mssfix	src/openvpn/options.h	/^  int mssfix;            \/* Upper bound on TCP MSS *\/$/;"	m	struct:connection_entry
mssfix_default	src/openvpn/options.h	/^  bool mssfix_default;   \/* true if --mssfix was supplied without a parameter *\/$/;"	m	struct:connection_entry
mstats_close	src/openvpn/mstats.c	/^mstats_close(void)$/;"	f
mstats_open	src/openvpn/mstats.c	/^mstats_open(const char *fn)$/;"	f
mtcp	src/openvpn/multi.h	/^  struct multi_tcp *mtcp;       \/**< State specific to OpenVPN using TCP$/;"	m	struct:multi_context	typeref:struct:multi_context::multi_tcp
mtu	src/openvpn/socket.h	/^  int mtu;                      \/* OS discovered MTU, or 0 if unknown *\/$/;"	m	struct:link_socket
mtu_changed	src/openvpn/socket.h	/^  int mtu_changed;              \/* Set to true when mtu value is changed *\/$/;"	m	struct:link_socket_info
mtu_discover_type	src/openvpn/options.h	/^  int mtu_discover_type; \/* used if OS supports setting Path MTU discovery options on socket *\/$/;"	m	struct:connection_entry
mtu_discover_type	src/openvpn/socket.h	/^  int mtu_discover_type;$/;"	m	struct:link_socket
mtu_load_test	src/openvpn/occ.h	/^struct mtu_load_test$/;"	s
mtu_load_test_sequence	src/openvpn/occ.c	/^static const struct mtu_load_test mtu_load_test_sequence[] = {$/;"	v	typeref:struct:mtu_load_test	file:
mtu_test	src/openvpn/options.h	/^  bool mtu_test;$/;"	m	struct:options
multi_add_iroutes	src/openvpn/multi.c	/^multi_add_iroutes (struct multi_context *m,$/;"	f	file:
multi_add_mbuf	src/openvpn/multi.c	/^multi_add_mbuf (struct multi_context *m,$/;"	f
multi_bcast	src/openvpn/multi.c	/^multi_bcast (struct multi_context *m,$/;"	f	file:
multi_client_connect_mda	src/openvpn/multi.c	/^multi_client_connect_mda (struct multi_context *m,$/;"	f	file:
multi_client_connect_post	src/openvpn/multi.c	/^multi_client_connect_post (struct multi_context *m,$/;"	f	file:
multi_client_connect_post_plugin	src/openvpn/multi.c	/^multi_client_connect_post_plugin (struct multi_context *m,$/;"	f	file:
multi_client_connect_setenv	src/openvpn/multi.c	/^multi_client_connect_setenv (struct multi_context *m,$/;"	f	file:
multi_client_disconnect_script	src/openvpn/multi.c	/^multi_client_disconnect_script (struct multi_context *m,$/;"	f	file:
multi_client_disconnect_setenv	src/openvpn/multi.c	/^multi_client_disconnect_setenv (struct multi_context *m,$/;"	f	file:
multi_close_instance	src/openvpn/multi.c	/^multi_close_instance (struct multi_context *m,$/;"	f
multi_close_instance_on_signal	src/openvpn/multi.c	/^multi_close_instance_on_signal (struct multi_context *m, struct multi_instance *mi)$/;"	f
multi_connection_established	src/openvpn/multi.c	/^multi_connection_established (struct multi_context *m, struct multi_instance *mi)$/;"	f	file:
multi_context	src/openvpn/multi.h	/^struct multi_context {$/;"	s
multi_create_instance	src/openvpn/multi.c	/^multi_create_instance (struct multi_context *m, const struct mroute_addr *real)$/;"	f
multi_create_instance_tcp	src/openvpn/mtcp.c	/^multi_create_instance_tcp (struct multi_context *m)$/;"	f	file:
multi_del_iroutes	src/openvpn/multi.c	/^multi_del_iroutes (struct multi_context *m,$/;"	f	file:
multi_delete_dup	src/openvpn/multi.c	/^multi_delete_dup (struct multi_context *m, struct multi_instance *new_mi)$/;"	f	file:
multi_get_create_instance_udp	src/openvpn/mudp.c	/^multi_get_create_instance_udp (struct multi_context *m)$/;"	f
multi_get_instance_by_virtual_addr	src/openvpn/multi.c	/^multi_get_instance_by_virtual_addr (struct multi_context *m,$/;"	f	file:
multi_get_queue	src/openvpn/multi.c	/^multi_get_queue (struct mbuf_set *ms)$/;"	f
multi_get_timeout	src/openvpn/multi.h	/^multi_get_timeout (struct multi_context *m, struct timeval *dest)$/;"	f
multi_ifconfig_pool_persist	src/openvpn/multi.c	/^multi_ifconfig_pool_persist (struct multi_context *m, bool force)$/;"	f
multi_init	src/openvpn/multi.c	/^multi_init (struct multi_context *m, struct context *t, bool tcp_mode, int thread_mode)$/;"	f
multi_instance	src/openvpn/multi.h	/^struct multi_instance {$/;"	s
multi_instance_dec_refcount	src/openvpn/multi.h	/^multi_instance_dec_refcount (struct multi_instance *mi)$/;"	f
multi_instance_inc_refcount	src/openvpn/multi.h	/^multi_instance_inc_refcount (struct multi_instance *mi)$/;"	f
multi_instance_string	src/openvpn/multi.c	/^multi_instance_string (const struct multi_instance *mi, bool null, struct gc_arena *gc)$/;"	f
multi_learn_addr	src/openvpn/multi.c	/^multi_learn_addr (struct multi_context *m,$/;"	f	file:
multi_learn_in6_addr	src/openvpn/multi.c	/^multi_learn_in6_addr  (struct multi_context *m,$/;"	f	file:
multi_learn_in_addr_t	src/openvpn/multi.c	/^multi_learn_in_addr_t (struct multi_context *m,$/;"	f	file:
multi_output_queue_ready	src/openvpn/multi.h	/^multi_output_queue_ready (const struct multi_context *m,$/;"	f
multi_print_status	src/openvpn/multi.c	/^multi_print_status (struct multi_context *m, struct status_output *so, const int version)$/;"	f
multi_process_drop_outgoing_tun	src/openvpn/multi.c	/^multi_process_drop_outgoing_tun (struct multi_context *m, const unsigned int mpp_flags)$/;"	f
multi_process_incoming_link	src/openvpn/multi.c	/^multi_process_incoming_link (struct multi_context *m, struct multi_instance *instance, const unsigned int mpp_flags)$/;"	f
multi_process_incoming_tun	src/openvpn/multi.c	/^multi_process_incoming_tun (struct multi_context *m, const unsigned int mpp_flags)$/;"	f
multi_process_io_udp	src/openvpn/mudp.c	/^multi_process_io_udp (struct multi_context *m)$/;"	f	file:
multi_process_outgoing_link	src/openvpn/mudp.c	/^multi_process_outgoing_link (struct multi_context *m, const unsigned int mpp_flags)$/;"	f	file:
multi_process_outgoing_link_dowork	src/openvpn/multi.h	/^multi_process_outgoing_link_dowork (struct multi_context *m, struct multi_instance *mi, const unsigned int mpp_flags)$/;"	f
multi_process_outgoing_link_pre	src/openvpn/multi.h	/^multi_process_outgoing_link_pre (struct multi_context *m)$/;"	f
multi_process_outgoing_tun	src/openvpn/multi.h	/^multi_process_outgoing_tun (struct multi_context *m, const unsigned int mpp_flags)$/;"	f
multi_process_per_second_timers	src/openvpn/multi.h	/^multi_process_per_second_timers (struct multi_context *m)$/;"	f
multi_process_per_second_timers_dowork	src/openvpn/multi.c	/^multi_process_per_second_timers_dowork (struct multi_context *m)$/;"	f
multi_process_post	src/openvpn/multi.c	/^multi_process_post (struct multi_context *m, struct multi_instance *mi, const unsigned int flags)$/;"	f
multi_process_signal	src/openvpn/multi.c	/^multi_process_signal (struct multi_context *m)$/;"	f
multi_process_timeout	src/openvpn/multi.c	/^multi_process_timeout (struct multi_context *m, const unsigned int mpp_flags)$/;"	f
multi_reap	src/openvpn/multi.h	/^struct multi_reap$/;"	s
multi_reap_all	src/openvpn/multi.c	/^multi_reap_all (const struct multi_context *m)$/;"	f	file:
multi_reap_free	src/openvpn/multi.c	/^multi_reap_free (struct multi_reap *mr)$/;"	f	file:
multi_reap_new	src/openvpn/multi.c	/^multi_reap_new (int buckets_per_pass)$/;"	f	file:
multi_reap_process	src/openvpn/multi.h	/^multi_reap_process (const struct multi_context *m)$/;"	f
multi_reap_process_dowork	src/openvpn/multi.c	/^multi_reap_process_dowork (const struct multi_context *m)$/;"	f
multi_reap_range	src/openvpn/multi.c	/^multi_reap_range (const struct multi_context *m,$/;"	f	file:
multi_release_io_lock	src/openvpn/multi.h	/^multi_release_io_lock (struct multi_context *m)$/;"	f
multi_route	src/openvpn/multi.h	/^struct multi_route$/;"	s
multi_route_defined	src/openvpn/multi.h	/^multi_route_defined (const struct multi_context *m,$/;"	f
multi_route_del	src/openvpn/multi.h	/^multi_route_del (struct multi_route *route)$/;"	f
multi_schedule_context_wakeup	src/openvpn/multi.c	/^multi_schedule_context_wakeup (struct multi_context *m, struct multi_instance *mi)$/;"	f	file:
multi_select_virtual_addr	src/openvpn/multi.c	/^multi_select_virtual_addr (struct multi_context *m, struct multi_instance *mi)$/;"	f	file:
multi_set_pending	src/openvpn/multi.h	/^multi_set_pending (struct multi_context *m, struct multi_instance *mi)$/;"	f
multi_set_virtual_addr_env	src/openvpn/multi.c	/^multi_set_virtual_addr_env (struct multi_context *m, struct multi_instance *mi)$/;"	f	file:
multi_signal_instance	src/openvpn/multi.c	/^multi_signal_instance (struct multi_context *m, struct multi_instance *mi, const int sig)$/;"	f	file:
multi_tcp	src/openvpn/mtcp.h	/^struct multi_tcp$/;"	s
multi_tcp_action	src/openvpn/mtcp.c	/^multi_tcp_action (struct multi_context *m, struct multi_instance *mi, int action, bool poll)$/;"	f	file:
multi_tcp_context	src/openvpn/mtcp.c	/^multi_tcp_context (struct multi_context *m, struct multi_instance *mi)$/;"	f	file:
multi_tcp_delete_event	src/openvpn/mtcp.c	/^multi_tcp_delete_event (struct multi_tcp *mtcp, event_t event)$/;"	f
multi_tcp_dereference_instance	src/openvpn/mtcp.c	/^multi_tcp_dereference_instance (struct multi_tcp *mtcp, struct multi_instance *mi)$/;"	f
multi_tcp_dispatch	src/openvpn/mtcp.c	/^multi_tcp_dispatch (struct multi_context *m, struct multi_instance *mi, const int action)$/;"	f	file:
multi_tcp_free	src/openvpn/mtcp.c	/^multi_tcp_free (struct multi_tcp *mtcp)$/;"	f
multi_tcp_init	src/openvpn/mtcp.c	/^multi_tcp_init (int maxevents, int *maxclients)$/;"	f
multi_tcp_instance_specific_free	src/openvpn/mtcp.c	/^multi_tcp_instance_specific_free (struct multi_instance *mi)$/;"	f
multi_tcp_instance_specific_init	src/openvpn/mtcp.c	/^multi_tcp_instance_specific_init (struct multi_context *m, struct multi_instance *mi)$/;"	f
multi_tcp_post	src/openvpn/mtcp.c	/^multi_tcp_post (struct multi_context *m, struct multi_instance *mi, const int action)$/;"	f
multi_tcp_process_io	src/openvpn/mtcp.c	/^multi_tcp_process_io (struct multi_context *m)$/;"	f	file:
multi_tcp_process_outgoing_link	src/openvpn/mtcp.c	/^multi_tcp_process_outgoing_link (struct multi_context *m, bool defer, const unsigned int mpp_flags)$/;"	f	file:
multi_tcp_process_outgoing_link_ready	src/openvpn/mtcp.c	/^multi_tcp_process_outgoing_link_ready (struct multi_context *m, struct multi_instance *mi, const unsigned int mpp_flags)$/;"	f	file:
multi_tcp_set_global_rw_flags	src/openvpn/mtcp.c	/^multi_tcp_set_global_rw_flags (struct multi_context *m, struct multi_instance *mi)$/;"	f	file:
multi_tcp_wait	src/openvpn/mtcp.c	/^multi_tcp_wait (const struct context *c,$/;"	f	file:
multi_tcp_wait_lite	src/openvpn/mtcp.c	/^multi_tcp_wait_lite (struct multi_context *m, struct multi_instance *mi, const int action, bool *tun_input_pending)$/;"	f	file:
multi_top_free	src/openvpn/multi.c	/^multi_top_free (struct multi_context *m)$/;"	f
multi_top_init	src/openvpn/multi.c	/^multi_top_init (struct multi_context *m, const struct context *top, const bool alloc_buffers)$/;"	f
multi_unicast	src/openvpn/multi.c	/^multi_unicast (struct multi_context *m,$/;"	f	file:
multi_uninit	src/openvpn/multi.c	/^multi_uninit (struct multi_context *m)$/;"	f
multiline	src/openvpn/options.c	/^    struct buffer *multiline;$/;"	m	union:in_src::__anon3	typeref:struct:in_src::__anon3::buffer	file:
must_die	src/openvpn/ssl_common.h	/^  time_t must_die;		\/* this object is destroyed at this time *\/$/;"	m	struct:key_state
must_have_n_keys	src/openvpn/crypto.c	/^must_have_n_keys (const char *filename, const char *option, const struct key2 *key2, int n)$/;"	f
must_negotiate	src/openvpn/ssl_common.h	/^  time_t must_negotiate;	\/* key negotiation times out if not finished before this time *\/$/;"	m	struct:key_state
mute	src/openvpn/options.h	/^  int mute;$/;"	m	struct:options
mute_category	src/openvpn/error.c	/^static int mute_category;   \/* GLOBAL *\/$/;"	v	file:
mute_count	src/openvpn/error.c	/^static int mute_count;      \/* GLOBAL *\/$/;"	v	file:
mute_cutoff	src/openvpn/error.c	/^static int mute_cutoff;     \/* GLOBAL *\/$/;"	v	file:
mute_replay_warnings	src/openvpn/options.h	/^  bool mute_replay_warnings;$/;"	m	struct:options
my_conv	src/plugins/auth-pam/auth-pam.c	/^my_conv (int n, const struct pam_message **msg_array,$/;"	f	file:
my_conv_func	sample/sample-scripts/auth-pam.pl	/^sub my_conv_func {$/;"	s
my_debug	src/openvpn/ssl_polarssl.c	/^static void my_debug( void *ctx, int level, const char *str )$/;"	f	file:
my_strupr	src/openvpn/ntlm.c	/^unsigned char *my_strupr(unsigned char *str)$/;"	f
mydata_index	src/openvpn/ssl_openssl.c	/^int mydata_index; \/* GLOBAL *\/$/;"	v
n	src/openvpn/clinat.h	/^  int n;$/;"	m	struct:client_nat_option_list
n	src/openvpn/crypto.h	/^  int n;                        \/**< The number of \\c key objects stored$/;"	m	struct:key2
n	src/openvpn/interval.h	/^  interval_t n;$/;"	m	struct:event_timeout
n	src/openvpn/list.c	/^  int n;$/;"	m	struct:word	file:
n	src/openvpn/otime.h	/^  int n;$/;"	m	struct:frequency_limit
n	src/openvpn/plugin.h	/^  int n;$/;"	m	struct:plugin_common
n	src/openvpn/plugin.h	/^  int n;$/;"	m	struct:plugin_option_list
n	src/openvpn/plugin.h	/^  int n;$/;"	m	struct:plugin_return
n	src/openvpn/route.h	/^  int n;$/;"	m	struct:route_ipv6_list
n	src/openvpn/route.h	/^  int n;$/;"	m	struct:route_ipv6_option_list
n	src/openvpn/route.h	/^  int n;$/;"	m	struct:route_list
n	src/openvpn/route.h	/^  int n;$/;"	m	struct:route_option_list
n_addrs	src/openvpn/route.h	/^  int n_addrs; \/* len of addrs, may be 0 *\/$/;"	m	struct:route_gateway_info
n_bcast_buf	src/openvpn/options.h	/^  int n_bcast_buf;$/;"	m	struct:options
n_buckets	src/openvpn/list.h	/^  int n_buckets;$/;"	m	struct:hash
n_bypass	src/openvpn/route.h	/^  int n_bypass;$/;"	m	struct:route_bypass
n_bytes	src/openvpn/ssl_common.h	/^  counter_type n_bytes;			 \/* how many bytes sent\/recvd since last key exchange *\/$/;"	m	struct:key_state
n_calls	sample/sample-plugins/defer/simple.c	/^  int n_calls;$/;"	m	struct:plugin_per_client_context	file:
n_check_reload	src/openvpn/pf.h	/^  unsigned int n_check_reload;$/;"	m	struct:pf_context
n_clients	src/openvpn/manage.h	/^  int (*n_clients) (void *arg);$/;"	m	struct:management_callback
n_clients	src/openvpn/mstats.h	/^  int n_clients;$/;"	m	struct:mmap_stats
n_clients	src/openvpn/multi.h	/^  int n_clients; \/* current number of authenticated clients *\/$/;"	m	struct:multi_context
n_clients_delta	src/openvpn/multi.h	/^  int n_clients_delta; \/* added to multi_context.n_clients when instance is closed *\/$/;"	m	struct:multi_instance
n_comp	src/openvpn/lzo.h	/^  int n_comp;$/;"	m	struct:lzo_adaptive_compress
n_cycles	src/openvpn/options.h	/^  int n_cycles;$/;"	m	struct:connection_list
n_elements	src/openvpn/list.h	/^  int n_elements;$/;"	m	struct:hash
n_esr	src/openvpn/mtcp.h	/^  int n_esr;$/;"	m	struct:multi_tcp
n_events	src/openvpn/event.c	/^  int n_events;$/;"	m	struct:po_set	file:
n_events	src/openvpn/event.c	/^  int n_events;$/;"	m	struct:we_set	file:
n_hard_errors	src/openvpn/ssl_common.h	/^  int n_hard_errors;   \/* errors due to TLS negotiation failure *\/$/;"	m	struct:tls_multi
n_net_len	src/openvpn/mroute.h	/^  int n_net_len;                 \/* length of net_len array *\/$/;"	m	struct:mroute_helper
n_packets	src/openvpn/gremlin.h	/^  int n_packets;$/;"	m	struct:packet_flood_parms
n_packets	src/openvpn/ssl_common.h	/^  counter_type n_packets;		 \/* how many packets sent\/recvd since last key exchange *\/$/;"	m	struct:key_state
n_rnd_bytes	src/openvpn/misc.c	953;"	d	file:
n_rnd_bytes	src/openvpn/misc.c	963;"	d	file:
n_sent_push_requests	src/openvpn/openvpn.h	/^  int n_sent_push_requests;$/;"	m	struct:context_2
n_sessions	src/openvpn/ssl_common.h	/^  int n_sessions;               \/**< Number of sessions negotiated thus$/;"	m	struct:tls_multi
n_soft_errors	src/openvpn/ssl_common.h	/^  int n_soft_errors;   \/* errors due to unrecognized or failed-to-authenticate incoming packets *\/$/;"	m	struct:tls_multi
n_total	src/openvpn/lzo.h	/^  int n_total;$/;"	m	struct:lzo_adaptive_compress
n_trunc_post_decrypt	src/openvpn/openvpn.h	/^  counter_type n_trunc_post_decrypt;$/;"	m	struct:context_2
n_trunc_pre_encrypt	src/openvpn/openvpn.h	/^  counter_type n_trunc_pre_encrypt;$/;"	m	struct:context_2
n_trunc_tun_read	src/openvpn/openvpn.h	/^  counter_type n_trunc_tun_read;$/;"	m	struct:context_2
n_trunc_tun_write	src/openvpn/openvpn.h	/^  counter_type n_trunc_tun_write;$/;"	m	struct:context_2
name	include/openvpn-plugin.h	/^  char *name;$/;"	m	struct:openvpn_plugin_string_list
name	src/openvpn/packet_id.h	/^  const char *name;$/;"	m	struct:packet_id_rec
name	src/openvpn/ssl_verify.h	/^  const char *name;$/;"	m	struct:x509_track
name	src/openvpn/tun.h	/^  const char *name;$/;"	m	struct:panel_reg
name	src/openvpn/win32.h	/^  const char *name;$/;"	m	struct:semaphore
name	src/plugins/auth-pam/auth-pam.c	/^  const char *name;$/;"	m	struct:name_value	file:
name_to_guid	src/openvpn/tun.c	/^name_to_guid (const char *name, const struct tap_reg *tap_reg, const struct panel_reg *panel_reg)$/;"	f	file:
name_value	src/plugins/auth-pam/auth-pam.c	/^struct name_value {$/;"	s	file:
name_value_list	src/plugins/auth-pam/auth-pam.c	/^  const struct name_value_list *name_value_list;$/;"	m	struct:user_pass	typeref:struct:user_pass::name_value_list	file:
name_value_list	src/plugins/auth-pam/auth-pam.c	/^struct name_value_list {$/;"	s	file:
name_value_match	src/plugins/auth-pam/auth-pam.c	/^name_value_match (const char *query, const char *match)$/;"	f	file:
nbdd	src/openvpn/tun.h	/^  in_addr_t nbdd[N_DHCP_ADDR];$/;"	m	struct:tuntap_options
nbdd_len	src/openvpn/tun.h	/^  int nbdd_len;$/;"	m	struct:tuntap_options
ne32	src/openvpn/manage.h	/^  struct net_event_win32 ne32;$/;"	m	struct:man_connection	typeref:struct:man_connection::net_event_win32
need_keys	src/openvpn/crypto.h	/^  int need_keys;                \/**< The number of key objects necessary$/;"	m	struct:key_direction_state
net_event_win32	src/openvpn/win32.h	/^struct net_event_win32$/;"	s
net_event_win32_clear_selected_events	src/openvpn/win32.h	/^net_event_win32_clear_selected_events (struct net_event_win32 *ne, long selected_events)$/;"	f
net_event_win32_close	src/openvpn/win32.c	/^net_event_win32_close (struct net_event_win32 *ne)$/;"	f
net_event_win32_defined	src/openvpn/win32.h	/^net_event_win32_defined (const struct net_event_win32 *ne)$/;"	f
net_event_win32_get_event	src/openvpn/win32.h	/^net_event_win32_get_event (struct net_event_win32 *ne)$/;"	f
net_event_win32_get_event_mask	src/openvpn/win32.h	/^net_event_win32_get_event_mask (const struct net_event_win32 *ne)$/;"	f
net_event_win32_init	src/openvpn/win32.c	/^net_event_win32_init (struct net_event_win32 *ne)$/;"	f
net_event_win32_reset	src/openvpn/win32.c	/^net_event_win32_reset (struct net_event_win32 *ne)$/;"	f
net_event_win32_reset_write	src/openvpn/win32.c	/^net_event_win32_reset_write (struct net_event_win32 *ne)$/;"	f
net_event_win32_start	src/openvpn/win32.c	/^net_event_win32_start (struct net_event_win32 *ne, long network_events, socket_descriptor_t sd)$/;"	f
net_event_win32_stop	src/openvpn/win32.c	/^net_event_win32_stop (struct net_event_win32 *ne)$/;"	f
net_len	src/openvpn/mroute.h	/^  uint8_t net_len[MR_HELPER_NET_LEN];      \/* CIDR netlengths in descending order *\/$/;"	m	struct:mroute_helper
net_len_refcount	src/openvpn/mroute.h	/^  int net_len_refcount[MR_HELPER_NET_LEN]; \/* refcount of each netlength *\/$/;"	m	struct:mroute_helper
net_time_t	src/openvpn/packet_id.h	/^typedef uint16_t net_time_t;$/;"	t
net_time_t	src/openvpn/packet_id.h	/^typedef uint32_t net_time_t;$/;"	t
netbios_node_type	src/openvpn/tun.h	/^  int netbios_node_type;     \/* NBT 1,2,4,8 (46) *\/$/;"	m	struct:tuntap_options
netbios_scope	src/openvpn/tun.h	/^  const char *netbios_scope; \/* NBS (47) *\/$/;"	m	struct:tuntap_options
netbits	src/openvpn/mroute.h	/^  uint8_t netbits;  \/* number of bits in network part of address,$/;"	m	struct:mroute_addr
netbits	src/openvpn/route.h	/^  int netbits;$/;"	m	struct:iroute
netbits	src/openvpn/route.h	/^  unsigned int netbits;$/;"	m	struct:iroute_ipv6
netbits	src/openvpn/route.h	/^  unsigned int netbits;$/;"	m	struct:route_ipv6
netbits_ipv6	src/openvpn/tun.h	/^  int netbits_ipv6;$/;"	m	struct:tuntap
netbits_to_netmask	src/openvpn/route.h	/^netbits_to_netmask (const int netbits)$/;"	f
netbsd_modify_read_write_return	src/openvpn/tun.c	/^netbsd_modify_read_write_return (int len)$/;"	f	file:
netcmd_semaphore	src/openvpn/win32.c	/^struct semaphore netcmd_semaphore; \/* GLOBAL *\/$/;"	v	typeref:struct:semaphore
netcmd_semaphore_close	src/openvpn/win32.c	/^netcmd_semaphore_close (void)$/;"	f
netcmd_semaphore_init	src/openvpn/win32.c	/^netcmd_semaphore_init (void)$/;"	f
netcmd_semaphore_lock	src/openvpn/win32.c	/^netcmd_semaphore_lock (void)$/;"	f
netcmd_semaphore_release	src/openvpn/win32.c	/^netcmd_semaphore_release (void)$/;"	f
netmask	src/openvpn/clinat.h	/^  in_addr_t netmask;$/;"	m	struct:client_nat_entry
netmask	src/openvpn/pf.h	/^  in_addr_t netmask;$/;"	m	struct:ipv4_subnet
netmask	src/openvpn/route.h	/^  const char *netmask;$/;"	m	struct:route_option
netmask	src/openvpn/route.h	/^  in_addr_t netmask;$/;"	m	struct:route_gateway_address
netmask	src/openvpn/route.h	/^  in_addr_t netmask;$/;"	m	struct:route_ipv4
netmask_to_netbits	src/openvpn/route.c	/^netmask_to_netbits (const in_addr_t network, const in_addr_t netmask, int *netbits)$/;"	f
netsh_command	src/openvpn/tun.c	/^netsh_command (const struct argv *a, int n)$/;"	f	file:
netsh_enable_dhcp	src/openvpn/tun.c	/^netsh_enable_dhcp (const struct tuntap_options *to,$/;"	f	file:
netsh_get_id	src/openvpn/tun.c	/^netsh_get_id (const char *dev_node, struct gc_arena *gc)$/;"	f	file:
netsh_ifconfig	src/openvpn/tun.c	/^netsh_ifconfig (const struct tuntap_options *to,$/;"	f	file:
netsh_ifconfig_options	src/openvpn/tun.c	/^netsh_ifconfig_options (const char *type,$/;"	f	file:
network	src/openvpn/clinat.h	/^  in_addr_t network;$/;"	m	struct:client_nat_entry
network	src/openvpn/pf.h	/^  in_addr_t network;$/;"	m	struct:ipv4_subnet
network	src/openvpn/route.h	/^  const char *network;$/;"	m	struct:route_option
network	src/openvpn/route.h	/^  in_addr_t network;$/;"	m	struct:iroute
network	src/openvpn/route.h	/^  in_addr_t network;$/;"	m	struct:route_ipv4
network	src/openvpn/route.h	/^  struct in6_addr network;$/;"	m	struct:iroute_ipv6	typeref:struct:iroute_ipv6::in6_addr
network	src/openvpn/route.h	/^  struct in6_addr network;$/;"	m	struct:route_ipv6	typeref:struct:route_ipv6::in6_addr
new_client_nat_list	src/openvpn/clinat.c	/^new_client_nat_list (struct gc_arena *gc)$/;"	f
new_connection_limiter	src/openvpn/multi.h	/^  struct frequency_limit *new_connection_limiter;$/;"	m	struct:multi_context	typeref:struct:multi_context::frequency_limit
new_route_ipv6_list	src/openvpn/route.c	/^new_route_ipv6_list (const int max_routes, struct gc_arena *a)$/;"	f
new_route_ipv6_option_list	src/openvpn/route.c	/^new_route_ipv6_option_list (const int max_routes, struct gc_arena *a)$/;"	f
new_route_list	src/openvpn/route.c	/^new_route_list (const int max_routes, struct gc_arena *a)$/;"	f
new_route_option_list	src/openvpn/route.c	/^new_route_option_list (const int max_routes, struct gc_arena *a)$/;"	f
next	include/openvpn-plugin.h	/^  struct openvpn_plugin_string_list *next;$/;"	m	struct:openvpn_plugin_string_list	typeref:struct:openvpn_plugin_string_list::openvpn_plugin_string_list
next	src/openvpn/buffer.h	/^  struct buffer_entry *next;$/;"	m	struct:buffer_entry	typeref:struct:buffer_entry::buffer_entry
next	src/openvpn/buffer.h	/^  struct gc_entry *next;        \/**< Pointer to the next item in the$/;"	m	struct:gc_entry	typeref:struct:gc_entry::gc_entry
next	src/openvpn/gremlin.c	/^static time_t next;      \/* GLOBAL *\/$/;"	v	file:
next	src/openvpn/list.h	/^  struct hash_element *next;$/;"	m	struct:hash_element	typeref:struct:hash_element::hash_element
next	src/openvpn/lzo.h	/^  time_t next;$/;"	m	struct:lzo_adaptive_compress
next	src/openvpn/misc.h	/^  struct env_item *next;$/;"	m	struct:env_item	typeref:struct:env_item::env_item
next	src/openvpn/pf.h	/^  struct pf_cn_elem *next;$/;"	m	struct:pf_cn_elem	typeref:struct:pf_cn_elem::pf_cn_elem
next	src/openvpn/pf.h	/^  struct pf_subnet *next;$/;"	m	struct:pf_subnet	typeref:struct:pf_subnet::pf_subnet
next	src/openvpn/ps.c	/^  struct proxy_connection *next;$/;"	m	struct:proxy_connection	typeref:struct:proxy_connection::proxy_connection	file:
next	src/openvpn/pushlist.h	/^  struct push_entry *next;$/;"	m	struct:push_entry	typeref:struct:push_entry::push_entry
next	src/openvpn/route.h	/^  struct iroute *next;$/;"	m	struct:iroute	typeref:struct:iroute::iroute
next	src/openvpn/route.h	/^  struct iroute_ipv6 *next;$/;"	m	struct:iroute_ipv6	typeref:struct:iroute_ipv6::iroute_ipv6
next	src/openvpn/socket.h	/^  struct buffer next;$/;"	m	struct:stream_buf	typeref:struct:stream_buf::buffer
next	src/openvpn/ssl_verify.h	/^  const struct x509_track *next;$/;"	m	struct:x509_track	typeref:struct:x509_track::x509_track
next	src/openvpn/tun.h	/^  struct panel_reg *next;$/;"	m	struct:panel_reg	typeref:struct:panel_reg::panel_reg
next	src/openvpn/tun.h	/^  struct tap_reg *next;$/;"	m	struct:tap_reg	typeref:struct:tap_reg::tap_reg
next_block	src/openvpn/ssl_polarssl.h	/^    buffer_entry *next_block;$/;"	m	struct:_buffer_entry
next_connection_entry	src/openvpn/init.c	/^next_connection_entry (struct context *c)$/;"	f	file:
next_try	src/openvpn/reliable.h	/^  time_t next_try;$/;"	m	struct:reliable_entry
nexthdr	src/openvpn/proto.h	/^        uint8_t		nexthdr;$/;"	m	struct:openvpn_ipv6hdr
nice	src/openvpn/options.h	/^  int nice;$/;"	m	struct:options
nid	src/openvpn/ssl_verify.h	/^  int nid;$/;"	m	struct:x509_track
no_advance	src/openvpn/options.h	/^  bool no_advance;$/;"	m	struct:connection_list
no_more_than_n_args	src/openvpn/options.c	/^no_more_than_n_args (const int msglevel,$/;"	f	file:
nocache	src/openvpn/misc.h	/^  bool nocache;$/;"	m	struct:user_pass
nonce_data	src/openvpn/crypto.c	/^static uint8_t *nonce_data = NULL; \/* GLOBAL *\/$/;"	v	file:
nonce_md	src/openvpn/crypto.c	/^static const md_kt_t *nonce_md = NULL; \/* GLOBAL *\/$/;"	v	file:
nonce_secret_len	src/openvpn/crypto.c	/^static int nonce_secret_len = 0; \/* GLOBAL *\/$/;"	v	file:
notnull	src/openvpn/options.c	/^notnull (const char *arg, const char *description)$/;"	f
now	src/openvpn/otime.c	/^time_t now = 0;            \/* GLOBAL *\/$/;"	v
now_adj	src/openvpn/otime.c	/^static time_t now_adj = 0; \/* GLOBAL *\/$/;"	v	file:
now_usec	src/openvpn/otime.c	/^time_t now_usec = 0;       \/* GLOBAL *\/$/;"	v
np	sample/sample-plugins/defer/simple.c	/^np (const char *str)$/;"	f	file:
np	src/openvpn/buffer.c	/^np (const char *str)$/;"	f
ns_cert_type	src/openvpn/options.h	/^  int ns_cert_type; \/* set to 0, NS_CERT_CHECK_SERVER, or NS_CERT_CHECK_CLIENT *\/$/;"	m	struct:options
ns_cert_type	src/openvpn/ssl_common.h	/^  int ns_cert_type;$/;"	m	struct:tls_options
ntlm_phase_1	src/openvpn/ntlm.c	/^ntlm_phase_1 (const struct http_proxy_info *p, struct gc_arena *gc)$/;"	f
ntlm_phase_3	src/openvpn/ntlm.c	/^ntlm_phase_3 (const struct http_proxy_info *p, const char *phase_2, struct gc_arena *gc)$/;"	f
ntoh_fragment_header_type	src/openvpn/fragment.h	199;"	d
ntohpid	src/openvpn/packet_id.h	66;"	d
ntohpid	src/openvpn/packet_id.h	88;"	d
ntohps	src/openvpn/socket.h	67;"	d
ntohtime	src/openvpn/packet_id.h	72;"	d
ntohtime	src/openvpn/packet_id.h	90;"	d
ntp	src/openvpn/tun.h	/^  in_addr_t ntp[N_DHCP_ADDR];$/;"	m	struct:tuntap_options
ntp_len	src/openvpn/tun.h	/^  int ntp_len;$/;"	m	struct:tuntap_options
occ	src/openvpn/options.h	/^  bool occ;$/;"	m	struct:options
occ_interval	src/openvpn/openvpn.h	/^  struct event_timeout occ_interval;$/;"	m	struct:context_2	typeref:struct:context_2::event_timeout
occ_magic	src/openvpn/occ.c	/^const uint8_t occ_magic[] = {$/;"	v
occ_mtu_load_n_tries	src/openvpn/openvpn.h	/^  int occ_mtu_load_n_tries;$/;"	m	struct:context_2
occ_mtu_load_size	src/openvpn/openvpn.h	/^  int occ_mtu_load_size;$/;"	m	struct:context_2
occ_mtu_load_test_interval	src/openvpn/openvpn.h	/^  struct event_timeout occ_mtu_load_test_interval;$/;"	m	struct:context_2	typeref:struct:context_2::event_timeout
occ_n_tries	src/openvpn/openvpn.h	/^  int occ_n_tries;$/;"	m	struct:context_2
occ_op	src/openvpn/openvpn.h	/^  int occ_op;			\/* INIT to -1 *\/$/;"	m	struct:context_2
occ_reset_op	src/openvpn/occ-inline.h	/^occ_reset_op ()$/;"	f
offset	src/openvpn/buffer.h	/^  int offset;                   \/**< Offset in bytes of the actual content$/;"	m	struct:buffer
offset	src/openvpn/reliable.h	/^  int offset;$/;"	m	struct:reliable
old_window_title	src/openvpn/win32.h	/^  char old_window_title [256];$/;"	m	struct:window_title
op	src/openvpn/dhcp.h	/^  uint8_t op;          \/* message op *\/$/;"	m	struct:dhcp
op	src/openvpn/occ.h	/^  int op;			\/* OCC opcode to send to peer *\/$/;"	m	struct:mtu_load_test
opcode	src/openvpn/reliable.h	/^  int opcode;$/;"	m	struct:reliable_entry
open1	src/openvpn/plugin.h	/^  openvpn_plugin_open_v1 open1;$/;"	m	struct:plugin
open2	src/openvpn/plugin.h	/^  openvpn_plugin_open_v2 open2;$/;"	m	struct:plugin
open3	src/openvpn/plugin.h	/^  openvpn_plugin_open_v3 open3;$/;"	m	struct:plugin
open_biofp	src/openvpn/ssl_openssl.c	/^open_biofp()$/;"	f	file:
open_darwin_utun	src/openvpn/tun.c	/^open_darwin_utun (const char *dev, const char *dev_type, const char *dev_node, struct tuntap *tt)$/;"	f
open_management	src/openvpn/init.c	/^open_management (struct context *c)$/;"	f
open_null	src/openvpn/tun.c	/^open_null (struct tuntap *tt)$/;"	f	file:
open_plugins	src/openvpn/init.c	/^open_plugins (struct context *c, const bool import_options, int init_point)$/;"	f
open_syslog	src/openvpn/error.c	/^open_syslog (const char *pgmname, bool stdio_to_null)$/;"	f
open_tty	src/openvpn/console.c	/^open_tty (const bool write)$/;"	f	file:
open_tun	src/openvpn/tun.c	/^open_tun (const char *dev, const char *dev_type, const char *dev_node, struct tuntap *tt)$/;"	f
open_tun_generic	src/openvpn/tun.c	/^open_tun_generic (const char *dev, const char *dev_type, const char *dev_node,$/;"	f	file:
openssl_name	src/openvpn/ssl_backend.h	/^typedef struct { const char *openssl_name; const char *iana_name; } tls_cipher_name_pair;$/;"	m	struct:__anon9
openvpn_PRF	src/openvpn/ssl.c	/^openvpn_PRF (const uint8_t *secret,$/;"	f	file:
openvpn_arp	src/openvpn/proto.h	/^struct openvpn_arp {$/;"	s
openvpn_base64_decode	src/openvpn/base64.c	/^openvpn_base64_decode(const char *str, void *data, int size)$/;"	f
openvpn_base64_encode	src/openvpn/base64.c	/^openvpn_base64_encode(const void *data, int size, char **str)$/;"	f
openvpn_close_socket	src/openvpn/socket.h	263;"	d
openvpn_close_socket	src/openvpn/socket.h	279;"	d
openvpn_connect	src/openvpn/socket.c	/^openvpn_connect (socket_descriptor_t sd,$/;"	f
openvpn_decrypt	src/openvpn/crypto.c	/^openvpn_decrypt (struct buffer *buf, struct buffer work,$/;"	f
openvpn_dmalloc	src/openvpn/memdbg.h	90;"	d
openvpn_encrypt	src/openvpn/crypto.c	/^openvpn_encrypt (struct buffer *buf, struct buffer work,$/;"	f
openvpn_errno	src/openvpn/error.h	70;"	d
openvpn_errno	src/openvpn/error.h	74;"	d
openvpn_ethhdr	src/openvpn/proto.h	/^struct openvpn_ethhdr $/;"	s
openvpn_execve	src/openvpn/misc.c	/^openvpn_execve (const struct argv *a, const struct env_set *es, const unsigned int flags)$/;"	f
openvpn_execve	src/openvpn/win32.c	/^openvpn_execve (const struct argv *a, const struct env_set *es, const unsigned int flags)$/;"	f
openvpn_execve_allowed	src/openvpn/misc.c	/^openvpn_execve_allowed (const unsigned int flags)$/;"	f
openvpn_execve_check	src/openvpn/misc.c	/^openvpn_execve_check (const struct argv *a, const struct env_set *es, const unsigned int flags, const char *error_message)$/;"	f
openvpn_exit	src/openvpn/error.c	/^openvpn_exit (const int status)$/;"	f
openvpn_getaddrinfo	src/openvpn/socket.c	/^openvpn_getaddrinfo (unsigned int flags,$/;"	f
openvpn_gettimeofday	src/openvpn/otime.h	/^openvpn_gettimeofday (struct timeval *tv, void *tz)$/;"	f
openvpn_in4_pktinfo	src/openvpn/socket.c	/^struct openvpn_in4_pktinfo$/;"	s	file:
openvpn_in6_pktinfo	src/openvpn/socket.c	/^struct openvpn_in6_pktinfo$/;"	s	file:
openvpn_inet_aton	src/openvpn/socket.c	/^openvpn_inet_aton (const char *dotted_quad, struct in_addr *addr)$/;"	f
openvpn_iphdr	src/openvpn/proto.h	/^struct openvpn_iphdr {$/;"	s
openvpn_ipv6hdr	src/openvpn/proto.h	/^struct openvpn_ipv6hdr {$/;"	s
openvpn_main	src/openvpn/openvpn.c	/^openvpn_main (int argc, char *argv[])$/;"	f	file:
openvpn_name	src/openvpn/crypto_polarssl.c	/^typedef struct { const char * openvpn_name; const char * polarssl_name; } cipher_name_pair;$/;"	m	struct:__anon11	file:
openvpn_pktinfo	src/openvpn/socket.c	/^union openvpn_pktinfo {$/;"	u	file:
openvpn_plugin_abort_v1	src/plugins/auth-pam/auth-pam.c	/^openvpn_plugin_abort_v1 (openvpn_plugin_handle_t handle)$/;"	f
openvpn_plugin_abort_v1	src/plugins/down-root/down-root.c	/^openvpn_plugin_abort_v1 (openvpn_plugin_handle_t handle)$/;"	f
openvpn_plugin_args_func_in	include/openvpn-plugin.h	/^struct openvpn_plugin_args_func_in$/;"	s
openvpn_plugin_args_func_return	include/openvpn-plugin.h	/^struct openvpn_plugin_args_func_return$/;"	s
openvpn_plugin_args_open_in	include/openvpn-plugin.h	/^struct openvpn_plugin_args_open_in$/;"	s
openvpn_plugin_args_open_return	include/openvpn-plugin.h	/^struct openvpn_plugin_args_open_return$/;"	s
openvpn_plugin_callbacks	include/openvpn-plugin.h	/^struct openvpn_plugin_callbacks$/;"	s
openvpn_plugin_client_constructor_v1	sample/sample-plugins/defer/simple.c	/^openvpn_plugin_client_constructor_v1 (openvpn_plugin_handle_t handle)$/;"	f
openvpn_plugin_client_destructor_v1	sample/sample-plugins/defer/simple.c	/^openvpn_plugin_client_destructor_v1 (openvpn_plugin_handle_t handle, void *per_client_context)$/;"	f
openvpn_plugin_close_v1	sample/sample-plugins/defer/simple.c	/^openvpn_plugin_close_v1 (openvpn_plugin_handle_t handle)$/;"	f
openvpn_plugin_close_v1	sample/sample-plugins/log/log.c	/^openvpn_plugin_close_v1 (openvpn_plugin_handle_t handle)$/;"	f
openvpn_plugin_close_v1	sample/sample-plugins/log/log_v3.c	/^openvpn_plugin_close_v1 (openvpn_plugin_handle_t handle)$/;"	f
openvpn_plugin_close_v1	sample/sample-plugins/simple/simple.c	/^openvpn_plugin_close_v1 (openvpn_plugin_handle_t handle)$/;"	f
openvpn_plugin_close_v1	src/plugins/auth-pam/auth-pam.c	/^openvpn_plugin_close_v1 (openvpn_plugin_handle_t handle)$/;"	f
openvpn_plugin_close_v1	src/plugins/down-root/down-root.c	/^openvpn_plugin_close_v1 (openvpn_plugin_handle_t handle)$/;"	f
openvpn_plugin_func_v1	sample/sample-plugins/log/log.c	/^openvpn_plugin_func_v1 (openvpn_plugin_handle_t handle, const int type, const char *argv[], const char *envp[])$/;"	f
openvpn_plugin_func_v1	sample/sample-plugins/simple/simple.c	/^openvpn_plugin_func_v1 (openvpn_plugin_handle_t handle, const int type, const char *argv[], const char *envp[])$/;"	f
openvpn_plugin_func_v1	src/plugins/auth-pam/auth-pam.c	/^openvpn_plugin_func_v1 (openvpn_plugin_handle_t handle, const int type, const char *argv[], const char *envp[])$/;"	f
openvpn_plugin_func_v1	src/plugins/down-root/down-root.c	/^openvpn_plugin_func_v1 (openvpn_plugin_handle_t handle, const int type, const char *argv[], const char *envp[])$/;"	f
openvpn_plugin_func_v2	sample/sample-plugins/defer/simple.c	/^openvpn_plugin_func_v2 (openvpn_plugin_handle_t handle,$/;"	f
openvpn_plugin_func_v3	sample/sample-plugins/log/log_v3.c	/^openvpn_plugin_func_v3 (const int version,$/;"	f
openvpn_plugin_handle_t	include/openvpn-plugin.h	/^typedef void *openvpn_plugin_handle_t;$/;"	t
openvpn_plugin_log_flags_t	include/openvpn-plugin.h	/^} openvpn_plugin_log_flags_t;$/;"	t	typeref:enum:__anon1
openvpn_plugin_open_v1	sample/sample-plugins/defer/simple.c	/^openvpn_plugin_open_v1 (unsigned int *type_mask, const char *argv[], const char *envp[])$/;"	f
openvpn_plugin_open_v1	sample/sample-plugins/log/log.c	/^openvpn_plugin_open_v1 (unsigned int *type_mask, const char *argv[], const char *envp[])$/;"	f
openvpn_plugin_open_v1	sample/sample-plugins/simple/simple.c	/^openvpn_plugin_open_v1 (unsigned int *type_mask, const char *argv[], const char *envp[])$/;"	f
openvpn_plugin_open_v1	src/plugins/auth-pam/auth-pam.c	/^openvpn_plugin_open_v1 (unsigned int *type_mask, const char *argv[], const char *envp[])$/;"	f
openvpn_plugin_open_v1	src/plugins/down-root/down-root.c	/^openvpn_plugin_open_v1 (unsigned int *type_mask, const char *argv[], const char *envp[])$/;"	f
openvpn_plugin_open_v3	sample/sample-plugins/log/log_v3.c	/^openvpn_plugin_open_v3 (const int v3structver,$/;"	f
openvpn_plugin_string_list	include/openvpn-plugin.h	/^struct openvpn_plugin_string_list$/;"	s
openvpn_plugin_string_list_find	src/openvpn/plugin.c	/^openvpn_plugin_string_list_find (struct openvpn_plugin_string_list *l, const char *name)$/;"	f	file:
openvpn_plugin_string_list_free	src/openvpn/plugin.c	/^openvpn_plugin_string_list_free (struct openvpn_plugin_string_list *l)$/;"	f	file:
openvpn_plugin_string_list_item_free	src/openvpn/plugin.c	/^openvpn_plugin_string_list_item_free (struct openvpn_plugin_string_list *l)$/;"	f	file:
openvpn_popen	src/openvpn/misc.c	/^openvpn_popen (const struct argv *a,  const struct env_set *es)$/;"	f
openvpn_run_script	src/openvpn/misc.h	/^openvpn_run_script (const struct argv *a, const struct env_set *es, const unsigned int flags, const char *hook)$/;"	f
openvpn_sleep	src/openvpn/misc.c	/^openvpn_sleep (const int n)$/;"	f
openvpn_snprintf	src/openvpn/buffer.c	/^bool openvpn_snprintf(char *str, size_t size, const char *format, ...)$/;"	f
openvpn_snprintf	src/openvpnserv/openvpnserv.c	/^int openvpn_snprintf(char *str, size_t size, const char *format, ...)$/;"	f
openvpn_sockaddr	src/openvpn/socket.h	/^struct openvpn_sockaddr$/;"	s
openvpn_strerror	src/openvpn/error.h	71;"	d
openvpn_strerror	src/openvpn/error.h	75;"	d
openvpn_tcphdr	src/openvpn/proto.h	/^struct openvpn_tcphdr {$/;"	s
openvpn_time	src/openvpn/otime.h	/^openvpn_time (time_t *t)$/;"	f
openvpn_udphdr	src/openvpn/proto.h	/^struct openvpn_udphdr {$/;"	s
openvpn_x509_cert_t	include/openvpn-plugin.h	/^typedef X509 openvpn_x509_cert_t;$/;"	t
openvpn_x509_cert_t	include/openvpn-plugin.h	/^typedef x509_cert openvpn_x509_cert_t;$/;"	t
openvpn_x509_cert_t	src/openvpn/ssl_verify_openssl.h	/^typedef X509 openvpn_x509_cert_t;$/;"	t
openvpn_x509_cert_t	src/openvpn/ssl_verify_polarssl.h	/^typedef x509_cert openvpn_x509_cert_t;$/;"	t
opt	src/openvpn/ssl_common.h	/^  struct tls_options *opt;$/;"	m	struct:tls_session	typeref:struct:tls_session::tls_options
opt	src/openvpn/ssl_common.h	/^  struct tls_options opt;$/;"	m	struct:tls_multi	typeref:struct:tls_multi::tls_options
optimal_fragment_size	src/openvpn/fragment.c	/^optimal_fragment_size (int len, int max_frag_size)$/;"	f	file:
option	src/openvpn/pushlist.h	/^  const char *option;$/;"	m	struct:push_entry
option	src/openvpn/route.h	/^  const struct route_option *option;$/;"	m	struct:route_ipv4	typeref:struct:route_ipv4::route_option
option_iroute	src/openvpn/options.c	/^option_iroute (struct options *o,$/;"	f	file:
option_iroute_ipv6	src/openvpn/options.c	/^option_iroute_ipv6 (struct options *o,$/;"	f	file:
options	src/openvpn/dhcp.h	/^  uint8_t options[DHCP_OPTIONS_BUFFER_SIZE];$/;"	m	struct:dhcp_full
options	src/openvpn/openvpn.h	/^  struct options options;       \/**< Options loaded from command line or$/;"	m	struct:context	typeref:struct:context::options
options	src/openvpn/options.h	/^struct options$/;"	s
options	src/openvpn/proxy.h	/^  struct http_proxy_options options;$/;"	m	struct:http_proxy_info	typeref:struct:http_proxy_info::http_proxy_options
options	src/openvpn/tun.h	/^  struct tuntap_options options; \/* options set on command line *\/$/;"	m	struct:tuntap	typeref:struct:tuntap::tuntap_options
options_cmp_equal	src/openvpn/options.c	/^options_cmp_equal (char *actual, const char *expected)$/;"	f
options_cmp_equal_safe	src/openvpn/options.c	/^options_cmp_equal_safe (char *actual, const char *expected, size_t actual_n)$/;"	f
options_detach	src/openvpn/options.c	/^options_detach (struct options *o)$/;"	f
options_postprocess	src/openvpn/options.c	/^options_postprocess (struct options *options)$/;"	f
options_postprocess_filechecks	src/openvpn/options.c	/^options_postprocess_filechecks (struct options *options)$/;"	f	file:
options_postprocess_http_proxy_override	src/openvpn/options.c	/^options_postprocess_http_proxy_override (struct options *o)$/;"	f
options_postprocess_mutate	src/openvpn/options.c	/^options_postprocess_mutate (struct options *o)$/;"	f	file:
options_postprocess_mutate_ce	src/openvpn/options.c	/^options_postprocess_mutate_ce (struct options *o, struct connection_entry *ce)$/;"	f	file:
options_postprocess_mutate_invariant	src/openvpn/options.c	/^options_postprocess_mutate_invariant (struct options *options)$/;"	f	file:
options_postprocess_verify	src/openvpn/options.c	/^options_postprocess_verify (const struct options *o)$/;"	f	file:
options_postprocess_verify_ce	src/openvpn/options.c	/^options_postprocess_verify_ce (const struct options *options, const struct connection_entry *ce)$/;"	f	file:
options_pre_pull	src/openvpn/options.h	/^struct options_pre_pull$/;"	s
options_server_import	src/openvpn/options.c	/^options_server_import (struct options *o,$/;"	f
options_string	src/openvpn/options.c	/^options_string (const struct options *o,$/;"	f
options_string_import	src/openvpn/options.c	/^void options_string_import (struct options *options,$/;"	f
options_string_local	src/openvpn/openvpn.h	/^  char *options_string_local;$/;"	m	struct:context_2
options_string_remote	src/openvpn/openvpn.h	/^  char *options_string_remote;$/;"	m	struct:context_2
options_string_version	src/openvpn/options.c	/^options_string_version (const char* s, struct gc_arena *gc)$/;"	f
options_warning	src/openvpn/options.c	/^options_warning (char *actual, const char *expected)$/;"	f
options_warning_extract_parm1	src/openvpn/options.c	/^options_warning_extract_parm1 (const char *option_string,$/;"	f	file:
options_warning_safe	src/openvpn/options.c	/^options_warning_safe (char *actual, const char *expected, size_t actual_n)$/;"	f
options_warning_safe_ml	src/openvpn/options.c	/^options_warning_safe_ml (const int msglevel, char *actual, const char *expected, size_t actual_n)$/;"	f	file:
options_warning_safe_scan1	src/openvpn/options.c	/^options_warning_safe_scan1 (const int msglevel,$/;"	f	file:
options_warning_safe_scan2	src/openvpn/options.c	/^options_warning_safe_scan2 (const int msglevel,$/;"	f	file:
orig_stderr	src/openvpn/error.c	/^static HANDLE orig_stderr;$/;"	v	file:
original_recv_size	src/openvpn/openvpn.h	/^  int original_recv_size;	\/* temporary *\/$/;"	m	struct:context_2
out	src/openvpn/manage.h	/^  struct buffer_list *out;$/;"	m	struct:man_connection	typeref:struct:man_connection::buffer_list
out_key	src/openvpn/crypto.h	/^  int out_key;                  \/**< Index into the \\c key2.keys array for$/;"	m	struct:key_direction_state
out_of_memory	src/openvpn/error.c	/^out_of_memory (void)$/;"	f
outgoing	src/openvpn/fragment.h	/^  struct buffer outgoing;       \/**< Buffer containing the remaining parts$/;"	m	struct:fragment_master	typeref:struct:fragment_master::buffer
outgoing_frag_id	src/openvpn/fragment.h	/^  int outgoing_frag_id;         \/**< The fragment ID of the next part to$/;"	m	struct:fragment_master
outgoing_frag_size	src/openvpn/fragment.h	/^  int outgoing_frag_size;       \/**< Size in bytes of each part to be$/;"	m	struct:fragment_master
outgoing_return	src/openvpn/fragment.h	/^  struct buffer outgoing_return;$/;"	m	struct:fragment_master	typeref:struct:fragment_master::buffer
outgoing_seq_id	src/openvpn/fragment.h	/^  int outgoing_seq_id;          \/**< Fragment sequence ID of the current$/;"	m	struct:fragment_master
output	build/msvc/msvc-generate/msvc-generate.js	/^var output = "nul";$/;"	v
overlapped	src/openvpn/win32.h	/^  OVERLAPPED overlapped;$/;"	m	struct:overlapped_io
overlapped_io	src/openvpn/win32.h	/^struct overlapped_io {$/;"	s
overlapped_io_active	src/openvpn/win32.h	/^overlapped_io_active (struct overlapped_io *o)$/;"	f
overlapped_io_close	src/openvpn/win32.c	/^overlapped_io_close (struct overlapped_io *o)$/;"	f
overlapped_io_init	src/openvpn/win32.c	/^overlapped_io_init (struct overlapped_io *o,$/;"	f
overlapped_io_state_ascii	src/openvpn/win32.c	/^overlapped_io_state_ascii (const struct overlapped_io *o)$/;"	f
ovpnSSLAPI	include/openvpn-plugin.h	/^} ovpnSSLAPI;$/;"	t	typeref:enum:__anon2
p2mp_iow_flags	src/openvpn/mudp.c	/^p2mp_iow_flags (const struct multi_context *m)$/;"	f	file:
p2p_iow_flags	src/openvpn/forward-inline.h	/^p2p_iow_flags (const struct context *c)$/;"	f
packet_flood_data	src/openvpn/gremlin.c	/^static const struct packet_flood_parms packet_flood_data[] =$/;"	v	typeref:struct:packet_flood_parms	file:
packet_flood_parms	src/openvpn/gremlin.h	/^struct packet_flood_parms$/;"	s
packet_id	src/openvpn/crypto.h	/^  struct packet_id *packet_id;  \/**< Current packet ID state for both$/;"	m	struct:crypto_options	typeref:struct:crypto_options::packet_id
packet_id	src/openvpn/openvpn.h	/^  struct packet_id packet_id;$/;"	m	struct:context_2	typeref:struct:context_2::packet_id
packet_id	src/openvpn/packet_id.h	/^struct packet_id$/;"	s
packet_id	src/openvpn/reliable.h	/^  packet_id_type packet_id;$/;"	m	struct:reliable
packet_id	src/openvpn/reliable.h	/^  packet_id_type packet_id;$/;"	m	struct:reliable_entry
packet_id	src/openvpn/reliable.h	/^  packet_id_type packet_id[RELIABLE_ACK_SIZE];$/;"	m	struct:reliable_ack
packet_id	src/openvpn/ssl_common.h	/^  struct packet_id packet_id;	       \/* for data channel, to prevent replay attacks *\/$/;"	m	struct:key_state	typeref:struct:key_state::packet_id
packet_id_add	src/openvpn/packet_id.c	/^packet_id_add (struct packet_id_rec *p, const struct packet_id_net *pin)$/;"	f
packet_id_alloc_outgoing	src/openvpn/packet_id.h	/^packet_id_alloc_outgoing (struct packet_id_send *p, struct packet_id_net *pin, bool long_form)$/;"	f
packet_id_close_to_wrapping	src/openvpn/packet_id.h	/^packet_id_close_to_wrapping (const struct packet_id_send *p)$/;"	f
packet_id_debug	src/openvpn/packet_id.c	/^packet_id_debug (int msglevel,$/;"	f	file:
packet_id_debug_print	src/openvpn/packet_id.c	/^packet_id_debug_print (int msglevel,$/;"	f	file:
packet_id_file	src/openvpn/options.h	/^  const char *packet_id_file;$/;"	m	struct:options
packet_id_format	src/openvpn/packet_id.h	97;"	d
packet_id_free	src/openvpn/packet_id.c	/^packet_id_free (struct packet_id *p)$/;"	f
packet_id_init	src/openvpn/packet_id.c	/^packet_id_init (struct packet_id *p, bool tcp_mode, int seq_backtrack, int time_backtrack, const char *name, int unit)$/;"	f
packet_id_interactive_test	src/openvpn/packet_id.c	/^packet_id_interactive_test ()$/;"	f
packet_id_net	src/openvpn/packet_id.h	/^struct packet_id_net$/;"	s
packet_id_net_print	src/openvpn/packet_id.c	/^packet_id_net_print (const struct packet_id_net *pin, bool print_timestamp, struct gc_arena *gc)$/;"	f
packet_id_persist	src/openvpn/openvpn.h	/^struct packet_id_persist$/;"	s
packet_id_persist	src/openvpn/packet_id.h	/^struct packet_id_persist$/;"	s
packet_id_persist_close	src/openvpn/packet_id.c	/^packet_id_persist_close (struct packet_id_persist *p)$/;"	f
packet_id_persist_enabled	src/openvpn/packet_id.h	/^packet_id_persist_enabled (const struct packet_id_persist *p)$/;"	f
packet_id_persist_file_image	src/openvpn/packet_id.h	/^struct packet_id_persist_file_image$/;"	s
packet_id_persist_init	src/openvpn/openvpn.h	/^packet_id_persist_init (struct packet_id_persist *p)$/;"	f
packet_id_persist_init	src/openvpn/packet_id.c	/^packet_id_persist_init (struct packet_id_persist *p)$/;"	f
packet_id_persist_interval	src/openvpn/openvpn.h	/^  struct event_timeout packet_id_persist_interval;$/;"	m	struct:context_2	typeref:struct:context_2::event_timeout
packet_id_persist_load	src/openvpn/packet_id.c	/^packet_id_persist_load (struct packet_id_persist *p, const char *filename)$/;"	f
packet_id_persist_load_obj	src/openvpn/packet_id.c	/^packet_id_persist_load_obj (const struct packet_id_persist *p, struct packet_id *pid)$/;"	f
packet_id_persist_print	src/openvpn/packet_id.c	/^packet_id_persist_print (const struct packet_id_persist *p, struct gc_arena *gc)$/;"	f
packet_id_persist_save	src/openvpn/packet_id.c	/^packet_id_persist_save (struct packet_id_persist *p)$/;"	f
packet_id_persist_save_obj	src/openvpn/packet_id.h	/^packet_id_persist_save_obj (struct packet_id_persist *p, const struct packet_id* pid)$/;"	f
packet_id_print_type	src/openvpn/packet_id.h	/^typedef unsigned int packet_id_print_type;$/;"	t
packet_id_read	src/openvpn/packet_id.c	/^packet_id_read (struct packet_id_net *pin, struct buffer *buf, bool long_form)$/;"	f
packet_id_reap	src/openvpn/packet_id.c	/^packet_id_reap (struct packet_id_rec *p)$/;"	f
packet_id_reap_test	src/openvpn/packet_id.h	/^packet_id_reap_test (struct packet_id_rec *p)$/;"	f
packet_id_rec	src/openvpn/packet_id.h	/^struct packet_id_rec$/;"	s
packet_id_send	src/openvpn/packet_id.h	/^struct packet_id_send$/;"	s
packet_id_size	src/openvpn/packet_id.h	/^packet_id_size (bool long_form)$/;"	f
packet_id_test	src/openvpn/packet_id.c	/^packet_id_test (struct packet_id_rec *p,$/;"	f
packet_id_type	src/openvpn/packet_id.h	/^typedef uint32_t packet_id_type;$/;"	t
packet_id_type	src/openvpn/packet_id.h	/^typedef uint8_t packet_id_type;$/;"	t
packet_id_write	src/openvpn/packet_id.c	/^packet_id_write (const struct packet_id_net *pin, struct buffer *buf, bool long_form, bool prepend)$/;"	f
packet_opcode_name	src/openvpn/ssl.c	/^packet_opcode_name (int op)$/;"	f	file:
packet_size	src/openvpn/gremlin.h	/^  int packet_size;$/;"	m	struct:packet_flood_parms
packet_size_type	src/openvpn/socket.h	/^typedef uint16_t packet_size_type;$/;"	t
packet_timeout	src/openvpn/ssl_common.h	/^  interval_t packet_timeout;$/;"	m	struct:tls_options
pam_acct_mgmt	src/plugins/auth-pam/pamdl.c	/^int pam_acct_mgmt(pam_handle_t *pamh, int flags)$/;"	f
pam_auth	src/plugins/auth-pam/auth-pam.c	/^pam_auth (const char *service, const struct user_pass *up)$/;"	f	file:
pam_authenticate	src/plugins/auth-pam/pamdl.c	/^int pam_authenticate(pam_handle_t *pamh, int flags)$/;"	f
pam_chauthtok	src/plugins/auth-pam/pamdl.c	/^int pam_chauthtok(pam_handle_t *pamh, int flags)$/;"	f
pam_close_session	src/plugins/auth-pam/pamdl.c	/^int pam_close_session(pam_handle_t *pamh, int flags)$/;"	f
pam_end	src/plugins/auth-pam/pamdl.c	/^int pam_end(pam_handle_t *pamh, int pam_status)$/;"	f
pam_fail_delay	src/plugins/auth-pam/pamdl.c	/^int pam_fail_delay(pam_handle_t *pamh, unsigned int musec_delay)$/;"	f
pam_get_item	src/plugins/auth-pam/pamdl.c	/^int pam_get_item(const pam_handle_t *pamh, int item_type, const void **item)$/;"	f
pam_getenv	src/plugins/auth-pam/pamdl.c	/^const_char_pointer pam_getenv(pam_handle_t *pamh, const char *name)$/;"	f
pam_getenvlist	src/plugins/auth-pam/pamdl.c	/^char_ppointer pam_getenvlist(pam_handle_t *pamh)$/;"	f
pam_open_session	src/plugins/auth-pam/pamdl.c	/^int pam_open_session(pam_handle_t *pamh, int flags)$/;"	f
pam_putenv	src/plugins/auth-pam/pamdl.c	/^int pam_putenv(pam_handle_t *pamh, const char *name_value)$/;"	f
pam_server	src/plugins/auth-pam/auth-pam.c	/^pam_server (int fd, const char *service, int verb, const struct name_value_list *name_value_list)$/;"	f	file:
pam_set_item	src/plugins/auth-pam/pamdl.c	/^int pam_set_item(pam_handle_t *pamh, int item_type, const void *item)$/;"	f
pam_setcred	src/plugins/auth-pam/pamdl.c	/^int pam_setcred(pam_handle_t *pamh, int flags)$/;"	f
pam_start	src/plugins/auth-pam/pamdl.c	/^int pam_start(const char *service_name, const char *user,$/;"	f
pam_strerror	src/plugins/auth-pam/pamdl.c	/^const_char_pointer pam_strerror(pam_handle_t *pamh, int errnum)$/;"	f
panel_reg	src/openvpn/tun.h	/^struct panel_reg$/;"	s
parent	src/openvpn/schedule.h	/^  struct schedule_entry *parent; \/* treap (btree) links *\/$/;"	m	struct:schedule_entry	typeref:struct:schedule_entry::schedule_entry
parse_argv	src/openvpn/options.c	/^parse_argv (struct options *options,$/;"	f
parse_cid	src/openvpn/manage.c	/^parse_cid (const char *str, unsigned long *cid)$/;"	f	file:
parse_hash_fingerprint	src/openvpn/options.c	/^parse_hash_fingerprint(const char *str, int nbytes, int msglevel, struct gc_arena *gc)$/;"	f	file:
parse_http_proxy_override	src/openvpn/options.c	/^parse_http_proxy_override (const char *server,$/;"	f	file:
parse_kid	src/openvpn/manage.c	/^parse_kid (const char *str, unsigned int *kid)$/;"	f	file:
parse_line	src/openvpn/options.c	/^parse_line (const char *line,$/;"	f
parse_signal	src/openvpn/sig.c	/^parse_signal (const char *signame)$/;"	f
parse_topology	src/openvpn/options.c	/^parse_topology (const char *str, const int msglevel)$/;"	f
pass_config_info	src/openvpn/ssl_common.h	/^  bool pass_config_info;$/;"	m	struct:tls_options
passbuf	src/openvpn/ssl.c	/^static struct user_pass passbuf; \/* GLOBAL *\/$/;"	v	typeref:struct:user_pass	file:
passtos	src/openvpn/options.h	/^  bool passtos;                  $/;"	m	struct:options
password	sample/sample-plugins/log/log.c	/^  const char *password;$/;"	m	struct:plugin_context	file:
password	sample/sample-plugins/log/log_v3.c	/^  const char *password;$/;"	m	struct:plugin_context	file:
password	sample/sample-plugins/simple/simple.c	/^  const char *password;$/;"	m	struct:plugin_context	file:
password	src/openvpn/misc.h	/^  char password[USER_PASS_LEN];$/;"	m	struct:user_pass
password	src/plugins/auth-pam/auth-pam.c	/^  char password[128];$/;"	m	struct:user_pass	file:
password_tries	src/openvpn/manage.h	/^  int password_tries;$/;"	m	struct:man_connection
password_verified	src/openvpn/manage.h	/^  bool password_verified;$/;"	m	struct:man_connection
pause_exit_enabled	src/openvpn/win32.c	/^static bool pause_exit_enabled = false; \/* GLOBAL *\/$/;"	v	file:
paybuf	src/openvpn/ssl_common.h	/^  struct buffer_list *paybuf;$/;"	m	struct:key_state	typeref:struct:key_state::buffer_list
payload_len	src/openvpn/proto.h	/^        uint16_t	payload_len;$/;"	m	struct:openvpn_ipv6hdr
pct_name	src/openvpn/pf.c	/^pct_name (const int type)$/;"	f	file:
peer_id	src/openvpn/options.h	/^  uint32_t peer_id;$/;"	m	struct:options
peer_id	src/openvpn/ssl_common.h	/^  uint32_t peer_id;$/;"	m	struct:tls_multi
peer_info	src/openvpn/ssl_common.h	/^  char *peer_info;$/;"	m	struct:tls_multi
pem_password_callback	src/openvpn/ssl.c	/^pem_password_callback (char *buf, int size, int rwflag, void *u)$/;"	f
pem_password_setup	src/openvpn/ssl.c	/^pem_password_setup (const char *auth_file)$/;"	f
pending	src/openvpn/multi.h	/^  struct multi_instance *pending;$/;"	m	struct:multi_context	typeref:struct:multi_context::multi_instance
per	src/openvpn/otime.h	/^  int per;$/;"	m	struct:frequency_limit
per_client	src/openvpn/plugin.h	/^  struct plugin_per_client per_client;$/;"	m	struct:plugin_list	typeref:struct:plugin_list::plugin_per_client
per_client_context	include/openvpn-plugin.h	/^  void *per_client_context;$/;"	m	struct:openvpn_plugin_args_func_in
per_client_context	src/openvpn/plugin.h	/^  void *per_client_context[MAX_PLUGINS];$/;"	m	struct:plugin_per_client
per_second_trigger	src/openvpn/multi.h	/^  time_t per_second_trigger;$/;"	m	struct:multi_context
perf	src/openvpn/perf.c	/^  struct perf perf[PERF_N];$/;"	m	struct:perf_set	typeref:struct:perf_set::perf	file:
perf	src/openvpn/perf.c	/^struct perf$/;"	s	file:
perf_interrupt	src/openvpn/perf.c	/^perf_interrupt (struct perf *p)$/;"	f	file:
perf_output_results	src/openvpn/perf.c	/^perf_output_results (void)$/;"	f
perf_output_results	src/openvpn/perf.h	/^static inline void perf_output_results (void) {}$/;"	f
perf_pop	src/openvpn/perf.c	/^perf_pop (void)$/;"	f
perf_pop	src/openvpn/perf.h	/^static inline void perf_pop (void) {}$/;"	f
perf_print_state	src/openvpn/perf.c	/^perf_print_state (int lev)$/;"	f	file:
perf_push	src/openvpn/perf.c	/^perf_push (int type)$/;"	f
perf_push	src/openvpn/perf.h	/^static inline void perf_push (int type) {}$/;"	f
perf_resume	src/openvpn/perf.c	/^perf_resume (struct perf *p)$/;"	f	file:
perf_set	src/openvpn/perf.c	/^static struct perf_set perf_set;$/;"	v	typeref:struct:perf_set	file:
perf_set	src/openvpn/perf.c	/^struct perf_set$/;"	s	file:
perf_start	src/openvpn/perf.c	/^perf_start (struct perf *p)$/;"	f	file:
perf_stop	src/openvpn/perf.c	/^perf_stop (struct perf *p)$/;"	f	file:
persist	src/openvpn/manage.h	/^  struct man_persist persist;$/;"	m	struct:management	typeref:struct:management::man_persist
persist	src/openvpn/openvpn.h	/^  struct context_persist persist;$/;"	m	struct:context	typeref:struct:context::context_persist
persist_config	src/openvpn/options.h	/^  bool persist_config;$/;"	m	struct:options
persist_key	src/openvpn/options.h	/^  bool persist_key;             \/* Don't re-read key files on SIGUSR1 or PING_RESTART *\/$/;"	m	struct:options
persist_local_ip	src/openvpn/options.h	/^  bool persist_local_ip;        \/* Don't re-resolve local address on SIGUSR1 or PING_RESTART *\/$/;"	m	struct:options
persist_mode	src/openvpn/options.h	/^  int persist_mode;$/;"	m	struct:options
persist_remote_ip	src/openvpn/options.h	/^  bool persist_remote_ip;       \/* Don't re-resolve remote address on SIGUSR1 or PING_RESTART *\/$/;"	m	struct:options
persist_tun	src/openvpn/options.h	/^  bool persist_tun;             \/* Don't close\/reopen TUN\/TAP dev on SIGUSR1 or PING_RESTART *\/$/;"	m	struct:options
persistent_if	src/openvpn/tun.h	/^  bool persistent_if;		\/* if existed before, keep on program end *\/$/;"	m	struct:tuntap
pf	src/openvpn/openvpn.h	/^  struct pf_context pf;$/;"	m	struct:context_2	typeref:struct:context_2::pf_context
pf_addr_test	src/openvpn/pf-inline.h	/^pf_addr_test (const struct context *src, const struct mroute_addr *dest, const char *prefix)$/;"	f
pf_addr_test_dowork	src/openvpn/pf.c	/^pf_addr_test_dowork (const struct context *src, const struct mroute_addr *dest, const char *prefix)$/;"	f
pf_addr_test_print	src/openvpn/pf.c	/^pf_addr_test_print (const char *prefix,$/;"	f	file:
pf_c2c_test	src/openvpn/pf-inline.h	/^pf_c2c_test (const struct context *src, const struct context *dest, const char *prefix)$/;"	f
pf_check_reload	src/openvpn/pf.c	/^pf_check_reload (struct context *c)$/;"	f
pf_cn	src/openvpn/pf.h	/^struct pf_cn {$/;"	s
pf_cn_elem	src/openvpn/pf.h	/^struct pf_cn_elem {$/;"	s
pf_cn_set	src/openvpn/pf.h	/^struct pf_cn_set {$/;"	s
pf_cn_set_print	src/openvpn/pf.c	/^pf_cn_set_print (const struct pf_cn_set *s, const int lev)$/;"	f	file:
pf_cn_test	src/openvpn/pf.c	/^pf_cn_test (struct pf_set *pfs, const struct tls_multi *tm, const int type, const char *prefix)$/;"	f
pf_cn_test_print	src/openvpn/pf.c	/^pf_cn_test_print (const char *prefix,$/;"	f	file:
pf_context	src/openvpn/pf.h	/^struct pf_context {$/;"	s
pf_context_print	src/openvpn/pf.c	/^pf_context_print (const struct pf_context *pfc, const char *prefix, const int lev)$/;"	f
pf_destroy	src/openvpn/pf.c	/^pf_destroy (struct pf_set *pfs)$/;"	f	file:
pf_destroy_context	src/openvpn/pf.c	/^pf_destroy_context (struct pf_context *pfc)$/;"	f
pf_init	src/openvpn/pf.c	/^pf_init (const struct buffer_list *bl, const char *prefix, const bool allow_kill)$/;"	f	file:
pf_init_context	src/openvpn/pf.c	/^pf_init_context (struct context *c)$/;"	f
pf_init_from_file	src/openvpn/pf.c	/^pf_init_from_file (const char *fn)$/;"	f	file:
pf_kill_test	src/openvpn/pf-inline.h	/^pf_kill_test (const struct pf_set *pfs)$/;"	f
pf_load_from_buffer_list	src/openvpn/pf.c	/^pf_load_from_buffer_list (struct context *c, const struct buffer_list *config)$/;"	f
pf_set	src/openvpn/pf.h	/^struct pf_set {$/;"	s
pf_set_print	src/openvpn/pf.c	/^pf_set_print (const struct pf_set *pfs, const int lev)$/;"	f	file:
pf_subnet	src/openvpn/pf.h	/^struct pf_subnet {$/;"	s
pf_subnet_set	src/openvpn/pf.h	/^struct pf_subnet_set {$/;"	s
pf_subnet_set_print	src/openvpn/pf.c	/^pf_subnet_set_print (const struct pf_subnet_set *s, const int lev)$/;"	f	file:
pfs	src/openvpn/pf.h	/^  struct pf_set *pfs;$/;"	m	struct:pf_context	typeref:struct:pf_context::pf_set
pgmname_syslog	src/openvpn/error.c	/^static char *pgmname_syslog;  \/* GLOBAL *\/$/;"	v	file:
pi	src/openvpn/socket.h	/^  } pi;$/;"	m	struct:link_socket_actual	typeref:union:link_socket_actual::__anon13
pi4	src/openvpn/socket.c	/^  struct in_addr pi4;$/;"	m	struct:openvpn_in4_pktinfo	typeref:struct:openvpn_in4_pktinfo::in_addr	file:
pi4	src/openvpn/socket.c	/^  struct in_pktinfo pi4;$/;"	m	struct:openvpn_in4_pktinfo	typeref:struct:openvpn_in4_pktinfo::in_pktinfo	file:
pi6	src/openvpn/socket.c	/^  struct in6_pktinfo pi6;$/;"	m	struct:openvpn_in6_pktinfo	typeref:struct:openvpn_in6_pktinfo::in6_pktinfo	file:
pid_persist	src/openvpn/crypto.h	/^  struct packet_id_persist *pid_persist;$/;"	m	struct:crypto_options	typeref:struct:crypto_options::packet_id_persist
pid_persist	src/openvpn/openvpn.h	/^  struct packet_id_persist pid_persist;$/;"	m	struct:context_1	typeref:struct:context_1::packet_id_persist
pid_state	src/openvpn/misc.h	/^struct pid_state {$/;"	s
pid_state	src/openvpn/openvpn.h	/^  struct pid_state pid_state;$/;"	m	struct:context_0	typeref:struct:context_0::pid_state
ping_rec_interval	src/openvpn/openvpn.h	/^  struct event_timeout ping_rec_interval;$/;"	m	struct:context_2	typeref:struct:context_2::event_timeout
ping_rec_timeout	src/openvpn/options.h	/^  int ping_rec_timeout;         \/* Expect a TCP\/UDP ping from remote at least once every n seconds *\/$/;"	m	struct:options
ping_rec_timeout_action	src/openvpn/options.h	/^  int ping_rec_timeout_action;  \/* What action to take on ping_rec_timeout (exit or restart)? *\/$/;"	m	struct:options
ping_send_interval	src/openvpn/openvpn.h	/^  struct event_timeout ping_send_interval;$/;"	m	struct:context_2	typeref:struct:context_2::event_timeout
ping_send_timeout	src/openvpn/options.h	/^  int ping_send_timeout;        \/* Send a TCP\/UDP ping to remote every n seconds *\/$/;"	m	struct:options
ping_string	src/openvpn/ping.c	/^const uint8_t ping_string[] = {$/;"	v
ping_timer_remote	src/openvpn/options.h	/^  bool ping_timer_remote;       \/* Run ping timer only if we have a remote address *\/$/;"	m	struct:options
pkcs11_addProvider	src/openvpn/pkcs11.c	/^pkcs11_addProvider ($/;"	f
pkcs11_cert_private	src/openvpn/options.h	/^  bool pkcs11_cert_private[MAX_PARMS];$/;"	m	struct:options
pkcs11_certificate_dn	src/openvpn/pkcs11_openssl.c	/^pkcs11_certificate_dn (pkcs11h_certificate_t certificate, struct gc_arena *gc)$/;"	f
pkcs11_certificate_dn	src/openvpn/pkcs11_polarssl.c	/^pkcs11_certificate_dn (pkcs11h_certificate_t cert, struct gc_arena *gc)$/;"	f
pkcs11_certificate_serial	src/openvpn/pkcs11_openssl.c	/^pkcs11_certificate_serial (pkcs11h_certificate_t certificate, char *serial,$/;"	f
pkcs11_certificate_serial	src/openvpn/pkcs11_polarssl.c	/^pkcs11_certificate_serial (pkcs11h_certificate_t cert, char *serial,$/;"	f
pkcs11_forkFixup	src/openvpn/pkcs11.c	/^pkcs11_forkFixup () {$/;"	f
pkcs11_id	src/openvpn/options.h	/^  const char *pkcs11_id;$/;"	m	struct:options
pkcs11_id_management	src/openvpn/options.h	/^  bool pkcs11_id_management;$/;"	m	struct:options
pkcs11_init_tls_session	src/openvpn/pkcs11_openssl.c	/^pkcs11_init_tls_session(pkcs11h_certificate_t certificate,$/;"	f
pkcs11_init_tls_session	src/openvpn/pkcs11_polarssl.c	/^pkcs11_init_tls_session(pkcs11h_certificate_t certificate,$/;"	f
pkcs11_initialize	src/openvpn/pkcs11.c	/^pkcs11_initialize ($/;"	f
pkcs11_logout	src/openvpn/pkcs11.c	/^pkcs11_logout() {$/;"	f
pkcs11_management_id_count	src/openvpn/pkcs11.c	/^pkcs11_management_id_count () {$/;"	f
pkcs11_management_id_get	src/openvpn/pkcs11.c	/^pkcs11_management_id_get ($/;"	f
pkcs11_pin_cache_period	src/openvpn/options.h	/^  int pkcs11_pin_cache_period;$/;"	m	struct:options
pkcs11_private_mode	src/openvpn/options.h	/^  unsigned pkcs11_private_mode[MAX_PARMS];$/;"	m	struct:options
pkcs11_protected_authentication	src/openvpn/options.h	/^  bool pkcs11_protected_authentication[MAX_PARMS];$/;"	m	struct:options
pkcs11_providers	src/openvpn/options.h	/^  const char *pkcs11_providers[MAX_PARMS];$/;"	m	struct:options
pkcs11_terminate	src/openvpn/pkcs11.c	/^pkcs11_terminate () {$/;"	f
pkcs12_file	src/openvpn/options.h	/^  const char *pkcs12_file;$/;"	m	struct:options
pkcs12_file_inline	src/openvpn/options.h	/^  const char *pkcs12_file_inline; \/* contains the base64 encoding of pkcs12 file *\/$/;"	m	struct:options
plaintext_read_buf	src/openvpn/ssl_common.h	/^  struct buffer plaintext_read_buf;$/;"	m	struct:key_state	typeref:struct:key_state::buffer
plaintext_write_buf	src/openvpn/ssl_common.h	/^  struct buffer plaintext_write_buf;$/;"	m	struct:key_state	typeref:struct:key_state::buffer
platform_access	src/openvpn/platform.c	/^platform_access (const char *path, int mode)$/;"	f
platform_chdir	src/openvpn/platform.c	/^platform_chdir (const char* dir)$/;"	f
platform_chroot	src/openvpn/platform.c	/^platform_chroot (const char *path)$/;"	f
platform_fopen	src/openvpn/platform.c	/^platform_fopen (const char *path, const char *mode)$/;"	f
platform_getpid	src/openvpn/platform.c	/^platform_getpid ()$/;"	f
platform_group_get	src/openvpn/platform.c	/^platform_group_get (const char *groupname, struct platform_state_group *state)$/;"	f
platform_group_set	src/openvpn/platform.c	/^platform_group_set (const struct platform_state_group *state)$/;"	f
platform_mlockall	src/openvpn/platform.c	/^platform_mlockall(bool print_msg)$/;"	f
platform_nice	src/openvpn/platform.c	/^platform_nice (int niceval)$/;"	f
platform_open	src/openvpn/platform.c	/^platform_open (const char *path, int flags, int mode)$/;"	f
platform_sleep_milliseconds	src/openvpn/platform.c	/^platform_sleep_milliseconds (unsigned int n)$/;"	f
platform_sleep_until_signal	src/openvpn/platform.c	/^platform_sleep_until_signal (void)$/;"	f
platform_stat	src/openvpn/platform.c	/^platform_stat (const char *path, platform_stat_t *buf)$/;"	f
platform_stat_t	src/openvpn/platform.h	/^typedef struct _stat platform_stat_t;$/;"	t	typeref:struct:_stat
platform_stat_t	src/openvpn/platform.h	/^typedef struct stat platform_stat_t;$/;"	t	typeref:struct:stat
platform_state_group	src/openvpn/openvpn.h	/^  struct platform_state_group platform_state_group;$/;"	m	struct:context_0	typeref:struct:context_0::platform_state_group
platform_state_group	src/openvpn/platform.h	/^struct platform_state_group {$/;"	s
platform_state_group_gid	src/openvpn/platform.h	/^platform_state_group_gid (const struct platform_state_group *s)$/;"	f
platform_state_user	src/openvpn/openvpn.h	/^  struct platform_state_user platform_state_user;$/;"	m	struct:context_0	typeref:struct:context_0::platform_state_user
platform_state_user	src/openvpn/platform.h	/^struct platform_state_user {$/;"	s
platform_state_user_uid	src/openvpn/platform.h	/^platform_state_user_uid (const struct platform_state_user *s)$/;"	f
platform_system_ok	src/openvpn/platform.c	/^platform_system_ok (int stat)$/;"	f
platform_unlink	src/openvpn/platform.c	/^platform_unlink (const char *filename)$/;"	f
platform_user_get	src/openvpn/platform.c	/^platform_user_get (const char *username, struct platform_state_user *state)$/;"	f
platform_user_set	src/openvpn/platform.c	/^platform_user_set (const struct platform_state_user *state)$/;"	f
plugin	src/openvpn/plugin.h	/^struct plugin {$/;"	s
plugin_abort	src/openvpn/plugin.c	/^plugin_abort (void)$/;"	f
plugin_abort_item	src/openvpn/plugin.c	/^plugin_abort_item (const struct plugin *p)$/;"	f	file:
plugin_call	src/openvpn/plugin.h	/^plugin_call(const struct plugin_list *pl,$/;"	f
plugin_call_item	src/openvpn/plugin.c	/^plugin_call_item (const struct plugin *p,$/;"	f	file:
plugin_call_ssl	src/openvpn/plugin.c	/^plugin_call_ssl (const struct plugin_list *pl,$/;"	f
plugin_call_ssl	src/openvpn/plugin.h	/^plugin_call_ssl (const struct plugin_list *pl,$/;"	f
plugin_close_item	src/openvpn/plugin.c	/^plugin_close_item (struct plugin *p)$/;"	f	file:
plugin_common	src/openvpn/plugin.h	/^struct plugin_common$/;"	s
plugin_common_close	src/openvpn/plugin.c	/^plugin_common_close (struct plugin_common *pc)$/;"	f	file:
plugin_common_init	src/openvpn/plugin.c	/^plugin_common_init (const struct plugin_option_list *list)$/;"	f	file:
plugin_common_open	src/openvpn/plugin.c	/^plugin_common_open (struct plugin_common *pc,$/;"	f	file:
plugin_context	sample/sample-plugins/defer/simple.c	/^struct plugin_context {$/;"	s	file:
plugin_context	sample/sample-plugins/log/log.c	/^struct plugin_context {$/;"	s	file:
plugin_context	sample/sample-plugins/log/log_v3.c	/^struct plugin_context {$/;"	s	file:
plugin_context	sample/sample-plugins/simple/simple.c	/^struct plugin_context {$/;"	s	file:
plugin_defined	src/openvpn/plugin.c	/^plugin_defined (const struct plugin_list *pl, const int type)$/;"	f
plugin_defined	src/openvpn/plugin.h	/^plugin_defined (const struct plugin_list *pl, const int type)$/;"	f
plugin_handle	src/openvpn/plugin.h	/^  openvpn_plugin_handle_t plugin_handle;$/;"	m	struct:plugin
plugin_init_item	src/openvpn/plugin.c	/^plugin_init_item (struct plugin *p, const struct plugin_option *o)$/;"	f	file:
plugin_list	src/openvpn/options.h	/^  struct plugin_option_list *plugin_list;$/;"	m	struct:options	typeref:struct:options::plugin_option_list
plugin_list	src/openvpn/plugin.h	/^struct plugin_list { int dummy; };$/;"	s
plugin_list	src/openvpn/plugin.h	/^struct plugin_list$/;"	s
plugin_list_close	src/openvpn/plugin.c	/^plugin_list_close (struct plugin_list *pl)$/;"	f
plugin_list_inherit	src/openvpn/plugin.c	/^plugin_list_inherit (const struct plugin_list *src)$/;"	f
plugin_list_init	src/openvpn/plugin.c	/^plugin_list_init (const struct plugin_option_list *list)$/;"	f
plugin_list_open	src/openvpn/plugin.c	/^plugin_list_open (struct plugin_list *pl,$/;"	f
plugin_log	include/openvpn-plugin.h	/^  plugin_log_t    plugin_log;$/;"	m	struct:openvpn_plugin_callbacks
plugin_log	src/openvpn/plugin.c	/^plugin_log (openvpn_plugin_log_flags_t flags, const char *name, const char *format, ...)$/;"	f	file:
plugin_mask_string	src/openvpn/plugin.c	/^plugin_mask_string (const unsigned int type_mask, struct gc_arena *gc)$/;"	f	file:
plugin_n	src/openvpn/plugin.h	/^plugin_n (const struct plugin_list *pl)$/;"	f
plugin_open_item	src/openvpn/plugin.c	/^plugin_open_item (struct plugin *p,$/;"	f	file:
plugin_option	src/openvpn/plugin.h	/^struct plugin_option {$/;"	s
plugin_option_list	src/openvpn/plugin.h	/^struct plugin_option_list {$/;"	s
plugin_option_list_add	src/openvpn/plugin.c	/^plugin_option_list_add (struct plugin_option_list *list, char **p, struct gc_arena *gc)$/;"	f
plugin_option_list_new	src/openvpn/plugin.c	/^plugin_option_list_new (struct gc_arena *gc)$/;"	f
plugin_option_list_print	src/openvpn/plugin.c	/^plugin_option_list_print (const struct plugin_option_list *list, int msglevel)$/;"	f
plugin_per_client	src/openvpn/plugin.h	/^struct plugin_per_client$/;"	s
plugin_per_client_context	sample/sample-plugins/defer/simple.c	/^struct plugin_per_client_context {$/;"	s	file:
plugin_per_client_destroy	src/openvpn/plugin.c	/^plugin_per_client_destroy (const struct plugin_common *pc, struct plugin_per_client *cli)$/;"	f	file:
plugin_per_client_init	src/openvpn/plugin.c	/^plugin_per_client_init (const struct plugin_common *pc,$/;"	f	file:
plugin_return	src/openvpn/plugin.h	/^struct plugin_return { int dummy; };$/;"	s
plugin_return	src/openvpn/plugin.h	/^struct plugin_return$/;"	s
plugin_return_defined	src/openvpn/plugin.h	/^plugin_return_defined (const struct plugin_return *pr)$/;"	f
plugin_return_free	src/openvpn/plugin.c	/^plugin_return_free (struct plugin_return *pr)$/;"	f
plugin_return_get_column	src/openvpn/plugin.c	/^plugin_return_get_column (const struct plugin_return *src,$/;"	f
plugin_return_init	src/openvpn/plugin.h	/^plugin_return_init (struct plugin_return *pr)$/;"	f
plugin_return_print	src/openvpn/plugin.c	/^plugin_return_print (const int msglevel, const char *prefix, const struct plugin_return *pr)$/;"	f
plugin_show_args_env	src/openvpn/plugin.c	/^plugin_show_args_env (int msglevel, const char *argv[], const char *envp[])$/;"	f	file:
plugin_show_string_array	src/openvpn/plugin.c	/^plugin_show_string_array (int msglevel, const char *name, const char *array[])$/;"	f	file:
plugin_supported_types	src/openvpn/plugin.c	/^plugin_supported_types (void)$/;"	f	file:
plugin_type_mask	src/openvpn/plugin.h	/^  unsigned int plugin_type_mask;$/;"	m	struct:plugin
plugin_type_name	src/openvpn/plugin.c	/^plugin_type_name (const int type)$/;"	f	file:
plugin_vlog	include/openvpn-plugin.h	/^  plugin_vlog_t   plugin_vlog;$/;"	m	struct:openvpn_plugin_callbacks
plugin_vlog	src/openvpn/plugin.c	/^plugin_vlog (openvpn_plugin_log_flags_t flags, const char *name, const char *format, va_list arglist)$/;"	f	file:
plugins	src/openvpn/openvpn.h	/^  struct plugin_list *plugins;  \/**< List of plug-ins. *\/$/;"	m	struct:context	typeref:struct:context::plugin_list
plugins	src/openvpn/plugin.h	/^  struct plugin plugins[MAX_PLUGINS];$/;"	m	struct:plugin_common	typeref:struct:plugin_common::plugin
plugins	src/openvpn/plugin.h	/^  struct plugin_option plugins[MAX_PLUGINS];$/;"	m	struct:plugin_option_list	typeref:struct:plugin_option_list::plugin_option
plugins	src/openvpn/socket.h	/^  const struct plugin_list *plugins;$/;"	m	struct:link_socket_info	typeref:struct:link_socket_info::plugin_list
plugins	src/openvpn/ssl_common.h	/^  const struct plugin_list *plugins;$/;"	m	struct:tls_options	typeref:struct:tls_options::plugin_list
plugins_owned	src/openvpn/openvpn.h	/^  bool plugins_owned;           \/**< Whether the plug-ins should be$/;"	m	struct:context
po_append_event	src/openvpn/event.c	/^po_append_event (struct po_set *pos, event_t event, unsigned int rwflags, void *arg)$/;"	f	file:
po_ctl	src/openvpn/event.c	/^po_ctl (struct event_set *es, event_t event, unsigned int rwflags, void *arg)$/;"	f	file:
po_del	src/openvpn/event.c	/^po_del (struct event_set *es, event_t event)$/;"	f	file:
po_free	src/openvpn/event.c	/^po_free (struct event_set *es)$/;"	f	file:
po_init	src/openvpn/event.c	/^po_init (int *maxevents, unsigned int flags)$/;"	f	file:
po_reset	src/openvpn/event.c	/^po_reset (struct event_set *es)$/;"	f	file:
po_set	src/openvpn/event.c	/^struct po_set$/;"	s	file:
po_set_pollfd_events	src/openvpn/event.c	/^po_set_pollfd_events (struct pollfd *pfdp, unsigned int rwflags)$/;"	f	file:
po_wait	src/openvpn/event.c	/^po_wait (struct event_set *es, const struct timeval *tv, struct event_set_return *out, int outlen)$/;"	f	file:
polarssl_name	src/openvpn/crypto_polarssl.c	/^typedef struct { const char * openvpn_name; const char * polarssl_name; } cipher_name_pair;$/;"	m	struct:__anon11	file:
pop_perf_index	src/openvpn/perf.c	/^pop_perf_index (void)$/;"	f	file:
port	src/openvpn/proxy.h	/^  int port;$/;"	m	struct:http_proxy_options
port	src/openvpn/proxy.h	/^  int port;$/;"	m	struct:http_proxy_options_simple
port	src/openvpn/socks.h	/^  int port;$/;"	m	struct:socks_proxy_info
port_share	src/openvpn/ps.c	/^struct port_share *port_share = NULL; \/* GLOBAL *\/$/;"	v	typeref:struct:port_share
port_share	src/openvpn/ps.h	/^struct port_share {$/;"	s
port_share_abort	src/openvpn/ps.c	/^port_share_abort (struct port_share *ps)$/;"	f
port_share_close	src/openvpn/ps.c	/^port_share_close (struct port_share *ps)$/;"	f
port_share_host	src/openvpn/options.h	/^  char *port_share_host;$/;"	m	struct:options
port_share_journal_dir	src/openvpn/options.h	/^  const char *port_share_journal_dir;$/;"	m	struct:options
port_share_open	src/openvpn/ps.c	/^port_share_open (const char *host,$/;"	f
port_share_port	src/openvpn/options.h	/^  int port_share_port;$/;"	m	struct:options
port_share_proxy	src/openvpn/ps.c	/^port_share_proxy (const in_addr_t hostaddr,$/;"	f	file:
port_share_redirect	src/openvpn/ps.c	/^port_share_redirect (struct port_share *ps, const struct buffer *head, socket_descriptor_t sd)$/;"	f
port_share_sendmsg	src/openvpn/ps.c	/^port_share_sendmsg (const socket_descriptor_t sd,$/;"	f	file:
port_share_state	src/openvpn/socket.h	/^  int port_share_state;$/;"	m	struct:stream_buf
pos	src/openvpn/base64.c	/^pos(char c)$/;"	f	file:
positive_atoi	src/openvpn/options.c	/^positive_atoi (const char *str)$/;"	f	file:
possibly_become_daemon	src/openvpn/init.c	/^possibly_become_daemon (const struct options *options, const bool first_time)$/;"	f	file:
post_compress	src/openvpn/lzo.h	/^  counter_type post_compress;$/;"	m	struct:lzo_compress_workspace
post_decompress	src/openvpn/lzo.h	/^  counter_type post_decompress;$/;"	m	struct:lzo_compress_workspace
post_fork_cleanup_func_t	src/openvpn/ps.h	/^typedef void (*post_fork_cleanup_func_t)(void *arg);$/;"	t
post_init_signal_catch	src/openvpn/sig.c	/^post_init_signal_catch (void)$/;"	f
post_open_mtu	src/openvpn/tun.h	/^  int post_open_mtu;$/;"	m	struct:tuntap
pract	src/openvpn/mtcp.c	/^pract (int action)$/;"	f	file:
pre_compress	src/openvpn/lzo.h	/^  counter_type pre_compress;$/;"	m	struct:lzo_compress_workspace
pre_decompress	src/openvpn/lzo.h	/^  counter_type pre_decompress;$/;"	m	struct:lzo_compress_workspace
pre_init_signal_catch	src/openvpn/sig.c	/^pre_init_signal_catch (void)$/;"	f
pre_master	src/openvpn/ssl_common.h	/^  uint8_t pre_master[48];       \/**< Random used for master secret$/;"	m	struct:key_source
pre_pull	src/openvpn/options.h	/^  struct options_pre_pull *pre_pull;$/;"	m	struct:options	typeref:struct:options::options_pre_pull
pre_pull_restore	src/openvpn/options.c	/^pre_pull_restore (struct options *o)$/;"	f
pre_pull_save	src/openvpn/options.c	/^pre_pull_save (struct options *o)$/;"	f
pre_select	src/openvpn/forward.c	/^pre_select (struct context *c)$/;"	f
pre_setup	src/openvpn/init.c	/^pre_setup (const struct options *options)$/;"	f
prefix	src/openvpn/route.h	/^  const char *prefix;		\/* e.g. "2001:db8:1::\/64" *\/$/;"	m	struct:route_ipv6_option
pri	src/openvpn/schedule.h	/^  unsigned int pri;              \/* random treap priority *\/$/;"	m	struct:schedule_entry
print_argv	src/openvpn/buffer.c	/^print_argv (const char **p, struct gc_arena *gc, const unsigned int flags)$/;"	f
print_bypass_addresses	src/openvpn/route.c	/^print_bypass_addresses (const struct route_bypass *rb)$/;"	f	file:
print_client_nat_list	src/openvpn/clinat.c	/^print_client_nat_list(const struct client_nat_option_list *list, int msglevel)$/;"	f
print_default_gateway	src/openvpn/route.c	/^print_default_gateway(const int msglevel, const struct route_gateway_info *rgi)$/;"	f
print_details	src/openvpn/ssl_openssl.c	/^print_details (struct key_state_ssl * ks_ssl, const char *prefix)$/;"	f
print_details	src/openvpn/ssl_polarssl.c	/^print_details (struct key_state_ssl * ks_ssl, const char *prefix)$/;"	f
print_in6_addr	src/openvpn/socket.c	/^print_in6_addr (struct in6_addr a6, unsigned int flags, struct gc_arena *gc)$/;"	f
print_in6_addr_netbits_only	src/openvpn/route.c	/^print_in6_addr_netbits_only( struct in6_addr network_copy, int netbits, $/;"	f	file:
print_in_addr_t	src/openvpn/socket.c	/^print_in_addr_t (in_addr_t addr, unsigned int flags, struct gc_arena *gc)$/;"	f
print_key_id	src/openvpn/ssl.c	/^print_key_id (struct tls_multi *multi, struct gc_arena *gc)$/;"	f	file:
print_link_socket_actual	src/openvpn/socket.c	/^print_link_socket_actual (const struct link_socket_actual *act, struct gc_arena *gc)$/;"	f
print_link_socket_actual_ex	src/openvpn/socket.c	/^print_link_socket_actual_ex (const struct link_socket_actual *act,$/;"	f
print_netmask	src/openvpn/helper.c	/^print_netmask (int netbits, struct gc_arena *gc)$/;"	f	file:
print_nhash	src/openvpn/list.c	/^print_nhash (struct hash *hash)$/;"	f	file:
print_nsCertType	src/openvpn/ssl_verify.c	/^print_nsCertType (int type)$/;"	f	file:
print_openssl_info	src/openvpn/init.c	/^print_openssl_info (const struct options *options)$/;"	f
print_opt_route	src/openvpn/helper.c	/^print_opt_route (const in_addr_t network, const in_addr_t netmask, struct gc_arena *gc)$/;"	f	file:
print_opt_route_gateway	src/openvpn/helper.c	/^print_opt_route_gateway (const in_addr_t route_gateway, struct gc_arena *gc)$/;"	f	file:
print_opt_route_gateway_dhcp	src/openvpn/helper.c	/^print_opt_route_gateway_dhcp (struct gc_arena *gc)$/;"	f	file:
print_opt_topology	src/openvpn/helper.c	/^print_opt_topology (const int topology, struct gc_arena *gc)$/;"	f	file:
print_pkt	src/openvpn/clinat.c	/^print_pkt (struct openvpn_iphdr *iph, const char *prefix, const int direction, const int msglevel)$/;"	f	file:
print_route	src/openvpn/route.c	/^print_route (const struct route_ipv4 *r, int level)$/;"	f	file:
print_route_option	src/openvpn/route.c	/^print_route_option (const struct route_option *ro, int level)$/;"	f	file:
print_route_options	src/openvpn/route.c	/^print_route_options (const struct route_option_list *rol,$/;"	f
print_routes	src/openvpn/route.c	/^print_routes (const struct route_list *rl, int level)$/;"	f
print_signal	src/openvpn/sig.c	/^print_signal (const struct signal_info *si, const char *title, int msglevel)$/;"	f
print_sockaddr	src/openvpn/socket.c	/^print_sockaddr (const struct openvpn_sockaddr *addr, struct gc_arena *gc)$/;"	f
print_sockaddr_ex	src/openvpn/socket.c	/^print_sockaddr_ex (const struct openvpn_sockaddr *addr,$/;"	f
print_status	src/openvpn/sig.c	/^print_status (const struct context *c, struct status_output *so)$/;"	f
print_status_mode	src/openvpn/status.c	/^print_status_mode (unsigned int flags)$/;"	f	file:
print_str	src/openvpn/helper.c	/^print_str (const char *str, struct gc_arena *gc)$/;"	f	file:
print_str_int	src/openvpn/helper.c	/^print_str_int (const char *str, const int i, struct gc_arena *gc)$/;"	f	file:
print_topology	src/openvpn/options.c	/^print_topology (const int topology)$/;"	f
print_usage	test-driver	/^print_usage ()$/;"	f
printable_char_fmt	src/openvpn/crypto.c	/^static const char printable_char_fmt[] =$/;"	v	file:
priv_key	src/openvpn/ssl_polarssl.h	/^    rsa_context *priv_key;	\/**< Local private key *\/$/;"	m	struct:tls_root_ctx
priv_key_file	src/openvpn/options.h	/^  const char *priv_key_file;$/;"	m	struct:options
priv_key_file_inline	src/openvpn/options.h	/^  char *priv_key_file_inline;$/;"	m	struct:options
priv_key_pkcs11	src/openvpn/ssl_polarssl.h	/^    pkcs11_context *priv_key_pkcs11;	\/**< PKCS11 private key *\/$/;"	m	struct:tls_root_ctx
prng_bytes	src/openvpn/crypto.c	/^prng_bytes (uint8_t *output, int len)$/;"	f
prng_hash	src/openvpn/options.h	/^  const char *prng_hash;$/;"	m	struct:options
prng_init	src/openvpn/crypto.c	/^prng_init (const char *md_name, const int nonce_secret_len_parm)$/;"	f
prng_nonce_secret_len	src/openvpn/options.h	/^  int prng_nonce_secret_len;$/;"	m	struct:options
prng_reset_nonce	src/openvpn/crypto.c	/^prng_reset_nonce ()$/;"	f	file:
prng_uninit	src/openvpn/crypto.c	/^prng_uninit (void)$/;"	f
probehdr	src/openvpn/mtu.c	/^struct probehdr$/;"	s	file:
process_coarse_timers	src/openvpn/forward.c	/^process_coarse_timers (struct context *c)$/;"	f	file:
process_config	build/msvc/msvc-generate/msvc-generate.js	/^function process_config(vars, file) {$/;"	f
process_explicit_exit_notification_init	src/openvpn/sig.c	/^process_explicit_exit_notification_init (struct context *c)$/;"	f	file:
process_explicit_exit_notification_timer_wakeup	src/openvpn/sig.c	/^process_explicit_exit_notification_timer_wakeup (struct context *c)$/;"	f
process_file	build/msvc/msvc-generate/msvc-generate.js	/^function process_file(vars, input, output) {$/;"	f
process_incoming_link	src/openvpn/forward.c	/^process_incoming_link (struct context *c)$/;"	f
process_incoming_push_msg	src/openvpn/push.c	/^process_incoming_push_msg (struct context *c,$/;"	f
process_incoming_tun	src/openvpn/forward.c	/^process_incoming_tun (struct context *c)$/;"	f
process_io	src/openvpn/forward.c	/^process_io (struct context *c)$/;"	f
process_ip_header	src/openvpn/forward.c	/^process_ip_header (struct context *c, unsigned int flags, struct buffer *buf)$/;"	f
process_outgoing_link	src/openvpn/forward.c	/^process_outgoing_link (struct context *c)$/;"	f
process_outgoing_tun	src/openvpn/forward.c	/^process_outgoing_tun (struct context *c)$/;"	f
process_received_occ_msg	src/openvpn/occ.c	/^process_received_occ_msg (struct context *c)$/;"	f
process_signal	src/openvpn/sig.c	/^process_signal (struct context *c)$/;"	f
process_signal_p2p	src/openvpn/openvpn.c	/^process_signal_p2p (struct context *c)$/;"	f	file:
process_sigterm	src/openvpn/sig.c	/^process_sigterm (struct context *c)$/;"	f	file:
process_sigusr2	src/openvpn/sig.c	/^process_sigusr2 (const struct context *c)$/;"	f	file:
program_details	missing	/^program_details ()$/;"	f
proto	src/openvpn/options.h	/^  int proto;$/;"	m	struct:connection_entry
proto	src/openvpn/options.h	/^  int proto;$/;"	m	struct:remote_entry
proto	src/openvpn/proto.h	/^  uint16_t proto;                     \/* packet type ID field *\/$/;"	m	struct:openvpn_ethhdr
proto	src/openvpn/socket.h	/^  int proto;                    \/* Protocol (PROTO_x defined below) *\/$/;"	m	struct:link_socket_info
proto2ascii	src/openvpn/socket.c	/^proto2ascii (int proto, bool display_form)$/;"	f
proto2ascii_all	src/openvpn/socket.c	/^proto2ascii_all (struct gc_arena *gc)$/;"	f
proto_addr_size	src/openvpn/proto.h	/^  uint8_t  proto_addr_size;     \/* 0x04 *\/$/;"	m	struct:openvpn_arp
proto_addr_type	src/openvpn/proto.h	/^  uint16_t proto_addr_type;     \/* 0x0800 *\/$/;"	m	struct:openvpn_arp
proto_af	src/openvpn/socket.c	/^  unsigned short proto_af;$/;"	m	struct:proto_names	file:
proto_force	src/openvpn/options.h	/^  int proto_force;$/;"	m	struct:options
proto_is_dgram	src/openvpn/socket.c	/^proto_is_dgram(int proto)$/;"	f
proto_is_net	src/openvpn/socket.c	/^proto_is_net(int proto)$/;"	f
proto_is_tcp	src/openvpn/socket.c	/^proto_is_tcp(int proto)$/;"	f
proto_is_udp	src/openvpn/socket.c	/^proto_is_udp(int proto)$/;"	f
proto_names	src/openvpn/socket.c	/^static const struct proto_names proto_names[PROTO_N] = {$/;"	v	typeref:struct:proto_names	file:
proto_names	src/openvpn/socket.c	/^struct proto_names {$/;"	s	file:
proto_num	src/openvpn/socket.h	/^enum proto_num {$/;"	g
proto_overhead	src/openvpn/socket.c	/^const int proto_overhead[] = { \/* indexed by PROTO_x *\/$/;"	v
proto_remote	src/openvpn/socket.c	/^proto_remote (int proto, bool remote)$/;"	f
proto_sa_family	src/openvpn/socket.c	/^proto_sa_family(int proto)$/;"	f
protocol	src/openvpn/proto.h	/^  uint8_t    protocol;$/;"	m	struct:openvpn_iphdr
protocol_dump	src/openvpn/ssl.c	/^protocol_dump (struct buffer *buffer, unsigned int flags, struct gc_arena *gc)$/;"	f
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
proxy_authenticate	src/openvpn/proxy.h	/^  char *proxy_authenticate;$/;"	m	struct:http_proxy_info
proxy_cmd	src/openvpn/manage.h	/^  bool (*proxy_cmd) (void *arg, const char **p);$/;"	m	struct:management_callback
proxy_connection	src/openvpn/ps.c	/^struct proxy_connection {$/;"	s	file:
proxy_connection_io_dispatch	src/openvpn/ps.c	/^proxy_connection_io_dispatch (struct proxy_connection *pc,$/;"	f	file:
proxy_connection_io_recv	src/openvpn/ps.c	/^proxy_connection_io_recv (struct proxy_connection *pc)$/;"	f	file:
proxy_connection_io_requeue	src/openvpn/ps.c	/^proxy_connection_io_requeue (struct proxy_connection *pc, const int rwflags_new, struct event_set *es)$/;"	f	file:
proxy_connection_io_send	src/openvpn/ps.c	/^proxy_connection_io_send (struct proxy_connection *pc, int *bytes_sent)$/;"	f	file:
proxy_connection_io_status	src/openvpn/ps.c	/^proxy_connection_io_status (const int status, int *rwflags_pc, int *rwflags_cp)$/;"	f	file:
proxy_connection_io_xfer	src/openvpn/ps.c	/^proxy_connection_io_xfer (struct proxy_connection *pc, const int max_transfer)$/;"	f	file:
proxy_dest_host	src/openvpn/socket.h	/^  const char *proxy_dest_host;$/;"	m	struct:link_socket
proxy_dest_port	src/openvpn/socket.h	/^  int proxy_dest_port;$/;"	m	struct:link_socket
proxy_entry_close_sd	src/openvpn/ps.c	/^proxy_entry_close_sd (struct proxy_connection *pc, struct event_set *es)$/;"	f	file:
proxy_entry_mark_for_close	src/openvpn/ps.c	/^proxy_entry_mark_for_close (struct proxy_connection *pc, struct event_set *es)$/;"	f	file:
proxy_entry_new	src/openvpn/ps.c	/^proxy_entry_new (struct proxy_connection **list,$/;"	f	file:
proxy_list_close	src/openvpn/ps.c	/^proxy_list_close (struct proxy_connection **list)$/;"	f	file:
proxy_list_housekeeping	src/openvpn/ps.c	/^proxy_list_housekeeping (struct proxy_connection **list)$/;"	f	file:
proxy_scope	src/openvpn/init.c	/^proxy_scope (struct context *c)$/;"	f	file:
ptos	src/openvpn/socket.h	/^  int  ptos;$/;"	m	struct:link_socket
ptos	src/openvpn/socket.h	/^  uint8_t ptos;$/;"	m	struct:link_socket
ptos_defined	src/openvpn/socket.h	/^  bool ptos_defined;$/;"	m	struct:link_socket
ptr_format	src/openvpn/common.h	57;"	d
ptr_format	src/openvpn/common.h	59;"	d
ptr_type	src/openvpn/common.h	/^typedef unsigned long long ptr_type;$/;"	t
ptr_type	src/openvpn/common.h	/^typedef unsigned long ptr_type;$/;"	t
pull	src/openvpn/options.h	/^  bool pull; \/* client pull of config options from server *\/$/;"	m	struct:options
pull_permission_mask	src/openvpn/init.c	/^pull_permission_mask (const struct context *c)$/;"	f
pulled_options_digest	src/openvpn/openvpn.h	/^  struct md5_digest pulled_options_digest;$/;"	m	struct:context_2	typeref:struct:context_2::md5_digest
pulled_options_digest_save	src/openvpn/openvpn.h	/^  struct md5_digest pulled_options_digest_save;$/;"	m	struct:context_1	typeref:struct:context_1::md5_digest
pulled_options_md5_init_done	src/openvpn/openvpn.h	/^  bool pulled_options_md5_init_done;$/;"	m	struct:context_2
pulled_options_state	src/openvpn/openvpn.h	/^  struct md5_state pulled_options_state;$/;"	m	struct:context_2	typeref:struct:context_2::md5_state
purge_user_pass	src/openvpn/misc.c	/^purge_user_pass (struct user_pass *up, const bool force)$/;"	f
push_continuation	src/openvpn/options.h	/^  int push_continuation;$/;"	m	struct:options
push_entry	src/openvpn/pushlist.h	/^struct push_entry {$/;"	s
push_ifconfig_constraint_defined	src/openvpn/options.h	/^  bool push_ifconfig_constraint_defined;$/;"	m	struct:options
push_ifconfig_constraint_netmask	src/openvpn/options.h	/^  in_addr_t push_ifconfig_constraint_netmask;$/;"	m	struct:options
push_ifconfig_constraint_network	src/openvpn/options.h	/^  in_addr_t push_ifconfig_constraint_network;$/;"	m	struct:options
push_ifconfig_defined	src/openvpn/openvpn.h	/^  bool push_ifconfig_defined;$/;"	m	struct:context_2
push_ifconfig_defined	src/openvpn/options.h	/^  bool push_ifconfig_defined;$/;"	m	struct:options
push_ifconfig_ipv6_defined	src/openvpn/openvpn.h	/^  bool            push_ifconfig_ipv6_defined;$/;"	m	struct:context_2
push_ifconfig_ipv6_defined	src/openvpn/options.h	/^  bool            push_ifconfig_ipv6_defined;		\/* IPv6 *\/$/;"	m	struct:options
push_ifconfig_ipv6_local	src/openvpn/openvpn.h	/^  struct in6_addr push_ifconfig_ipv6_local;$/;"	m	struct:context_2	typeref:struct:context_2::in6_addr
push_ifconfig_ipv6_local	src/openvpn/options.h	/^  struct in6_addr push_ifconfig_ipv6_local;		\/* IPv6 *\/$/;"	m	struct:options	typeref:struct:options::in6_addr
push_ifconfig_ipv6_netbits	src/openvpn/openvpn.h	/^  int             push_ifconfig_ipv6_netbits;$/;"	m	struct:context_2
push_ifconfig_ipv6_netbits	src/openvpn/options.h	/^  int 		  push_ifconfig_ipv6_netbits;		\/* IPv6 *\/$/;"	m	struct:options
push_ifconfig_ipv6_remote	src/openvpn/openvpn.h	/^  struct in6_addr push_ifconfig_ipv6_remote;$/;"	m	struct:context_2	typeref:struct:context_2::in6_addr
push_ifconfig_ipv6_remote	src/openvpn/options.h	/^  struct in6_addr push_ifconfig_ipv6_remote;		\/* IPv6 *\/$/;"	m	struct:options	typeref:struct:options::in6_addr
push_ifconfig_local	src/openvpn/openvpn.h	/^  in_addr_t push_ifconfig_local;$/;"	m	struct:context_2
push_ifconfig_local	src/openvpn/options.h	/^  in_addr_t push_ifconfig_local;$/;"	m	struct:options
push_ifconfig_local_alias	src/openvpn/openvpn.h	/^  in_addr_t push_ifconfig_local_alias;$/;"	m	struct:context_2
push_ifconfig_local_alias	src/openvpn/options.h	/^  in_addr_t push_ifconfig_local_alias;$/;"	m	struct:options
push_ifconfig_remote_netmask	src/openvpn/openvpn.h	/^  in_addr_t push_ifconfig_remote_netmask;$/;"	m	struct:context_2
push_ifconfig_remote_netmask	src/openvpn/options.h	/^  in_addr_t push_ifconfig_remote_netmask;$/;"	m	struct:options
push_list	src/openvpn/options.h	/^  struct push_list push_list;$/;"	m	struct:options	typeref:struct:options::push_list
push_list	src/openvpn/pushlist.h	/^struct push_list {$/;"	s
push_option	src/openvpn/push.c	/^push_option (struct options *o, const char *opt, int msglevel)$/;"	f
push_option_ex	src/openvpn/push.c	/^push_option_ex (struct options *o, const char *opt, bool enable, int msglevel)$/;"	f	file:
push_option_types_found	src/openvpn/options.h	/^  unsigned int push_option_types_found;$/;"	m	struct:options
push_options	src/openvpn/push.c	/^push_options (struct options *o, char **p, int msglevel, struct gc_arena *gc)$/;"	f
push_peer_info	src/openvpn/options.h	/^  bool push_peer_info;$/;"	m	struct:options
push_peer_info	src/openvpn/ssl.c	/^push_peer_info(struct buffer *buf, struct tls_session *session)$/;"	f	file:
push_peer_info_detail	src/openvpn/ssl_common.h	/^  int push_peer_info_detail;$/;"	m	struct:tls_options
push_perf_index	src/openvpn/perf.c	/^push_perf_index (int pindex)$/;"	f	file:
push_reply_deferred	src/openvpn/openvpn.h	/^  bool push_reply_deferred;$/;"	m	struct:context_2
push_request_interval	src/openvpn/openvpn.h	/^  struct event_timeout push_request_interval;$/;"	m	struct:context_2	typeref:struct:context_2::event_timeout
push_reset	src/openvpn/push.c	/^push_reset (struct options *o)$/;"	f
pw	src/openvpn/platform.h	/^  struct passwd *pw;$/;"	m	struct:platform_state_user	typeref:struct:platform_state_user::passwd
queried_creds	src/openvpn/proxy.h	/^  bool queried_creds;$/;"	m	struct:http_proxy_info
rand_bytes	src/openvpn/crypto_openssl.c	/^int rand_bytes(uint8_t *output, int len)$/;"	f
rand_bytes	src/openvpn/crypto_polarssl.c	/^rand_bytes (uint8_t *output, int len)$/;"	f
rand_ctx_enable_prediction_resistance	src/openvpn/crypto_polarssl.c	/^void rand_ctx_enable_prediction_resistance()$/;"	f
rand_ctx_get	src/openvpn/crypto_polarssl.c	/^ctr_drbg_context * rand_ctx_get()$/;"	f
random	src/openvpn/syshead.h	44;"	d
random1	src/openvpn/ssl_common.h	/^  uint8_t random1[32];          \/**< Seed used for master secret$/;"	m	struct:key_source
random2	src/openvpn/ssl_common.h	/^  uint8_t random2[32];          \/**< Seed used for key expansion, provided$/;"	m	struct:key_source
random_bytes_to_buf	src/openvpn/ssl.c	/^random_bytes_to_buf (struct buffer *buf,$/;"	f	file:
rcvbuf	src/openvpn/options.h	/^  int rcvbuf;$/;"	m	struct:options
rcvbuf	src/openvpn/socket.h	/^  int rcvbuf;$/;"	m	struct:socket_buffer_size
read	src/openvpn/win32.h	/^  HANDLE read;$/;"	m	struct:rw_handle
read_buf	src/openvpn/status.h	/^  struct buffer read_buf;$/;"	m	struct:status_output	typeref:struct:status_output::buffer
read_config_file	src/openvpn/options.c	/^read_config_file (struct options *options,$/;"	f	file:
read_config_string	src/openvpn/options.c	/^read_config_string (const char *prefix,$/;"	f	file:
read_control_auth	src/openvpn/ssl.c	/^read_control_auth (struct buffer *buf,$/;"	f	file:
read_incoming_link	src/openvpn/forward.c	/^read_incoming_link (struct context *c)$/;"	f
read_incoming_tun	src/openvpn/forward.c	/^read_incoming_tun (struct context *c)$/;"	f
read_inline_file	src/openvpn/options.c	/^read_inline_file (struct in_src *is, const char *close_tag, struct gc_arena *gc)$/;"	f	file:
read_key	src/openvpn/crypto.c	/^read_key (struct key *key, const struct key_type *kt, struct buffer *buf)$/;"	f
read_key_file	src/openvpn/crypto.c	/^read_key_file (struct key2 *key2, const char *file, const unsigned int flags)$/;"	f
read_link_buf	src/openvpn/openvpn.h	/^  struct buffer read_link_buf;$/;"	m	struct:context_buffers	typeref:struct:context_buffers::buffer
read_passphrase_hash	src/openvpn/crypto.c	/^read_passphrase_hash (const char *passphrase_file,$/;"	f
read_string	src/openvpn/ssl.c	/^read_string (struct buffer *buf, char *str, const unsigned int capacity)$/;"	f	file:
read_string_alloc	src/openvpn/ssl.c	/^read_string_alloc (struct buffer *buf)$/;"	f	file:
read_string_discard	src/openvpn/ssl.c	/^read_string_discard (struct buffer *buf)$/;"	f
read_tun	src/openvpn/tun.c	/^read_tun (struct tuntap *tt, uint8_t *buf, int len)$/;"	f
read_tun	src/openvpn/tun.c	/^read_tun (struct tuntap* tt, uint8_t *buf, int len)$/;"	f
read_tun_buf	src/openvpn/openvpn.h	/^  struct buffer read_tun_buf;$/;"	m	struct:context_buffers	typeref:struct:context_buffers::buffer
read_tun_buffered	src/openvpn/tun.h	/^read_tun_buffered (struct tuntap *tt, struct buffer *buf, int maxsize)$/;"	f
read_tun_header	src/openvpn/tun.c	/^read_tun_header (struct tuntap* tt, uint8_t *buf, int len)$/;"	f
readfds	src/openvpn/event.c	/^  fd_set readfds;$/;"	m	struct:se_set	file:
reads	src/openvpn/socket.h	/^  struct overlapped_io reads;$/;"	m	struct:link_socket	typeref:struct:link_socket::overlapped_io
reads	src/openvpn/tun.h	/^  struct overlapped_io reads;$/;"	m	struct:tuntap	typeref:struct:tuntap::overlapped_io
real	src/openvpn/multi.h	/^  struct mroute_addr real;      \/**< External network address of the$/;"	m	struct:multi_instance	typeref:struct:multi_instance::mroute_addr
real_hash_size	src/openvpn/options.h	/^  int real_hash_size;$/;"	m	struct:options
reap_buckets_per_pass	src/openvpn/multi.c	/^reap_buckets_per_pass (int n_buckets)$/;"	f	file:
reaper	src/openvpn/multi.h	/^  struct multi_reap *reaper;$/;"	m	struct:multi_context	typeref:struct:multi_context::multi_reap
rec	src/openvpn/packet_id.h	/^  struct packet_id_rec rec;$/;"	m	struct:packet_id	typeref:struct:packet_id::packet_id_rec
rec_ack	src/openvpn/ssl_common.h	/^  struct reliable_ack *rec_ack;	  \/* buffers all packet IDs we want to ACK back to sender *\/$/;"	m	struct:key_state	typeref:struct:key_state::reliable_ack
rec_reliable	src/openvpn/ssl_common.h	/^  struct reliable *rec_reliable;  \/* order incoming ciphertext packets before we pass to TLS *\/$/;"	m	struct:key_state	typeref:struct:key_state::reliable
receive_auth_failed	src/openvpn/push.c	/^receive_auth_failed (struct context *c, const struct buffer *buffer)$/;"	f
received_os_mtu_hint	src/openvpn/fragment.h	/^  bool received_os_mtu_hint;    \/**< Whether the operating system has$/;"	m	struct:fragment_master
recv_control	src/openvpn/ps.c	/^recv_control (const socket_descriptor_t fd)$/;"	f	file:
recv_control	src/plugins/auth-pam/auth-pam.c	/^recv_control (int fd)$/;"	f	file:
recv_control	src/plugins/down-root/down-root.c	/^recv_control (int fd)$/;"	f	file:
recv_line	src/openvpn/proxy.c	/^recv_line (socket_descriptor_t sd,$/;"	f	file:
recv_socks_reply	src/openvpn/socks.c	/^recv_socks_reply (socket_descriptor_t sd,$/;"	f	file:
recv_string	src/plugins/auth-pam/auth-pam.c	/^recv_string (int fd, char *buffer, int len)$/;"	f	file:
redirect_default_route_to_vpn	src/openvpn/route.c	/^redirect_default_route_to_vpn (struct route_list *rl, const struct tuntap *tt, unsigned int flags, const struct env_set *es)$/;"	f	file:
redirect_stdout_stderr	src/openvpn/error.c	/^redirect_stdout_stderr (const char *file, bool append)$/;"	f
refcount	src/openvpn/mbuf.h	/^  int refcount;$/;"	m	struct:mbuf_buffer
refcount	src/openvpn/multi.h	/^  int refcount;$/;"	m	struct:multi_instance
refresh	src/openvpn/interval.h	/^  interval_t refresh;$/;"	m	struct:interval
register_activity	src/openvpn/forward-inline.h	/^register_activity (struct context *c, const int size)$/;"	f
register_dns	src/openvpn/tun.h	/^  bool register_dns;$/;"	m	struct:tuntap_options
register_signal	src/openvpn/sig.c	/^register_signal (struct context *c, int sig, const char *text)$/;"	f
reliable	src/openvpn/reliable.h	/^struct reliable$/;"	s
reliable_ack	src/openvpn/reliable.h	/^struct reliable_ack$/;"	s
reliable_ack_acknowledge_packet_id	src/openvpn/reliable.c	/^reliable_ack_acknowledge_packet_id (struct reliable_ack *ack, packet_id_type pid)$/;"	f
reliable_ack_adjust_frame_parameters	src/openvpn/reliable.c	/^reliable_ack_adjust_frame_parameters (struct frame* frame, int max)$/;"	f
reliable_ack_empty	src/openvpn/reliable.h	/^reliable_ack_empty (struct reliable_ack *ack)$/;"	f
reliable_ack_packet_id_present	src/openvpn/reliable.c	/^reliable_ack_packet_id_present (struct reliable_ack *ack, packet_id_type pid)$/;"	f	file:
reliable_ack_print	src/openvpn/reliable.c	/^reliable_ack_print (struct buffer *buf, bool verbose, struct gc_arena *gc)$/;"	f
reliable_ack_read	src/openvpn/reliable.c	/^reliable_ack_read (struct reliable_ack * ack,$/;"	f
reliable_ack_read_packet_id	src/openvpn/reliable.c	/^reliable_ack_read_packet_id (struct buffer *buf, packet_id_type *pid)$/;"	f
reliable_ack_write	src/openvpn/reliable.c	/^reliable_ack_write (struct reliable_ack * ack,$/;"	f
reliable_can_get	src/openvpn/reliable.c	/^reliable_can_get (const struct reliable *rel)$/;"	f
reliable_can_send	src/openvpn/reliable.c	/^reliable_can_send (const struct reliable *rel)$/;"	f
reliable_empty	src/openvpn/reliable.c	/^reliable_empty (const struct reliable *rel)$/;"	f
reliable_entry	src/openvpn/reliable.h	/^struct reliable_entry$/;"	s
reliable_free	src/openvpn/reliable.c	/^reliable_free (struct reliable *rel)$/;"	f
reliable_get_buf	src/openvpn/reliable.c	/^reliable_get_buf (struct reliable *rel)$/;"	f
reliable_get_buf_output_sequenced	src/openvpn/reliable.c	/^reliable_get_buf_output_sequenced (struct reliable *rel)$/;"	f
reliable_get_buf_sequenced	src/openvpn/reliable.c	/^reliable_get_buf_sequenced (struct reliable *rel)$/;"	f
reliable_init	src/openvpn/reliable.c	/^reliable_init (struct reliable *rel, int buf_size, int offset, int array_size, bool hold)$/;"	f
reliable_mark_active_incoming	src/openvpn/reliable.c	/^reliable_mark_active_incoming (struct reliable *rel, struct buffer *buf,$/;"	f
reliable_mark_active_outgoing	src/openvpn/reliable.c	/^reliable_mark_active_outgoing (struct reliable *rel, struct buffer *buf, int opcode)$/;"	f
reliable_mark_deleted	src/openvpn/reliable.c	/^reliable_mark_deleted (struct reliable *rel, struct buffer *buf, bool inc_pid)$/;"	f
reliable_not_replay	src/openvpn/reliable.c	/^reliable_not_replay (const struct reliable *rel, packet_id_type id)$/;"	f
reliable_pid_in_range1	src/openvpn/reliable.c	/^reliable_pid_in_range1 (const packet_id_type test,$/;"	f	file:
reliable_pid_in_range2	src/openvpn/reliable.c	/^reliable_pid_in_range2 (const packet_id_type test,$/;"	f	file:
reliable_pid_min	src/openvpn/reliable.c	/^reliable_pid_min (const packet_id_type p1,$/;"	f	file:
reliable_print_ids	src/openvpn/reliable.c	/^reliable_print_ids (const struct reliable *rel, struct gc_arena *gc)$/;"	f	file:
reliable_schedule_now	src/openvpn/reliable.c	/^reliable_schedule_now (struct reliable *rel)$/;"	f
reliable_send	src/openvpn/reliable.c	/^reliable_send (struct reliable *rel, int *opcode)$/;"	f
reliable_send_purge	src/openvpn/reliable.c	/^reliable_send_purge (struct reliable *rel, struct reliable_ack *ack)$/;"	f
reliable_send_timeout	src/openvpn/reliable.c	/^reliable_send_timeout (const struct reliable *rel)$/;"	f
reliable_set_timeout	src/openvpn/reliable.h	/^reliable_set_timeout (struct reliable *rel, interval_t timeout)$/;"	f
reliable_unique_retry	src/openvpn/reliable.c	/^reliable_unique_retry (struct reliable *rel, time_t retry)$/;"	f	file:
reliable_wont_break_sequentiality	src/openvpn/reliable.c	/^reliable_wont_break_sequentiality (const struct reliable *rel, packet_id_type id)$/;"	f
reload	src/openvpn/pf.h	/^  struct event_timeout reload;$/;"	m	struct:pf_context	typeref:struct:pf_context::event_timeout
remap_signal	src/openvpn/sig.c	/^remap_signal (struct context *c)$/;"	f
remap_sigusr1	src/openvpn/options.h	/^  int remap_sigusr1;$/;"	m	struct:options
remote	src/openvpn/manage.h	/^  struct openvpn_sockaddr remote;$/;"	m	struct:man_connection	typeref:struct:man_connection::openvpn_sockaddr
remote	src/openvpn/options.h	/^  const char *remote;$/;"	m	struct:connection_entry
remote	src/openvpn/options.h	/^  const char *remote;$/;"	m	struct:remote_entry
remote	src/openvpn/socket.h	/^  struct openvpn_sockaddr remote;   \/* initial remote *\/$/;"	m	struct:link_socket_addr	typeref:struct:link_socket_addr::openvpn_sockaddr
remote_addr	src/openvpn/ssl_common.h	/^  struct link_socket_actual remote_addr; \/* peer's IP addr *\/$/;"	m	struct:key_state	typeref:struct:key_state::link_socket_actual
remote_cert_eku	src/openvpn/options.h	/^  const char *remote_cert_eku;$/;"	m	struct:options
remote_cert_eku	src/openvpn/ssl_common.h	/^  const char *remote_cert_eku;$/;"	m	struct:tls_options
remote_cert_ku	src/openvpn/options.h	/^  unsigned remote_cert_ku[MAX_PARMS];$/;"	m	struct:options
remote_cert_ku	src/openvpn/ssl_common.h	/^  unsigned remote_cert_ku[MAX_PARMS];$/;"	m	struct:tls_options
remote_cmd	src/openvpn/manage.h	/^  bool (*remote_cmd) (void *arg, const char **p);$/;"	m	struct:management_callback
remote_endpoint	src/openvpn/route.h	/^  in_addr_t remote_endpoint;$/;"	m	struct:route_special_addr
remote_endpoint_defined	src/openvpn/route.h	/^  bool remote_endpoint_defined;$/;"	m	struct:route_ipv6_list
remote_endpoint_ipv6	src/openvpn/route.h	/^  struct in6_addr remote_endpoint_ipv6;$/;"	m	struct:route_ipv6_list	typeref:struct:route_ipv6_list::in6_addr
remote_entry	src/openvpn/options.h	/^struct remote_entry$/;"	s
remote_float	src/openvpn/options.h	/^  bool remote_float;$/;"	m	struct:connection_entry
remote_float	src/openvpn/socket.h	/^  bool remote_float;  $/;"	m	struct:link_socket_info
remote_host	src/openvpn/route.h	/^  in_addr_t remote_host;$/;"	m	struct:route_special_addr
remote_host	src/openvpn/socket.h	/^  const char *remote_host;$/;"	m	struct:link_socket
remote_host_local	src/openvpn/route.h	/^  int remote_host_local;  \/* TLA_x value *\/$/;"	m	struct:route_special_addr
remote_host_store	src/openvpn/options.h	/^struct remote_host_store$/;"	s
remote_ip	src/openvpn/manage.h	/^  in_addr_t remote_ip;$/;"	m	struct:log_entry
remote_ip_hint	src/openvpn/options.h	/^  char *remote_ip_hint;$/;"	m	struct:options
remote_ipv6	src/openvpn/tun.h	/^  struct in6_addr remote_ipv6;$/;"	m	struct:tuntap	typeref:struct:tuntap::in6_addr
remote_list	src/openvpn/options.h	/^  struct remote_list *remote_list;$/;"	m	struct:options	typeref:struct:options::remote_list
remote_list	src/openvpn/options.h	/^struct remote_list$/;"	s
remote_netmask	src/openvpn/tun.h	/^  in_addr_t remote_netmask;$/;"	m	struct:tuntap
remote_options	src/openvpn/ssl_common.h	/^  const char *remote_options;$/;"	m	struct:tls_options
remote_port	src/openvpn/options.h	/^  int remote_port;$/;"	m	struct:connection_entry
remote_port	src/openvpn/options.h	/^  int remote_port;$/;"	m	struct:remote_entry
remote_port	src/openvpn/socket.h	/^  int remote_port;$/;"	m	struct:link_socket
remote_random	src/openvpn/options.h	/^  bool remote_random;$/;"	m	struct:options
remove_env_item	src/openvpn/misc.c	/^remove_env_item (const char *str, const bool do_free, struct env_item **list)$/;"	f	file:
remove_iroutes_from_push_route_list	src/openvpn/push.c	/^remove_iroutes_from_push_route_list (struct options *o)$/;"	f
renegotiate_bytes	src/openvpn/options.h	/^  int renegotiate_bytes;$/;"	m	struct:options
renegotiate_bytes	src/openvpn/ssl_common.h	/^  int renegotiate_bytes;$/;"	m	struct:tls_options
renegotiate_packets	src/openvpn/options.h	/^  int renegotiate_packets;$/;"	m	struct:options
renegotiate_packets	src/openvpn/ssl_common.h	/^  int renegotiate_packets;$/;"	m	struct:tls_options
renegotiate_seconds	src/openvpn/options.h	/^  int renegotiate_seconds;$/;"	m	struct:options
renegotiate_seconds	src/openvpn/ssl_common.h	/^  interval_t renegotiate_seconds;$/;"	m	struct:tls_options
replay	src/openvpn/options.h	/^  bool replay;$/;"	m	struct:options
replay	src/openvpn/ssl_common.h	/^  bool replay;$/;"	m	struct:tls_options
replay_time	src/openvpn/options.h	/^  int replay_time;$/;"	m	struct:options
replay_time	src/openvpn/ssl_common.h	/^  int replay_time;                     \/* --replay-window parm *\/$/;"	m	struct:tls_options
replay_window	src/openvpn/options.h	/^  int replay_window;$/;"	m	struct:options
replay_window	src/openvpn/ssl_common.h	/^  int replay_window;                   \/* --replay-window parm *\/$/;"	m	struct:tls_options
reporting_addr	src/openvpn/multi.h	/^  in_addr_t reporting_addr;       \/* IP address shown in status listing *\/$/;"	m	struct:multi_instance
requested_initialization_point	src/openvpn/plugin.h	/^  int requested_initialization_point;$/;"	m	struct:plugin
reset	src/openvpn/event.h	/^  void (*reset)(struct event_set *es);$/;"	m	struct:event_set_functions
reset	src/openvpn/otime.h	/^  time_t reset;$/;"	m	struct:frequency_limit
reset_check_status	src/openvpn/error.c	/^reset_check_status ()$/;"	f
reset_coarse_timers	src/openvpn/init.c	/^reset_coarse_timers (struct context *c)$/;"	f
reset_net_event_win32	src/openvpn/win32.c	/^reset_net_event_win32 (struct rw_handle *event, socket_descriptor_t sd)$/;"	f
reset_session	src/openvpn/ssl.c	/^reset_session (struct tls_multi *multi, struct tls_session *session)$/;"	f	file:
residual	src/openvpn/manage.h	/^  struct buffer residual;$/;"	m	struct:command_line	typeref:struct:command_line::buffer
residual	src/openvpn/socket.h	/^  struct buffer residual;$/;"	m	struct:stream_buf	typeref:struct:stream_buf::buffer
residual_fully_formed	src/openvpn/socket.h	/^  bool residual_fully_formed;$/;"	m	struct:stream_buf
resolve_bind_local	src/openvpn/socket.c	/^resolve_bind_local (struct link_socket *sock)$/;"	f	file:
resolve_remote	src/openvpn/socket.c	/^resolve_remote (struct link_socket *sock,$/;"	f	file:
resolve_retry_seconds	src/openvpn/options.h	/^  int resolve_retry_seconds;    \/* If hostname resolve fails, retry for n seconds *\/$/;"	m	struct:options
resolve_retry_seconds	src/openvpn/socket.h	/^  int resolve_retry_seconds;$/;"	m	struct:link_socket
restart_sleep_seconds	src/openvpn/openvpn.h	/^  int restart_sleep_seconds;$/;"	m	struct:context_persist
restore_signal_state	src/openvpn/sig.c	/^restore_signal_state (void)$/;"	f
result_t	src/openvpn/ssl_verify_backend.h	/^typedef enum { SUCCESS=0, FAILURE=1 } result_t;$/;"	t	typeref:enum:__anon10
ret	src/openvpn/mtcp.c	/^  unsigned int ret;$/;"	m	struct:ta_iow_flags	file:
retry	src/openvpn/proxy.h	/^  bool retry;$/;"	m	struct:http_proxy_options
retry	src/openvpn/socks.h	/^  bool retry;$/;"	m	struct:socks_proxy_info
return_list	include/openvpn-plugin.h	/^  struct openvpn_plugin_string_list **return_list;$/;"	m	struct:openvpn_plugin_args_func_return	typeref:struct:openvpn_plugin_args_func_return::openvpn_plugin_string_list
return_list	include/openvpn-plugin.h	/^  struct openvpn_plugin_string_list **return_list;$/;"	m	struct:openvpn_plugin_args_open_return	typeref:struct:openvpn_plugin_args_open_return::openvpn_plugin_string_list
rgi	src/openvpn/route.h	/^  struct route_gateway_info rgi;$/;"	m	struct:route_list	typeref:struct:route_list::route_gateway_info
rh_store	src/openvpn/options.h	/^  struct remote_host_store *rh_store;$/;"	m	struct:options	typeref:struct:options::remote_host_store
rm_trailing_chars	src/openvpn/buffer.c	/^rm_trailing_chars (char *str, const char *what_to_delete)$/;"	f
rmhash	src/openvpn/list.c	/^rmhash (struct hash *hash, const char *word)$/;"	f	file:
rol6_check_alloc	src/openvpn/options.c	/^rol6_check_alloc (struct options *options)$/;"	f
rol_check_alloc	src/openvpn/options.c	/^rol_check_alloc (struct options *options)$/;"	f
roll	src/openvpn/gremlin.c	/^static int roll(int low, int high) {$/;"	f	file:
root	src/openvpn/schedule.h	/^  struct schedule_entry *root;            \/* the root of the treap (btree) *\/$/;"	m	struct:schedule	typeref:struct:schedule::schedule_entry
route_bypass	src/openvpn/route.h	/^struct route_bypass$/;"	s
route_count	src/openvpn/multi.h	/^  int route_count;             \/* number of routes (including cached routes) owned by this instance *\/$/;"	m	struct:multi_instance
route_default_gateway	src/openvpn/options.h	/^  const char *route_default_gateway;$/;"	m	struct:options
route_default_metric	src/openvpn/options.h	/^  int route_default_metric;$/;"	m	struct:options
route_delay	src/openvpn/options.h	/^  int route_delay;$/;"	m	struct:options
route_delay_defined	src/openvpn/options.h	/^  bool route_delay_defined;$/;"	m	struct:options
route_delay_window	src/openvpn/options.h	/^  int route_delay_window;$/;"	m	struct:options
route_did_redirect_default_gateway	src/openvpn/route.h	/^route_did_redirect_default_gateway(const struct route_list *rl)$/;"	f
route_gateway_address	src/openvpn/route.h	/^struct route_gateway_address {$/;"	s
route_gateway_info	src/openvpn/route.h	/^struct route_gateway_info {$/;"	s
route_gateway_via_dhcp	src/openvpn/options.h	/^  bool route_gateway_via_dhcp;$/;"	m	struct:options
route_helper	src/openvpn/multi.h	/^  struct mroute_helper *route_helper;$/;"	m	struct:multi_context	typeref:struct:multi_context::mroute_helper
route_ipv4	src/openvpn/route.h	/^struct route_ipv4 {$/;"	s
route_ipv6	src/openvpn/route.h	/^struct route_ipv6 {$/;"	s
route_ipv6_list	src/openvpn/openvpn.h	/^  struct route_ipv6_list *route_ipv6_list;$/;"	m	struct:context_1	typeref:struct:context_1::route_ipv6_list
route_ipv6_list	src/openvpn/route.h	/^struct route_ipv6_list {$/;"	s
route_ipv6_option	src/openvpn/route.h	/^struct route_ipv6_option {$/;"	s
route_ipv6_option_list	src/openvpn/route.h	/^struct route_ipv6_option_list {$/;"	s
route_list	src/openvpn/openvpn.h	/^  struct route_list *route_list;$/;"	m	struct:context_1	typeref:struct:context_1::route_list
route_list	src/openvpn/route.h	/^struct route_list {$/;"	s
route_list_add_vpn_gateway	src/openvpn/route.c	/^route_list_add_vpn_gateway (struct route_list *rl,$/;"	f
route_list_vpn_gateway_needed	src/openvpn/route.h	/^route_list_vpn_gateway_needed (const struct route_list *rl)$/;"	f
route_method	src/openvpn/options.h	/^  int route_method;$/;"	m	struct:options
route_noexec	src/openvpn/options.h	/^  bool route_noexec;$/;"	m	struct:options
route_nopull	src/openvpn/options.h	/^  bool route_nopull;$/;"	m	struct:options
route_option	src/openvpn/route.h	/^struct route_option {$/;"	s
route_option_list	src/openvpn/route.h	/^struct route_option_list {$/;"	s
route_predown_script	src/openvpn/options.h	/^  const char *route_predown_script;$/;"	m	struct:options
route_quota_dec	src/openvpn/multi.h	/^route_quota_dec (struct multi_instance *mi)$/;"	f
route_quota_exceeded	src/openvpn/multi.c	/^route_quota_exceeded (const struct multi_context *m, const struct multi_instance *mi)$/;"	f
route_quota_inc	src/openvpn/multi.h	/^route_quota_inc (struct multi_instance *mi)$/;"	f
route_quota_test	src/openvpn/multi.h	/^route_quota_test (const struct multi_context *m, const struct multi_instance *mi)$/;"	f
route_script	src/openvpn/options.h	/^  const char *route_script;$/;"	m	struct:options
route_special_addr	src/openvpn/route.h	/^struct route_special_addr$/;"	s
route_string	src/openvpn/route.c	/^route_string (const struct route_ipv4 *r, struct gc_arena *gc)$/;"	f	file:
route_wakeup	src/openvpn/openvpn.h	/^  struct event_timeout route_wakeup;$/;"	m	struct:context_2	typeref:struct:context_2::event_timeout
route_wakeup_expire	src/openvpn/openvpn.h	/^  struct event_timeout route_wakeup_expire;$/;"	m	struct:context_2	typeref:struct:context_2::event_timeout
routes	src/openvpn/options.h	/^  struct route_option_list *routes;$/;"	m	struct:options	typeref:struct:options::route_option_list
routes	src/openvpn/options.h	/^  struct route_option_list *routes;$/;"	m	struct:options_pre_pull	typeref:struct:options_pre_pull::route_option_list
routes	src/openvpn/route.h	/^  struct route_ipv4 routes[EMPTY_ARRAY_SIZE];$/;"	m	struct:route_list	typeref:struct:route_list::route_ipv4
routes	src/openvpn/route.h	/^  struct route_option routes[EMPTY_ARRAY_SIZE];$/;"	m	struct:route_option_list	typeref:struct:route_option_list::route_option
routes_added	src/openvpn/route.h	/^  bool routes_added;$/;"	m	struct:route_ipv6_list
routes_defined	src/openvpn/options.h	/^  bool routes_defined;$/;"	m	struct:options_pre_pull
routes_ipv6	src/openvpn/options.h	/^  struct route_ipv6_option_list *routes_ipv6;			\/* IPv6 *\/$/;"	m	struct:options	typeref:struct:options::route_ipv6_option_list
routes_ipv6	src/openvpn/options.h	/^  struct route_ipv6_option_list *routes_ipv6;$/;"	m	struct:options_pre_pull	typeref:struct:options_pre_pull::route_ipv6_option_list
routes_ipv6	src/openvpn/route.h	/^  struct route_ipv6 routes_ipv6[EMPTY_ARRAY_SIZE];$/;"	m	struct:route_ipv6_list	typeref:struct:route_ipv6_list::route_ipv6
routes_ipv6	src/openvpn/route.h	/^  struct route_ipv6_option routes_ipv6[EMPTY_ARRAY_SIZE];$/;"	m	struct:route_ipv6_option_list	typeref:struct:route_ipv6_option_list::route_ipv6_option
routes_ipv6_defined	src/openvpn/options.h	/^  bool routes_ipv6_defined;$/;"	m	struct:options_pre_pull
rsa_finish	src/openvpn/ssl_openssl.c	/^rsa_finish(RSA *rsa)$/;"	f	file:
rsa_priv_dec	src/openvpn/cryptoapi.c	/^static int rsa_priv_dec(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)$/;"	f	file:
rsa_priv_dec	src/openvpn/ssl_openssl.c	/^rsa_priv_dec(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)$/;"	f	file:
rsa_priv_enc	src/openvpn/cryptoapi.c	/^static int rsa_priv_enc(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)$/;"	f	file:
rsa_priv_enc	src/openvpn/ssl_openssl.c	/^rsa_priv_enc(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)$/;"	f	file:
rsa_pub_dec	src/openvpn/cryptoapi.c	/^static int rsa_pub_dec(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)$/;"	f	file:
rsa_pub_dec	src/openvpn/ssl_openssl.c	/^rsa_pub_dec(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)$/;"	f	file:
rsa_pub_enc	src/openvpn/cryptoapi.c	/^static int rsa_pub_enc(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)$/;"	f	file:
rsa_pub_enc	src/openvpn/ssl_openssl.c	/^rsa_pub_enc(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)$/;"	f	file:
rsa_sig	src/openvpn/manage.h	/^  struct buffer_list *rsa_sig;$/;"	m	struct:man_connection	typeref:struct:man_connection::buffer_list
rtm	src/openvpn/route.c	2639;"	d	file:
rtm	src/openvpn/route.c	2752;"	d	file:
rtm	src/openvpn/route.c	2960;"	d	file:
rtmsg	src/openvpn/route.c	/^struct rtmsg {$/;"	s	file:
rule	src/openvpn/pf.h	/^  struct ipv4_subnet rule;$/;"	m	struct:pf_subnet	typeref:struct:pf_subnet::ipv4_subnet
rule	src/openvpn/pf.h	/^  struct pf_cn rule;$/;"	m	struct:pf_cn_elem	typeref:struct:pf_cn_elem::pf_cn
run_ping_tests	tests/t_client.sh	/^run_ping_tests()$/;"	f
run_up_down	src/openvpn/misc.c	/^run_up_down (const char *command,$/;"	f
rw_handle	src/openvpn/socket.h	/^  struct rw_handle rw_handle;$/;"	m	struct:link_socket	typeref:struct:link_socket::rw_handle
rw_handle	src/openvpn/tun.h	/^  struct rw_handle rw_handle;$/;"	m	struct:tuntap	typeref:struct:tuntap::rw_handle
rw_handle	src/openvpn/win32.h	/^struct rw_handle {$/;"	s
rwflags	src/openvpn/event.h	/^  unsigned int rwflags;$/;"	m	struct:event_set_return
rwflags	src/openvpn/ps.c	/^  int rwflags;$/;"	m	struct:proxy_connection	file:
rwflags_debug	src/openvpn/socket.h	/^  unsigned int rwflags_debug;$/;"	m	struct:link_socket
rwflags_debug	src/openvpn/tun.h	/^  unsigned int rwflags_debug;$/;"	m	struct:tuntap
s_pkcs11h_sys_engine	src/openvpn/pkcs11.c	/^static pkcs11h_engine_system_t s_pkcs11h_sys_engine = {$/;"	v	file:
sa	src/openvpn/socket.h	/^    struct sockaddr sa;$/;"	m	union:openvpn_sockaddr::__anon12	typeref:struct:openvpn_sockaddr::__anon12::sockaddr
sa	src/openvpn/win32.h	/^  SECURITY_ATTRIBUTES sa;$/;"	m	struct:security_attributes
sa	src/openvpnserv/openvpnserv.c	/^  SECURITY_ATTRIBUTES sa;$/;"	m	struct:security_attributes	file:
saddr	src/openvpn/proto.h	/^        struct  in6_addr        saddr;$/;"	m	struct:openvpn_ipv6hdr	typeref:struct:openvpn_ipv6hdr::in6_addr
saddr	src/openvpn/proto.h	/^  uint32_t   saddr;$/;"	m	struct:openvpn_iphdr
safe_print	src/openvpn/misc.c	/^safe_print (const char *str, struct gc_arena *gc)$/;"	f
sanitize_control_message	src/openvpn/misc.c	/^sanitize_control_message(const char *src, struct gc_arena *gc)$/;"	f
save_inetd_socket_descriptor	src/openvpn/misc.c	/^save_inetd_socket_descriptor (void)$/;"	f
save_ks	src/openvpn/ssl_common.h	/^  struct key_state *save_ks;	\/* temporary pointer used between pre\/post routines *\/$/;"	m	struct:tls_multi	typeref:struct:tls_multi::key_state
save_pulled_options_digest	src/openvpn/init.c	/^save_pulled_options_digest (struct context *c, const struct md5_digest *newdigest)$/;"	f	file:
saved	src/openvpn/win32.h	/^  bool saved;$/;"	m	struct:window_title
sc_info	src/openvpn/options.h	/^  struct static_challenge_info sc_info;$/;"	m	struct:options	typeref:struct:options::static_challenge_info
schedule	src/openvpn/multi.h	/^  struct schedule *schedule;$/;"	m	struct:multi_context	typeref:struct:multi_context::schedule
schedule	src/openvpn/schedule.h	/^struct schedule$/;"	s
schedule_add_entry	src/openvpn/schedule.h	/^schedule_add_entry (struct schedule *s,$/;"	f
schedule_add_modify	src/openvpn/schedule.c	/^schedule_add_modify (struct schedule *s, struct schedule_entry *e)$/;"	f
schedule_debug	src/openvpn/schedule.c	/^schedule_debug (struct schedule *s, int *count, struct timeval *least)$/;"	f
schedule_debug_entry	src/openvpn/schedule.c	/^schedule_debug_entry (const struct schedule_entry* e,$/;"	f
schedule_detach_parent	src/openvpn/schedule.c	/^schedule_detach_parent (struct schedule *s, struct schedule_entry *e)$/;"	f	file:
schedule_entry	src/openvpn/schedule.h	/^struct schedule_entry$/;"	s
schedule_entry_compare	src/openvpn/schedule.c	/^schedule_entry_compare (const struct schedule_entry *e1,$/;"	f	file:
schedule_entry_debug_info	src/openvpn/schedule.c	/^schedule_entry_debug_info (const char *caller, const struct schedule_entry *e)$/;"	f	file:
schedule_exit	src/openvpn/forward.c	/^schedule_exit (struct context *c, const int n_seconds, const int signal)$/;"	f
schedule_find_earliest_wakeup	src/openvpn/schedule.c	/^schedule_find_earliest_wakeup (struct schedule *s)$/;"	f	file:
schedule_find_least	src/openvpn/schedule.c	/^schedule_find_least (struct schedule_entry *e)$/;"	f
schedule_free	src/openvpn/schedule.c	/^schedule_free (struct schedule *s)$/;"	f
schedule_get_earliest_wakeup	src/openvpn/schedule.h	/^schedule_get_earliest_wakeup (struct schedule *s,$/;"	f
schedule_init	src/openvpn/schedule.c	/^schedule_init (void)$/;"	f
schedule_insert	src/openvpn/schedule.c	/^schedule_insert (struct schedule *s, struct schedule_entry *e)$/;"	f	file:
schedule_print	src/openvpn/schedule.c	/^schedule_print (struct schedule *s)$/;"	f
schedule_print_work	src/openvpn/schedule.c	/^schedule_print_work (struct schedule_entry *e, int indent)$/;"	f
schedule_randomize_array	src/openvpn/schedule.c	/^schedule_randomize_array (struct schedule_entry **array, int size)$/;"	f
schedule_remove_entry	src/openvpn/schedule.c	/^schedule_remove_entry (struct schedule *s, struct schedule_entry *e)$/;"	f
schedule_remove_node	src/openvpn/schedule.c	/^schedule_remove_node (struct schedule *s, struct schedule_entry *e)$/;"	f
schedule_rotate_up	src/openvpn/schedule.c	/^schedule_rotate_up (struct schedule *s, struct schedule_entry *e)$/;"	f	file:
schedule_set_pri	src/openvpn/schedule.c	/^schedule_set_pri (struct schedule_entry *e)$/;"	f	file:
schedule_test	src/openvpn/schedule.c	/^schedule_test (void)$/;"	f
schedule_verify	src/openvpn/schedule.c	/^schedule_verify (struct schedule *s)$/;"	f
scheduled_exit	src/openvpn/openvpn.h	/^  struct event_timeout scheduled_exit;$/;"	m	struct:context_2	typeref:struct:context_2::event_timeout
scheduled_exit_interval	src/openvpn/options.h	/^  int scheduled_exit_interval;$/;"	m	struct:options
scheduled_exit_signal	src/openvpn/openvpn.h	/^  int scheduled_exit_signal;$/;"	m	struct:context_2
sci	src/openvpn/ssl_common.h	/^  const struct static_challenge_info *sci;$/;"	m	struct:tls_options	typeref:struct:tls_options::static_challenge_info
script_security	src/openvpn/misc.c	/^int script_security = SSEC_BUILT_IN; \/* GLOBAL *\/$/;"	v
sd	src/openvpn/ps.c	/^  int sd;$/;"	m	struct:proxy_connection	file:
sd	src/openvpn/socket.h	/^  socket_descriptor_t sd;$/;"	m	struct:link_socket
sd	src/openvpn/win32.h	/^  SECURITY_DESCRIPTOR sd;$/;"	m	struct:security_attributes
sd	src/openvpn/win32.h	/^  socket_descriptor_t sd;$/;"	m	struct:net_event_win32
sd	src/openvpnserv/openvpnserv.c	/^  SECURITY_DESCRIPTOR sd;$/;"	m	struct:security_attributes	file:
sd_cli	src/openvpn/manage.h	/^  socket_descriptor_t sd_cli;$/;"	m	struct:man_connection
sd_close	src/openvpn/socket.c	/^sd_close (socket_descriptor_t *sd)$/;"	f
sd_top	src/openvpn/manage.h	/^  socket_descriptor_t sd_top;$/;"	m	struct:man_connection
se	src/openvpn/multi.h	/^  struct schedule_entry se;    \/* this must be the first element of the structure *\/$/;"	m	struct:multi_instance	typeref:struct:multi_instance::schedule_entry
se_ctl	src/openvpn/event.c	/^se_ctl (struct event_set *es, event_t event, unsigned int rwflags, void *arg)$/;"	f	file:
se_del	src/openvpn/event.c	/^se_del (struct event_set *es, event_t event)$/;"	f	file:
se_free	src/openvpn/event.c	/^se_free (struct event_set *es)$/;"	f	file:
se_init	src/openvpn/event.c	/^se_init (int *maxevents, unsigned int flags)$/;"	f	file:
se_reset	src/openvpn/event.c	/^se_reset (struct event_set *es)$/;"	f	file:
se_set	src/openvpn/event.c	/^struct se_set$/;"	s	file:
se_wait_fast	src/openvpn/event.c	/^se_wait_fast (struct event_set *es, const struct timeval *tv, struct event_set_return *out, int outlen)$/;"	f	file:
se_wait_return	src/openvpn/event.c	/^se_wait_return (struct se_set *ses,$/;"	f	file:
se_wait_scalable	src/openvpn/event.c	/^se_wait_scalable (struct event_set *es, const struct timeval *tv, struct event_set_return *out, int outlen)$/;"	f	file:
searchandreplace	src/plugins/auth-pam/auth-pam.c	/^searchandreplace(const char *tosearch, const char *searchfor, const char *replacewith)$/;"	f	file:
secs	src/openvpn/dhcp.h	/^  uint16_t secs;       \/* seconds since request process began, set by client *\/$/;"	m	struct:dhcp
security_attributes	src/openvpn/win32.h	/^struct security_attributes$/;"	s
security_attributes	src/openvpnserv/openvpnserv.c	/^struct security_attributes$/;"	s	file:
selinux_context	src/openvpn/options.h	/^  char *selinux_context;$/;"	m	struct:options
semaphore	src/openvpn/win32.h	/^struct semaphore$/;"	s
semaphore_clear	src/openvpn/win32.c	/^semaphore_clear (struct semaphore *s)$/;"	f
semaphore_close	src/openvpn/win32.c	/^semaphore_close (struct semaphore *s)$/;"	f
semaphore_lock	src/openvpn/win32.c	/^semaphore_lock (struct semaphore *s, int timeout_milliseconds)$/;"	f
semaphore_open	src/openvpn/win32.c	/^semaphore_open (struct semaphore *s, const char *name)$/;"	f
semaphore_release	src/openvpn/win32.c	/^semaphore_release (struct semaphore *s)$/;"	f
send	src/openvpn/packet_id.h	/^  struct packet_id_send send;$/;"	m	struct:packet_id	typeref:struct:packet_id::packet_id_send
send_auth_failed	src/openvpn/push.c	/^send_auth_failed (struct context *c, const char *client_reason)$/;"	f
send_control	src/openvpn/ps.c	/^send_control (const socket_descriptor_t fd, int code)$/;"	f	file:
send_control	src/plugins/auth-pam/auth-pam.c	/^send_control (int fd, int code)$/;"	f	file:
send_control	src/plugins/down-root/down-root.c	/^send_control (int fd, int code)$/;"	f	file:
send_control_channel_string	src/openvpn/forward.c	/^send_control_channel_string (struct context *c, const char *str, int msglevel)$/;"	f
send_crlf	src/openvpn/proxy.c	/^send_crlf (socket_descriptor_t sd)$/;"	f	file:
send_line	src/openvpn/proxy.c	/^send_line (socket_descriptor_t sd,$/;"	f	file:
send_line_crlf	src/openvpn/proxy.c	/^send_line_crlf (socket_descriptor_t sd,$/;"	f	file:
send_push_reply	src/openvpn/push.c	/^send_push_reply (struct context *c)$/;"	f
send_push_request	src/openvpn/push.c	/^send_push_request (struct context *c)$/;"	f
send_reliable	src/openvpn/ssl_common.h	/^  struct reliable *send_reliable; \/* holds a copy of outgoing packets until ACK received *\/$/;"	m	struct:key_state	typeref:struct:key_state::reliable
send_restart	src/openvpn/push.c	/^send_restart (struct context *c, const char *kill_msg)$/;"	f
send_string	src/plugins/auth-pam/auth-pam.c	/^send_string (int fd, const char *string)$/;"	f	file:
sent_push_reply_expiry	src/openvpn/openvpn.h	/^  time_t sent_push_reply_expiry;$/;"	m	struct:context_2
seq	src/openvpn/proto.h	/^  uint32_t      seq;       \/* sequence number *\/$/;"	m	struct:openvpn_tcphdr
seq_backtrack	src/openvpn/packet_id.h	/^  int seq_backtrack;          \/* set from --replay-window *\/$/;"	m	struct:packet_id_rec
seq_id	src/openvpn/fragment.h	/^  int seq_id;                   \/**< Highest fragmentation sequence ID of$/;"	m	struct:fragment_list
seq_list	src/openvpn/packet_id.h	/^  struct seq_list *seq_list;  \/* packet-id "memory" *\/$/;"	m	struct:packet_id_rec	typeref:struct:packet_id_rec::seq_list
server	src/openvpn/proxy.h	/^  const char *server;$/;"	m	struct:http_proxy_options
server	src/openvpn/proxy.h	/^  const char *server;$/;"	m	struct:http_proxy_options_simple
server	src/openvpn/socks.h	/^  char server[128];$/;"	m	struct:socks_proxy_info
server	src/openvpn/ssl_common.h	/^  bool server;$/;"	m	struct:tls_options
server	src/openvpn/ssl_common.h	/^  struct key_source server;     \/**< Random provided by server. *\/$/;"	m	struct:key_source2	typeref:struct:key_source2::key_source
server_bridge_defined	src/openvpn/options.h	/^  bool server_bridge_defined;$/;"	m	struct:options
server_bridge_ip	src/openvpn/options.h	/^  in_addr_t server_bridge_ip;$/;"	m	struct:options
server_bridge_netmask	src/openvpn/options.h	/^  in_addr_t server_bridge_netmask;$/;"	m	struct:options
server_bridge_pool_end	src/openvpn/options.h	/^  in_addr_t server_bridge_pool_end;$/;"	m	struct:options
server_bridge_pool_start	src/openvpn/options.h	/^  in_addr_t server_bridge_pool_start;$/;"	m	struct:options
server_bridge_proxy_dhcp	src/openvpn/options.h	/^  bool server_bridge_proxy_dhcp;$/;"	m	struct:options
server_defined	src/openvpn/options.h	/^  bool server_defined;$/;"	m	struct:options
server_flags	src/openvpn/options.h	/^  unsigned int server_flags;$/;"	m	struct:options
server_ipv6_defined	src/openvpn/options.h	/^  bool server_ipv6_defined;				\/* IPv6 *\/$/;"	m	struct:options
server_netbits_ipv6	src/openvpn/options.h	/^  unsigned int    server_netbits_ipv6;			\/* IPv6 *\/$/;"	m	struct:options
server_netmask	src/openvpn/options.h	/^  in_addr_t server_netmask;$/;"	m	struct:options
server_network	src/openvpn/options.h	/^  in_addr_t server_network;$/;"	m	struct:options
server_network_ipv6	src/openvpn/options.h	/^  struct in6_addr server_network_ipv6;			\/* IPv6 *\/$/;"	m	struct:options	typeref:struct:options::in6_addr
server_poll_interval	src/openvpn/openvpn.h	/^  struct event_timeout server_poll_interval;$/;"	m	struct:context_2	typeref:struct:context_2::event_timeout
server_poll_timeout	src/openvpn/options.h	/^  int server_poll_timeout;$/;"	m	struct:options
server_pushed_signal	src/openvpn/push.c	/^server_pushed_signal (struct context *c, const struct buffer *buffer, const bool restart, const int adv)$/;"	f
service_ctrl	src/openvpnserv/service.c	/^VOID WINAPI service_ctrl(DWORD dwCtrlCode)$/;"	f
service_main	src/openvpnserv/service.c	/^void WINAPI service_main(DWORD dwArgc, LPTSTR *lpszArgv)$/;"	f
session	src/openvpn/ssl_common.h	/^  struct tls_session session[TM_SIZE];$/;"	m	struct:tls_multi	typeref:struct:tls_multi::tls_session
session_id	src/openvpn/session_id.h	/^struct session_id$/;"	s
session_id	src/openvpn/ssl_common.h	/^  struct session_id session_id;	\/* our random session ID *\/$/;"	m	struct:tls_session	typeref:struct:tls_session::session_id
session_id_defined	src/openvpn/session_id.h	/^session_id_defined (const struct session_id *sid1)$/;"	f
session_id_equal	src/openvpn/session_id.h	/^session_id_equal (const struct session_id *sid1,$/;"	f
session_id_print	src/openvpn/session_id.c	/^session_id_print (const struct session_id *sid, struct gc_arena *gc)$/;"	f
session_id_random	src/openvpn/session_id.c	/^session_id_random (struct session_id *sid)$/;"	f
session_id_read	src/openvpn/session_id.h	/^session_id_read (struct session_id *sid, struct buffer *buf)$/;"	f
session_id_remote	src/openvpn/ssl_common.h	/^  struct session_id session_id_remote;   \/* peer's random session ID *\/$/;"	m	struct:key_state	typeref:struct:key_state::session_id
session_id_write	src/openvpn/session_id.h	/^session_id_write (const struct session_id *sid, struct buffer *buf)$/;"	f
session_id_write_prepend	src/openvpn/session_id.h	/^session_id_write_prepend (const struct session_id *sid, struct buffer *buf)$/;"	f
session_index_name	src/openvpn/ssl.c	/^session_index_name (int index)$/;"	f	file:
set_auth_token	src/openvpn/misc.c	/^set_auth_token (struct user_pass *up, const char *token)$/;"	f
set_base_from	depcomp	/^set_base_from ()$/;"	f
set_cc_config	src/openvpn/multi.c	/^set_cc_config (struct multi_instance *mi, struct buffer_list *cc_config)$/;"	f	file:
set_check_status	src/openvpn/error.c	/^set_check_status (unsigned int info_level, unsigned int verbose_level)$/;"	f
set_check_status_error_delay	src/openvpn/error.h	/^set_check_status_error_delay (unsigned int milliseconds)$/;"	f
set_cloexec	src/openvpn/fdmisc.c	/^set_cloexec (int fd)$/;"	f
set_cloexec_action	src/openvpn/fdmisc.c	/^set_cloexec_action (int fd)$/;"	f
set_common_name	src/openvpn/ssl_verify.c	/^set_common_name (struct tls_session *session, const char *common_name)$/;"	f	file:
set_debug_level	src/openvpn/error.c	/^set_debug_level (const int level, const unsigned int flags)$/;"	f
set_dir_from	depcomp	/^set_dir_from ()$/;"	f
set_lladdr	src/openvpn/lladdr.c	/^int set_lladdr(const char *ifname, const char *lladdr,$/;"	f
set_mtu_discover_type	src/openvpn/mtu.c	/^set_mtu_discover_type (int sd, int mtu_type)$/;"	f
set_mute_cutoff	src/openvpn/error.c	/^set_mute_cutoff (const int cutoff)$/;"	f
set_nonblock	src/openvpn/fdmisc.c	/^set_nonblock (int fd)$/;"	f
set_nonblock_action	src/openvpn/fdmisc.c	/^set_nonblock_action (int fd)$/;"	f
set_pause_exit_win32	src/openvpn/win32.c	/^set_pause_exit_win32 (void)$/;"	f
set_prefix	src/openvpn/multi.h	/^set_prefix (struct multi_instance *mi)$/;"	f
set_signals	src/openvpn/ps.c	/^set_signals (void)$/;"	f	file:
set_signals	src/plugins/auth-pam/auth-pam.c	/^set_signals (void)$/;"	f	file:
set_signals	src/plugins/down-root/down-root.c	/^set_signals (void)$/;"	f	file:
set_sock_extended_error_passing	src/openvpn/mtu.c	/^set_sock_extended_error_passing (int sd)$/;"	f
set_std_files_to_null	src/openvpn/misc.c	/^set_std_files_to_null (bool stdin_only)$/;"	f
set_suppress_timestamps	src/openvpn/error.c	/^set_suppress_timestamps (bool suppressed)$/;"	f
set_user_script	src/openvpn/options.c	/^set_user_script (struct options *options,$/;"	f	file:
set_win_sys_path	src/openvpn/win32.c	/^set_win_sys_path (const char *newpath, struct env_set *es)$/;"	f
set_win_sys_path_via_env	src/openvpn/win32.c	/^set_win_sys_path_via_env (struct env_set *es)$/;"	f
setenv_connection_entry	src/openvpn/options.c	/^setenv_connection_entry (struct env_set *es,$/;"	f
setenv_counter	src/openvpn/misc.c	/^setenv_counter (struct env_set *es, const char *name, counter_type value)$/;"	f
setenv_del	src/openvpn/misc.c	/^setenv_del (struct env_set *es, const char *name)$/;"	f
setenv_format_indexed_name	src/openvpn/misc.c	/^setenv_format_indexed_name (const char *name, const int i, struct gc_arena *gc)$/;"	f	file:
setenv_in_addr_t	src/openvpn/socket.c	/^setenv_in_addr_t (struct env_set *es, const char *name_prefix, in_addr_t addr, const unsigned int flags)$/;"	f
setenv_int	src/openvpn/misc.c	/^setenv_int (struct env_set *es, const char *name, int value)$/;"	f
setenv_int_i	src/openvpn/misc.c	/^setenv_int_i (struct env_set *es, const char *name, const int value, const int i)$/;"	f
setenv_link_socket_actual	src/openvpn/socket.c	/^setenv_link_socket_actual (struct env_set *es,$/;"	f
setenv_route	src/openvpn/route.c	/^setenv_route (struct env_set *es, const struct route_ipv4 *r, int i)$/;"	f	file:
setenv_route_addr	src/openvpn/route.c	/^setenv_route_addr (struct env_set *es, const char *key, const in_addr_t addr, int i)$/;"	f	file:
setenv_route_ipv6	src/openvpn/route.c	/^setenv_route_ipv6 (struct env_set *es, const struct route_ipv6 *r6, int i)$/;"	f	file:
setenv_routes	src/openvpn/route.c	/^setenv_routes (struct env_set *es, const struct route_list *rl)$/;"	f
setenv_routes_ipv6	src/openvpn/route.c	/^setenv_routes_ipv6 (struct env_set *es, const struct route_ipv6_list *rl6)$/;"	f
setenv_settings	src/openvpn/options.c	/^setenv_settings (struct env_set *es, const struct options *o)$/;"	f
setenv_sockaddr	src/openvpn/socket.c	/^setenv_sockaddr (struct env_set *es, const char *name_prefix, const struct openvpn_sockaddr *addr, const unsigned int flags)$/;"	f
setenv_stats	src/openvpn/multi.c	/^setenv_stats (struct context *c)$/;"	f	file:
setenv_str	src/openvpn/misc.c	/^setenv_str (struct env_set *es, const char *name, const char *value)$/;"	f
setenv_str_ex	src/openvpn/misc.c	/^setenv_str_ex (struct env_set *es,$/;"	f
setenv_str_i	src/openvpn/misc.c	/^setenv_str_i (struct env_set *es, const char *name, const char *value, const int i)$/;"	f
setenv_str_safe	src/openvpn/misc.c	/^setenv_str_safe (struct env_set *es, const char *name, const char *value)$/;"	f
setenv_trusted	src/openvpn/socket.c	/^setenv_trusted (struct env_set *es, const struct link_socket_info *info)$/;"	f
setenv_unsigned	src/openvpn/misc.c	/^setenv_unsigned (struct env_set *es, const char *name, unsigned int value)$/;"	f
setenv_untrusted	src/openvpn/ssl_verify.c	/^setenv_untrusted (struct tls_session *session)$/;"	f	file:
settings	src/openvpn/manage.h	/^  struct man_settings settings;$/;"	m	struct:management	typeref:struct:management::man_settings
setup_engine	src/openvpn/crypto_openssl.c	/^setup_engine (const char *engine)$/;"	f	file:
sf2gaf	src/openvpn/socket.c	/^sf2gaf(const unsigned int getaddr_flags,$/;"	f	file:
sha1_hash	src/openvpn/ssl_verify.h	/^  unsigned char sha1_hash[SHA_DIGEST_LENGTH]; \/**< The SHA1 hash for a certificate *\/$/;"	m	struct:cert_hash
shaper	src/openvpn/openvpn.h	/^  struct shaper shaper;$/;"	m	struct:context_2	typeref:struct:context_2::shaper
shaper	src/openvpn/options.h	/^  int shaper;$/;"	m	struct:options
shaper	src/openvpn/shaper.h	/^struct shaper $/;"	s
shaper_current_bandwidth	src/openvpn/shaper.h	/^shaper_current_bandwidth (struct shaper *s)$/;"	f
shaper_delay	src/openvpn/shaper.h	/^shaper_delay (struct shaper* s)$/;"	f
shaper_init	src/openvpn/shaper.h	/^shaper_init (struct shaper *s, int bytes_per_second)$/;"	f
shaper_msg	src/openvpn/shaper.c	/^shaper_msg (struct shaper *s)$/;"	f
shaper_reset	src/openvpn/shaper.h	/^shaper_reset (struct shaper *s, int bytes_per_second)$/;"	f
shaper_reset_wakeup	src/openvpn/shaper.c	/^shaper_reset_wakeup (struct shaper *s)$/;"	f
shaper_soonest_event	src/openvpn/shaper.c	/^shaper_soonest_event (struct timeval *tv, int delay)$/;"	f
shaper_wrote_bytes	src/openvpn/shaper.h	/^shaper_wrote_bytes (struct shaper* s, int nbytes)$/;"	f
shared_secret_file	src/openvpn/options.h	/^  const char *shared_secret_file;$/;"	m	struct:options
shared_secret_file_inline	src/openvpn/options.h	/^  const char *shared_secret_file_inline;$/;"	m	struct:options
short_form	src/openvpn/socket.c	/^  const char *short_form;$/;"	m	struct:proto_names	file:
short_form	src/openvpn/tun.c	/^  const char *short_form;$/;"	m	struct:ipset_names	file:
show	sample/sample-plugins/log/log.c	/^show (const int type, const char *argv[], const char *envp[])$/;"	f
show	sample/sample-plugins/log/log_v3.c	/^show (const int type, const char *argv[], const char *envp[])$/;"	f
show_adapter	src/openvpn/tun.c	/^show_adapter (int msglev, const IP_ADAPTER_INFO *a, struct gc_arena *gc)$/;"	f	file:
show_adapters	src/openvpn/tun.c	/^show_adapters (int msglev)$/;"	f
show_available_ciphers	src/openvpn/crypto_openssl.c	/^show_available_ciphers ()$/;"	f
show_available_ciphers	src/openvpn/crypto_polarssl.c	/^show_available_ciphers ()$/;"	f
show_available_digests	src/openvpn/crypto_openssl.c	/^show_available_digests ()$/;"	f
show_available_digests	src/openvpn/crypto_polarssl.c	/^show_available_digests ()$/;"	f
show_available_engines	src/openvpn/crypto_openssl.c	/^show_available_engines ()$/;"	f
show_available_engines	src/openvpn/crypto_polarssl.c	/^show_available_engines ()$/;"	f
show_available_tls_ciphers	src/openvpn/ssl_openssl.c	/^show_available_tls_ciphers (const char *cipher_list)$/;"	f
show_available_tls_ciphers	src/openvpn/ssl_polarssl.c	/^show_available_tls_ciphers (const char *cipher_list)$/;"	f
show_ciphers	src/openvpn/options.h	/^  bool show_ciphers;$/;"	m	struct:options
show_connection_entries	src/openvpn/options.c	/^show_connection_entries (const struct options *o)$/;"	f	file:
show_connection_entry	src/openvpn/options.c	/^show_connection_entry (const struct connection_entry *o)$/;"	f	file:
show_dhcp_option_addrs	src/openvpn/options.c	/^show_dhcp_option_addrs (const char *name, const in_addr_t *array, int len)$/;"	f	file:
show_digests	src/openvpn/options.h	/^  bool show_digests;$/;"	m	struct:options
show_engines	src/openvpn/options.h	/^  bool show_engines;$/;"	m	struct:options
show_http_proxy_options	src/openvpn/options.c	/^show_http_proxy_options (const struct http_proxy_options *o)$/;"	f	file:
show_library_versions	src/openvpn/options.c	/^show_library_versions(const unsigned int flags)$/;"	f
show_net	src/openvpn/manage.h	/^  void (*show_net) (void *arg, const int msglevel);$/;"	m	struct:management_callback
show_net_up	src/openvpn/options.h	/^  bool show_net_up;$/;"	m	struct:options
show_opt	src/openvpn/route.c	/^show_opt (const char *option)$/;"	f	file:
show_p2mp_parms	src/openvpn/options.c	/^show_p2mp_parms (const struct options *o)$/;"	f	file:
show_pkcs11_ids	src/openvpn/pkcs11.c	/^show_pkcs11_ids ($/;"	f
show_routes	src/openvpn/route.c	/^show_routes (int msglev)$/;"	f
show_settings	src/openvpn/options.c	/^show_settings (const struct options *o)$/;"	f
show_tap_win_adapters	src/openvpn/tun.c	/^show_tap_win_adapters (int msglev, int warnlev)$/;"	f
show_tls_ciphers	src/openvpn/options.h	/^  bool show_tls_ciphers;$/;"	m	struct:options
show_tls_performance_stats	src/openvpn/ssl.c	/^show_tls_performance_stats(void)$/;"	f
show_tuntap_options	src/openvpn/options.c	/^show_tuntap_options (const struct tuntap_options *o)$/;"	f	file:
show_valid_win32_tun_subnets	src/openvpn/tun.c	/^void show_valid_win32_tun_subnets (void)$/;"	f
show_wait_status	src/openvpn/forward.c	/^show_wait_status (struct context *c)$/;"	f
siaddr	src/openvpn/dhcp.h	/^  uint32_t siaddr;     \/* server IP address *\/$/;"	m	struct:dhcp
sig	src/openvpn/openvpn.h	/^  struct signal_info *sig;      \/**< Internal error signaling object. *\/$/;"	m	struct:context	typeref:struct:context::signal_info
siginfo_static	src/openvpn/sig.c	/^struct signal_info siginfo_static; \/* GLOBAL *\/$/;"	v	typeref:struct:signal_info
signal_description	src/openvpn/sig.c	/^signal_description (const int signum, const char *sigtext)$/;"	f
signal_handler	src/openvpn/sig.c	/^signal_handler (const int signum)$/;"	f	file:
signal_info	src/openvpn/sig.h	/^struct signal_info$/;"	s
signal_mode	src/openvpn/sig.c	/^static int signal_mode; \/* GLOBAL *\/$/;"	v	file:
signal_name	src/openvpn/sig.c	/^signal_name (const int sig, const bool upper)$/;"	f
signal_received	src/openvpn/sig.h	/^  volatile int signal_received;$/;"	m	struct:signal_info
signal_reset	src/openvpn/sig.c	/^signal_reset (struct signal_info *si)$/;"	f	file:
signal_restart_status	src/openvpn/sig.c	/^signal_restart_status (const struct signal_info *si)$/;"	f
signal_text	src/openvpn/sig.h	/^  const char *signal_text;$/;"	m	struct:signal_info
signame	src/openvpn/sig.c	/^struct signame {$/;"	s	file:
signames	src/openvpn/sig.c	/^static const struct signame signames[] = {$/;"	v	typeref:struct:signame	file:
signature_length	src/openvpn/ssl_polarssl.c	/^  size_t signature_length;$/;"	m	struct:external_context	file:
single_session	src/openvpn/options.h	/^  bool single_session;$/;"	m	struct:options
single_session	src/openvpn/ssl_common.h	/^  bool single_session;$/;"	m	struct:tls_options
size	src/openvpn/buffer.h	/^  int size;                  \/* current number of entries *\/$/;"	m	struct:buffer_list
size	src/openvpn/manage.h	/^  int size;$/;"	m	struct:log_history
size	src/openvpn/pool.h	/^  int size;$/;"	m	struct:ifconfig_pool
size	src/openvpn/reliable.h	/^  int size;$/;"	m	struct:reliable
size	src/openvpn/win32.h	/^  DWORD size;$/;"	m	struct:overlapped_io
size_ipv6	src/openvpn/pool.h	/^  unsigned int size_ipv6;$/;"	m	struct:ifconfig_pool
sk_x509_name_cmp	src/openvpn/ssl_openssl.c	/^sk_x509_name_cmp(const X509_NAME * const *a, const X509_NAME * const *b)$/;"	f	file:
skip_leading_whitespace	src/openvpn/buffer.c	/^skip_leading_whitespace (const char *str)$/;"	f
sleep	src/openvpn/syshead.h	43;"	d
sname	src/openvpn/dhcp.h	/^  uint8_t  sname[64];  \/* optional server host name *\/$/;"	m	struct:dhcp
sndbuf	src/openvpn/options.h	/^  int sndbuf;$/;"	m	struct:options
sndbuf	src/openvpn/socket.h	/^  int sndbuf;$/;"	m	struct:socket_buffer_size
snprintf	config-msvc.h	94;"	d
sns	src/openvpn/pf.h	/^  struct pf_subnet_set sns;$/;"	m	struct:pf_set	typeref:struct:pf_set::pf_subnet_set
so_pathname	src/openvpn/plugin.h	/^  const char *so_pathname;$/;"	m	struct:plugin
so_pathname	src/openvpn/plugin.h	/^  const char *so_pathname;$/;"	m	struct:plugin_option
sock	src/openvpn/mtcp.c	/^  unsigned int sock;$/;"	m	struct:ta_iow_flags	file:
sock_addr_set	src/openvpn/ps.c	/^sock_addr_set (struct openvpn_sockaddr *osaddr,$/;"	f	file:
sockaddr_unix_init	src/openvpn/socket.c	/^sockaddr_unix_init (struct sockaddr_un *local, const char *path)$/;"	f
sockaddr_unix_name	src/openvpn/socket.c	/^sockaddr_unix_name (const struct sockaddr_un *local, const char *null)$/;"	f
socket_accept_unix	src/openvpn/socket.c	/^socket_accept_unix (socket_descriptor_t sd,$/;"	f
socket_adjust_frame_parameters	src/openvpn/socket.c	/^socket_adjust_frame_parameters (struct frame *frame, int proto)$/;"	f
socket_bind	src/openvpn/socket.c	/^socket_bind (socket_descriptor_t sd,$/;"	f
socket_bind_unix	src/openvpn/socket.c	/^socket_bind_unix (socket_descriptor_t sd,$/;"	f
socket_buffer_size	src/openvpn/socket.h	/^struct socket_buffer_size$/;"	s
socket_buffer_sizes	src/openvpn/socket.h	/^  struct socket_buffer_size socket_buffer_sizes;$/;"	m	struct:link_socket	typeref:struct:link_socket::socket_buffer_size
socket_connect	src/openvpn/socket.c	/^socket_connect (socket_descriptor_t *sd,$/;"	f
socket_connect_unix	src/openvpn/socket.c	/^socket_connect_unix (socket_descriptor_t sd,$/;"	f
socket_connection_reset	src/openvpn/socket.h	/^socket_connection_reset (const struct link_socket *sock, int status)$/;"	f
socket_defined	src/openvpn/syshead.h	/^socket_defined (const socket_descriptor_t sd)$/;"	f
socket_delete_unix	src/openvpn/socket.c	/^socket_delete_unix (const struct sockaddr_un *local)$/;"	f
socket_descriptor_t	src/openvpn/syshead.h	/^typedef SOCKET socket_descriptor_t;$/;"	t
socket_descriptor_t	src/openvpn/syshead.h	/^typedef int socket_descriptor_t;$/;"	t
socket_do_accept	src/openvpn/socket.c	/^socket_do_accept (socket_descriptor_t sd,$/;"	f
socket_do_listen	src/openvpn/socket.c	/^socket_do_listen (socket_descriptor_t sd,$/;"	f	file:
socket_event_handle	src/openvpn/socket.h	/^socket_event_handle (const struct link_socket *s)$/;"	f
socket_finalize	src/openvpn/socket.c	/^socket_finalize (SOCKET s,$/;"	f
socket_foreign_protocol_detected	src/openvpn/socket.h	/^socket_foreign_protocol_detected (const struct link_socket *sock)$/;"	f
socket_foreign_protocol_head	src/openvpn/socket.h	/^socket_foreign_protocol_head (const struct link_socket *sock)$/;"	f
socket_foreign_protocol_sd	src/openvpn/socket.h	/^socket_foreign_protocol_sd (const struct link_socket *sock)$/;"	f
socket_frame_init	src/openvpn/socket.c	/^socket_frame_init (const struct frame *frame, struct link_socket *sock)$/;"	f	file:
socket_get_rcvbuf	src/openvpn/socket.c	/^socket_get_rcvbuf (int sd)$/;"	f	file:
socket_get_sndbuf	src/openvpn/socket.c	/^socket_get_sndbuf (int sd)$/;"	f	file:
socket_listen_accept	src/openvpn/socket.c	/^socket_listen_accept (socket_descriptor_t sd,$/;"	f	file:
socket_listen_event_handle	src/openvpn/socket.c	/^socket_listen_event_handle (struct link_socket *s)$/;"	f
socket_read_residual	src/openvpn/socket.h	/^socket_read_residual (const struct link_socket *s)$/;"	f
socket_recv_queue	src/openvpn/socket.c	/^socket_recv_queue (struct link_socket *sock, int maxsize)$/;"	f
socket_reset_listen_persistent	src/openvpn/socket.h	/^socket_reset_listen_persistent (struct link_socket *s)$/;"	f
socket_restart_pause	src/openvpn/init.c	/^socket_restart_pause (struct context *c)$/;"	f	file:
socket_send_queue	src/openvpn/socket.c	/^socket_send_queue (struct link_socket *sock, struct buffer *buf, const struct link_socket_actual *to)$/;"	f
socket_set	src/openvpn/socket.c	/^socket_set (struct link_socket *s,$/;"	f
socket_set_buffers	src/openvpn/socket.c	/^socket_set_buffers (int fd, const struct socket_buffer_size *sbs)$/;"	f	file:
socket_set_called	src/openvpn/multi.h	/^  bool socket_set_called;$/;"	m	struct:multi_instance
socket_set_flags	src/openvpn/socket.c	/^socket_set_flags (int sd, unsigned int sockflags)$/;"	f	file:
socket_set_listen_persistent	src/openvpn/socket.h	/^socket_set_listen_persistent (struct link_socket *s,$/;"	f
socket_set_mark	src/openvpn/socket.c	/^socket_set_mark (int sd, int mark)$/;"	f	file:
socket_set_rcvbuf	src/openvpn/socket.c	/^socket_set_rcvbuf (int sd, int size)$/;"	f	file:
socket_set_sndbuf	src/openvpn/socket.c	/^socket_set_sndbuf (int sd, int size)$/;"	f	file:
socket_set_tcp_nodelay	src/openvpn/socket.c	/^socket_set_tcp_nodelay (int sd, int state)$/;"	f	file:
socket_stat	src/openvpn/socket.c	/^socket_stat (const struct link_socket *s, unsigned int rwflags, struct gc_arena *gc)$/;"	f
sockflags	src/openvpn/options.h	/^  unsigned int sockflags;$/;"	m	struct:options
sockflags	src/openvpn/socket.h	/^  unsigned int sockflags;$/;"	m	struct:link_socket
socks_adjust_frame_parameters	src/openvpn/socks.c	/^socks_adjust_frame_parameters (struct frame *frame, int proto)$/;"	f
socks_handshake	src/openvpn/socks.c	/^socks_handshake (struct socks_proxy_info *p,$/;"	f	file:
socks_postprocess_incoming_link	src/openvpn/forward.c	/^socks_postprocess_incoming_link (struct context *c)$/;"	f	file:
socks_preprocess_outgoing_link	src/openvpn/forward.c	/^socks_preprocess_outgoing_link (struct context *c,$/;"	f	file:
socks_process_incoming_udp	src/openvpn/socks.c	/^socks_process_incoming_udp (struct buffer *buf,$/;"	f
socks_process_outgoing_udp	src/openvpn/socks.c	/^socks_process_outgoing_udp (struct buffer *buf,$/;"	f
socks_proxy	src/openvpn/openvpn.h	/^  struct socks_proxy_info *socks_proxy;$/;"	m	struct:context_1	typeref:struct:context_1::socks_proxy_info
socks_proxy	src/openvpn/socket.h	/^  struct socks_proxy_info *socks_proxy;$/;"	m	struct:link_socket	typeref:struct:link_socket::socks_proxy_info
socks_proxy_authfile	src/openvpn/options.h	/^  const char *socks_proxy_authfile;$/;"	m	struct:connection_entry
socks_proxy_close	src/openvpn/socks.c	/^socks_proxy_close (struct socks_proxy_info *sp)$/;"	f
socks_proxy_info	src/openvpn/socks.h	/^struct socks_proxy_info {$/;"	s
socks_proxy_new	src/openvpn/socks.c	/^socks_proxy_new (const char *server,$/;"	f
socks_proxy_owned	src/openvpn/openvpn.h	/^  bool socks_proxy_owned;$/;"	m	struct:context_1
socks_proxy_port	src/openvpn/options.h	/^  int socks_proxy_port;$/;"	m	struct:connection_entry
socks_proxy_retry	src/openvpn/options.h	/^  bool socks_proxy_retry;$/;"	m	struct:connection_entry
socks_proxy_server	src/openvpn/options.h	/^  const char *socks_proxy_server;$/;"	m	struct:connection_entry
socks_relay	src/openvpn/socket.h	/^  struct link_socket_actual socks_relay; \/* Socks UDP relay address *\/$/;"	m	struct:link_socket	typeref:struct:link_socket::link_socket_actual
socks_username_password_auth	src/openvpn/socks.c	/^socks_username_password_auth (struct socks_proxy_info *p,$/;"	f	file:
sofar	src/openvpn/perf.c	/^  double sofar;$/;"	m	struct:perf	file:
solaris_close_tun	src/openvpn/tun.c	/^solaris_close_tun (struct tuntap *tt)$/;"	f	file:
solaris_error_close	src/openvpn/tun.c	/^solaris_error_close (struct tuntap *tt, const struct env_set *es, $/;"	f	file:
source	src/openvpn/proto.h	/^  uint16_t      source;    \/* source port *\/$/;"	m	struct:openvpn_tcphdr
source	src/openvpn/proto.h	/^  uint16_t   source;$/;"	m	struct:openvpn_udphdr
source	src/openvpn/proto.h	/^  uint8_t source[OPENVPN_ETH_ALEN];   \/* source ethernet addr	*\/$/;"	m	struct:openvpn_ethhdr
space	src/openvpn/options.c	/^space (unsigned char c)$/;"	f	file:
spec	src/openvpn/route.h	/^  struct route_special_addr spec;$/;"	m	struct:route_list	typeref:struct:route_list::route_special_addr
special_state_msg	src/openvpn/manage.h	/^  const char *special_state_msg;$/;"	m	struct:man_persist
srandom	src/openvpn/syshead.h	45;"	d
sru	src/openvpn/schedule.c	/^  int sru;$/;"	m	struct:status	file:
ssStatus	src/openvpnserv/service.c	/^SERVICE_STATUS          ssStatus;       \/\/ current status of the service$/;"	v
sshStatusHandle	src/openvpnserv/service.c	/^SERVICE_STATUS_HANDLE   sshStatusHandle;$/;"	v
ssize_t	config-msvc.h	101;"	d
ssl	src/openvpn/ssl_openssl.h	/^    SSL *ssl;			\/* SSL object -- new obj created for each new key *\/$/;"	m	struct:key_state_ssl
ssl_api	include/openvpn-plugin.h	/^  const ovpnSSLAPI ssl_api;$/;"	m	struct:openvpn_plugin_args_open_in
ssl_bio	src/openvpn/ssl_openssl.h	/^    BIO *ssl_bio;			\/* read\/write plaintext from here *\/$/;"	m	struct:key_state_ssl
ssl_ctx	src/openvpn/openvpn.h	/^  struct tls_root_ctx ssl_ctx;$/;"	m	struct:key_schedule	typeref:struct:key_schedule::tls_root_ctx
ssl_ctx	src/openvpn/ssl_common.h	/^  struct tls_root_ctx ssl_ctx;$/;"	m	struct:tls_options	typeref:struct:tls_options::tls_root_ctx
ssl_default_options_string	src/openvpn/ssl.c	/^static const char ssl_default_options_string[] = "V0 UNDEF";$/;"	v	file:
ssl_flags	src/openvpn/options.h	/^  unsigned int ssl_flags; \/* set to SSLF_x flags from ssl.h *\/$/;"	m	struct:options
ssl_flags	src/openvpn/ssl_common.h	/^  unsigned int ssl_flags;$/;"	m	struct:tls_options
ssl_purge_auth	src/openvpn/ssl.c	/^ssl_purge_auth (const bool auth_user_pass_only)$/;"	f
ssl_purge_auth_challenge	src/openvpn/ssl.c	/^ssl_purge_auth_challenge (void)$/;"	f
ssl_put_auth_challenge	src/openvpn/ssl.c	/^ssl_put_auth_challenge (const char *cr_str)$/;"	f
ssl_set_auth_nocache	src/openvpn/ssl.c	/^ssl_set_auth_nocache (void)$/;"	f
ssl_set_auth_token	src/openvpn/ssl.c	/^ssl_set_auth_token (const char *token)$/;"	f
stack	src/openvpn/perf.c	/^  int stack[STACK_N];$/;"	m	struct:perf_set	file:
stack_len	src/openvpn/perf.c	/^  int stack_len;$/;"	m	struct:perf_set	file:
stale_route_check_trigger	src/openvpn/multi.c	/^stale_route_check_trigger (struct multi_context *m)$/;"	f
stale_routes_ageing_time	src/openvpn/options.h	/^  int stale_routes_ageing_time;$/;"	m	struct:options
stale_routes_check_et	src/openvpn/multi.h	/^  struct event_timeout stale_routes_check_et;$/;"	m	struct:multi_context	typeref:struct:multi_context::event_timeout
stale_routes_check_interval	src/openvpn/options.h	/^  int stale_routes_check_interval;$/;"	m	struct:options
standalone_disabled	src/openvpn/manage.h	/^  bool standalone_disabled;$/;"	m	struct:man_persist
standby_iter	src/openvpn/tun.h	/^  int standby_iter;$/;"	m	struct:tuntap
start	src/openvpn/interval.h	/^  struct timeval start;$/;"	m	struct:usec_timer	typeref:struct:usec_timer::timeval
start	src/openvpn/perf.c	/^  struct timeval start;$/;"	m	struct:perf	typeref:struct:perf::timeval	file:
state	src/openvpn/manage.h	/^  int state;$/;"	m	struct:man_connection
state	src/openvpn/manage.h	/^  int state;$/;"	m	union:log_entry_union
state	src/openvpn/manage.h	/^  struct log_history *state;$/;"	m	struct:man_persist	typeref:struct:man_persist::log_history
state	src/openvpn/mstats.h	/^  int state;$/;"	m	struct:mmap_stats
state	src/openvpn/perf.c	/^  int state;$/;"	m	struct:perf	file:
state	src/openvpn/ssl_common.h	/^  int state;$/;"	m	struct:key_state
state_buffer_size	src/openvpn/manage.h	/^  int state_buffer_size;$/;"	m	struct:man_settings
state_id	src/openvpn/misc.h	/^  const char *state_id;$/;"	m	struct:auth_challenge_info
state_must_be	src/openvpn/perf.c	/^state_must_be (const struct perf *p, const int wanted)$/;"	f	file:
state_name	src/openvpn/ssl.c	/^state_name (int state)$/;"	f	file:
state_realtime	src/openvpn/manage.h	/^  bool state_realtime;$/;"	m	struct:man_connection
static_challenge_info	src/openvpn/misc.h	/^struct static_challenge_info {$/;"	s
static_challenge_info	src/openvpn/misc.h	/^struct static_challenge_info {};$/;"	s
static_context	src/openvpn/init.c	/^static struct context *static_context; \/* GLOBAL *\/$/;"	v	typeref:struct:context	file:
static_key	src/openvpn/openvpn.h	/^  struct key_ctx_bi static_key;$/;"	m	struct:key_schedule	typeref:struct:key_schedule::key_ctx_bi
static_key_foot	src/openvpn/crypto.c	/^static const char static_key_foot[] = "-----END OpenVPN Static key V1-----";$/;"	v	file:
static_key_head	src/openvpn/crypto.c	/^static const char static_key_head[] = "-----BEGIN OpenVPN Static key V1-----";$/;"	v	file:
static_plugin_common	src/openvpn/plugin.c	/^static struct plugin_common *static_plugin_common = NULL; \/* GLOBAL *\/$/;"	v	typeref:struct:plugin_common	file:
static_proxy_user_pass	src/openvpn/proxy.c	/^static struct user_pass static_proxy_user_pass;$/;"	v	typeref:struct:user_pass	file:
status	src/openvpn/manage.h	/^  void (*status) (void *arg, const int version, struct status_output *so);$/;"	m	struct:management_callback
status	src/openvpn/schedule.c	/^struct status$/;"	s	file:
status	src/openvpn/win32.h	/^  int status;$/;"	m	struct:overlapped_io
status_close	src/openvpn/status.c	/^status_close (struct status_output *so)$/;"	f
status_file	src/openvpn/options.h	/^  const char *status_file;$/;"	m	struct:options
status_file_update_freq	src/openvpn/options.h	/^  int status_file_update_freq;$/;"	m	struct:options
status_file_version	src/openvpn/multi.h	/^  int status_file_version;$/;"	m	struct:multi_context
status_file_version	src/openvpn/options.h	/^  int status_file_version;$/;"	m	struct:options
status_flush	src/openvpn/status.c	/^status_flush (struct status_output *so)$/;"	f
status_open	src/openvpn/status.c	/^status_open (const char *filename,$/;"	f
status_output	src/openvpn/openvpn.h	/^  struct status_output *status_output;$/;"	m	struct:context_1	typeref:struct:context_1::status_output
status_output	src/openvpn/status.h	/^struct status_output$/;"	s
status_output_owned	src/openvpn/openvpn.h	/^  bool status_output_owned;$/;"	m	struct:context_1
status_printf	src/openvpn/status.c	/^status_printf (struct status_output *so, const char *format, ...)$/;"	f
status_read	src/openvpn/status.c	/^status_read (struct status_output *so, struct buffer *buf)$/;"	f
status_reset	src/openvpn/status.c	/^status_reset (struct status_output *so)$/;"	f
status_rw_flags	src/openvpn/status.h	/^status_rw_flags (const struct status_output *so)$/;"	f
status_trigger	src/openvpn/status.c	/^status_trigger (struct status_output *so)$/;"	f
status_trigger_tv	src/openvpn/status.c	/^status_trigger_tv (struct status_output *so, struct timeval *tv)$/;"	f
std_redir	src/openvpn/error.c	/^static bool std_redir;      \/* GLOBAL *\/$/;"	v	file:
store_proxy_authenticate	src/openvpn/proxy.c	/^store_proxy_authenticate (struct http_proxy_info *p, char *data)$/;"	f	file:
strcasecmp	config-msvc.h	93;"	d
stream_buf	src/openvpn/socket.h	/^  struct stream_buf stream_buf;$/;"	m	struct:link_socket	typeref:struct:link_socket::stream_buf
stream_buf	src/openvpn/socket.h	/^struct stream_buf$/;"	s
stream_buf_added	src/openvpn/socket.c	/^stream_buf_added (struct stream_buf *sb,$/;"	f
stream_buf_close	src/openvpn/socket.c	/^stream_buf_close (struct stream_buf* sb)$/;"	f
stream_buf_data	src/openvpn/socket.h	/^  struct buffer stream_buf_data;$/;"	m	struct:link_socket	typeref:struct:link_socket::buffer
stream_buf_get_final	src/openvpn/socket.c	/^stream_buf_get_final (struct stream_buf *sb, struct buffer *buf)$/;"	f	file:
stream_buf_get_next	src/openvpn/socket.c	/^stream_buf_get_next (struct stream_buf *sb, struct buffer *buf)$/;"	f	file:
stream_buf_init	src/openvpn/socket.c	/^stream_buf_init (struct stream_buf *sb,$/;"	f
stream_buf_read_setup	src/openvpn/socket.h	/^stream_buf_read_setup (struct link_socket* sock)$/;"	f
stream_buf_read_setup_dowork	src/openvpn/socket.c	/^stream_buf_read_setup_dowork (struct link_socket* sock)$/;"	f
stream_buf_reset	src/openvpn/socket.c	/^stream_buf_reset (struct stream_buf *sb)$/;"	f	file:
stream_buf_set_next	src/openvpn/socket.c	/^stream_buf_set_next (struct stream_buf *sb)$/;"	f	file:
stream_reset	src/openvpn/socket.h	/^  bool stream_reset;$/;"	m	struct:link_socket
streq	src/openvpn/options.h	602;"	d
strerror_ts	src/openvpn/misc.c	/^strerror_ts (int errnum, struct gc_arena *gc)$/;"	f
strerror_win32	src/openvpn/error.c	/^strerror_win32 (DWORD errnum, struct gc_arena *gc)$/;"	f
string	src/openvpn/manage.h	/^  const char *string;$/;"	m	struct:log_entry
string	src/openvpn/misc.h	/^  char *string;$/;"	m	struct:env_item
string_alloc	src/openvpn/buffer.h	145;"	d
string_alloc_buf	src/openvpn/buffer.h	146;"	d
string_alloc_buf_debug	src/openvpn/buffer.c	/^string_alloc_buf_debug (const char *str, struct gc_arena *gc, const char *file, int line)$/;"	f
string_alloc_debug	src/openvpn/buffer.c	/^string_alloc_debug (const char *str, struct gc_arena *gc, const char *file, int line)$/;"	f
string_array_len	src/openvpn/buffer.c	/^string_array_len (const char **array)$/;"	f
string_array_len	src/plugins/auth-pam/auth-pam.c	/^string_array_len (const char *array[])$/;"	f	file:
string_array_len	src/plugins/down-root/down-root.c	/^string_array_len (const char *array[])$/;"	f	file:
string_class	src/openvpn/buffer.c	/^string_class (const char *str, const unsigned int inclusive, const unsigned int exclusive)$/;"	f
string_clear	src/openvpn/buffer.c	/^string_clear (char *str)$/;"	f
string_defined_equal	src/openvpn/options.c	/^string_defined_equal (const char *s1, const char *s2)$/;"	f
string_mod	src/openvpn/buffer.c	/^string_mod (char *str, const unsigned int inclusive, const unsigned int exclusive, const char replace)$/;"	f
string_mod_const	src/openvpn/buffer.c	/^string_mod_const (const char *str,$/;"	f
string_mod_remap_name	src/openvpn/ssl_verify.c	/^string_mod_remap_name (char *str, const unsigned int restrictive_flags)$/;"	f	file:
string_null_terminate	src/openvpn/buffer.c	/^string_null_terminate (char *str, int len, int capacity)$/;"	f
string_replace_leading	src/openvpn/buffer.c	/^string_replace_leading (char *str, const char match, const char replace)$/;"	f
string_substitute	src/openvpn/options.c	/^string_substitute (const char *src, int from, int to, struct gc_arena *gc)$/;"	f	file:
strncasecmp	config-msvc.h	92;"	d
strncpynt	src/openvpn/buffer.h	/^strncpynt (char *dest, const char *src, size_t maxlen)$/;"	f
strtoull	config-msvc.h	97;"	d
sum	src/openvpn/perf.c	/^  double sum;$/;"	m	struct:perf	file:
suppress_timestamps	src/openvpn/error.c	/^static bool suppress_timestamps; \/* GLOBAL *\/$/;"	v	file:
suppress_timestamps	src/openvpn/options.h	/^  bool suppress_timestamps;$/;"	m	struct:options
swap_hmac	src/openvpn/ssl.c	/^swap_hmac (struct buffer *buf, const struct crypto_options *co, bool incoming)$/;"	f	file:
system_error_message	src/openvpn/misc.c	/^system_error_message (int stat, struct gc_arena *gc)$/;"	f
system_ok	src/plugins/down-root/down-root.c	/^system_ok (int stat)$/;"	f
system_str	src/openvpn/misc.h	/^  char *system_str;$/;"	m	struct:argv
szErr	src/openvpnserv/service.c	/^TCHAR                   szErr[256];$/;"	v
ta_iow_flags	src/openvpn/mtcp.c	/^struct ta_iow_flags$/;"	s	file:
tail	src/openvpn/buffer.h	/^  struct buffer_entry *tail; \/* last item pushed *\/$/;"	m	struct:buffer_list	typeref:struct:buffer_list::buffer_entry
tail	src/openvpn/pushlist.h	/^  struct push_entry *tail;$/;"	m	struct:push_list	typeref:struct:push_list::push_entry
tap_allow_nonadmin_access	src/openvpn/tun.c	/^tap_allow_nonadmin_access (const char *dev_node)$/;"	f
tap_allow_nonadmin_access_handle	src/openvpn/tun.c	/^tap_allow_nonadmin_access_handle (const char *device_path, HANDLE hand)$/;"	f	file:
tap_reg	src/openvpn/tun.h	/^struct tap_reg$/;"	s
tap_sleep	src/openvpn/tun.h	/^  int tap_sleep;$/;"	m	struct:tuntap_options
tap_win_getinfo	src/openvpn/tun.c	/^tap_win_getinfo (const struct tuntap *tt, struct gc_arena *gc)$/;"	f
tas_last	src/openvpn/ssl_common.h	/^  time_t tas_last;$/;"	m	struct:tls_multi
tcp	src/openvpn/proto.h	/^    struct openvpn_tcphdr tcp;$/;"	m	union:ip_tcp_udp_hdr::__anon4	typeref:struct:ip_tcp_udp_hdr::__anon4::openvpn_tcphdr
tcp_connection_established	src/openvpn/socket.c	/^tcp_connection_established (const struct link_socket_actual *act)$/;"	f	file:
tcp_link_out_deferred	src/openvpn/multi.h	/^  struct mbuf_set *tcp_link_out_deferred;$/;"	m	struct:multi_instance	typeref:struct:multi_instance::mbuf_set
tcp_mode	src/openvpn/ssl_common.h	/^  bool tcp_mode;$/;"	m	struct:tls_options
tcp_queue_limit	src/openvpn/multi.h	/^  int tcp_queue_limit;$/;"	m	struct:multi_context
tcp_queue_limit	src/openvpn/options.h	/^  int tcp_queue_limit;$/;"	m	struct:options
tcp_rwflags	src/openvpn/multi.h	/^  unsigned int tcp_rwflags;$/;"	m	struct:multi_instance
test_adapter_ip_netmask	src/openvpn/tun.c	/^test_adapter_ip_netmask (const IP_ADAPTER_INFO *ai, const in_addr_t ip, const in_addr_t netmask)$/;"	f	file:
test_crypto	src/openvpn/crypto.c	/^test_crypto (const struct crypto_options *co, struct frame* frame)$/;"	f
test_crypto	src/openvpn/options.h	/^  bool test_crypto;$/;"	m	struct:options
test_crypto_thread	src/openvpn/init.c	/^test_crypto_thread (void *arg)$/;"	f	file:
test_deferred_auth	sample/sample-plugins/defer/simple.c	/^  int test_deferred_auth;$/;"	m	struct:plugin_context	file:
test_file	src/openvpn/misc.c	/^test_file (const char *filename)$/;"	f
test_local_addr	src/openvpn/route.c	/^test_local_addr (const in_addr_t addr, const struct route_gateway_info *rgi) \/* PLATFORM-SPECIFIC *\/$/;"	f
test_local_addr	src/openvpn/route.c	/^test_local_addr (const in_addr_t addr, const struct route_gateway_info *rgi)$/;"	f
test_packet_filter	sample/sample-plugins/defer/simple.c	/^  int test_packet_filter;$/;"	m	struct:plugin_context	file:
test_route	src/openvpn/route.c	/^test_route (const IP_ADAPTER_INFO *adapters,$/;"	f	file:
test_route_helper	src/openvpn/route.c	/^test_route_helper (bool *ret,$/;"	f	file:
test_routes	src/openvpn/route.c	/^test_routes (const struct route_list *rl, const struct tuntap *tt)$/;"	f
test_routes	src/openvpn/route.h	/^static inline bool test_routes (const struct route_list *rl, const struct tuntap *tt) { return true; }$/;"	f
thread_mode	src/openvpn/multi.h	/^  int thread_mode;$/;"	m	struct:multi_context
throw_signal	src/openvpn/sig.c	/^throw_signal (const int signum)$/;"	f
throw_signal_soft	src/openvpn/sig.c	/^throw_signal_soft (const int signum, const char *signal_text)$/;"	f
time	src/openvpn/packet_id.h	/^  time_t time;                \/* highest time stamp received *\/$/;"	m	struct:packet_id_rec
time	src/openvpn/packet_id.h	/^  time_t time;             \/* time stamp *\/$/;"	m	struct:packet_id_persist
time	src/openvpn/packet_id.h	/^  time_t time;             \/* time stamp *\/$/;"	m	struct:packet_id_persist_file_image
time	src/openvpn/packet_id.h	/^  time_t time; \/* converted to net_time_t before transmission *\/$/;"	m	struct:packet_id_net
time	src/openvpn/packet_id.h	/^  time_t time;$/;"	m	struct:packet_id_send
time_backtrack	src/openvpn/packet_id.h	/^  int time_backtrack;         \/* set from --replay-window *\/$/;"	m	struct:packet_id_rec
time_format	src/openvpn/common.h	61;"	d
time_last_written	src/openvpn/packet_id.h	/^  time_t time_last_written;$/;"	m	struct:packet_id_persist
time_string	src/openvpn/otime.c	/^time_string (time_t t, int usec, bool show_usec, struct gc_arena *gc)$/;"	f
time_test	src/openvpn/otime.c	/^time_test (void)$/;"	f
time_type	src/openvpn/common.h	/^typedef unsigned long time_type;$/;"	t
timeout	src/openvpn/proxy.h	/^  int timeout;$/;"	m	struct:http_proxy_options
timeout	src/openvpn/reliable.h	/^  interval_t timeout;$/;"	m	struct:reliable_entry
timeout_random_component	src/openvpn/openvpn.h	/^  struct timeval timeout_random_component;$/;"	m	struct:context_2	typeref:struct:context_2::timeval
timestamp	src/openvpn/fragment.h	/^  time_t timestamp;		\/**< Timestamp for time-to-live purposes. *\/$/;"	m	struct:fragment
timestamp	src/openvpn/manage.h	/^  time_t timestamp;$/;"	m	struct:log_entry
timeval	src/openvpn/openvpn.h	/^  struct timeval timeval;$/;"	m	struct:context_2	typeref:struct:context_2::timeval
title_string	src/openvpn/options.c	/^const char title_string[] =$/;"	v
tls1_PRF	src/openvpn/ssl.c	/^tls1_PRF(uint8_t *label,$/;"	f	file:
tls1_P_hash	src/openvpn/ssl.c	/^tls1_P_hash(const md_kt_t *md_kt,$/;"	f
tls_adjust_frame_parameters	src/openvpn/ssl.c	/^tls_adjust_frame_parameters(struct frame *frame)$/;"	f
tls_auth	src/openvpn/ssl_common.h	/^  struct crypto_options tls_auth;$/;"	m	struct:tls_options	typeref:struct:tls_options::crypto_options
tls_auth	src/openvpn/ssl_common.h	/^  struct crypto_options tls_auth;$/;"	m	struct:tls_session	typeref:struct:tls_session::crypto_options
tls_auth_file	src/openvpn/options.h	/^  const char *tls_auth_file;		\/* shared secret *\/$/;"	m	struct:options
tls_auth_file_inline	src/openvpn/options.h	/^  const char *tls_auth_file_inline;$/;"	m	struct:options
tls_auth_key	src/openvpn/openvpn.h	/^  struct key_ctx_bi tls_auth_key;$/;"	m	struct:key_schedule	typeref:struct:key_schedule::key_ctx_bi
tls_auth_key	src/openvpn/ssl.h	/^  struct key_ctx_bi tls_auth_key;$/;"	m	struct:tls_auth_standalone	typeref:struct:tls_auth_standalone::key_ctx_bi
tls_auth_key	src/openvpn/ssl_common.h	/^  struct key_ctx_bi tls_auth_key;$/;"	m	struct:tls_options	typeref:struct:tls_options::key_ctx_bi
tls_auth_options	src/openvpn/ssl.h	/^  struct crypto_options tls_auth_options;$/;"	m	struct:tls_auth_standalone	typeref:struct:tls_auth_standalone::crypto_options
tls_auth_pid	src/openvpn/ssl_common.h	/^  struct packet_id tls_auth_pid;$/;"	m	struct:tls_session	typeref:struct:tls_session::packet_id
tls_auth_standalone	src/openvpn/openvpn.h	/^  struct tls_auth_standalone *tls_auth_standalone;$/;"	m	struct:context_2	typeref:struct:context_2::tls_auth_standalone
tls_auth_standalone	src/openvpn/ssl.h	/^struct tls_auth_standalone$/;"	s
tls_auth_standalone_finalize	src/openvpn/ssl.c	/^tls_auth_standalone_finalize (struct tls_auth_standalone *tas,$/;"	f
tls_auth_standalone_init	src/openvpn/ssl.c	/^tls_auth_standalone_init (struct tls_options *tls_options,$/;"	f
tls_authenticate_key	src/openvpn/ssl_verify.c	/^tls_authenticate_key (struct tls_multi *multi, const unsigned int mda_key_id, const bool auth, const char *client_reason)$/;"	f
tls_authentication_status	src/openvpn/ssl_verify.c	/^tls_authentication_status (struct tls_multi *multi, const int latency)$/;"	f
tls_cipher_name_pair	src/openvpn/ssl_backend.h	/^typedef struct { const char *openssl_name; const char *iana_name; } tls_cipher_name_pair;$/;"	t	typeref:struct:__anon9
tls_cipher_name_translation_table	src/openvpn/ssl.c	/^static const tls_cipher_name_pair tls_cipher_name_translation_table[] = {$/;"	v	file:
tls_clear_error	src/openvpn/ssl_openssl.c	/^tls_clear_error()$/;"	f
tls_clear_error	src/openvpn/ssl_polarssl.c	/^tls_clear_error()$/;"	f
tls_client	src/openvpn/options.h	/^  bool tls_client;$/;"	m	struct:options
tls_client_reason	src/openvpn/ssl_verify.h	/^tls_client_reason (struct tls_multi *multi)$/;"	f
tls_common_name	src/openvpn/ssl_verify.c	/^tls_common_name (const struct tls_multi *multi, const bool null)$/;"	f
tls_common_name_hash	src/openvpn/ssl_verify.h	/^tls_common_name_hash (const struct tls_multi *multi, const char **cn, uint32_t *cn_hash)$/;"	f
tls_ctx_add_extra_certs	src/openvpn/ssl_openssl.c	/^tls_ctx_add_extra_certs (struct tls_root_ctx *ctx, BIO *bio)$/;"	f	file:
tls_ctx_client_new	src/openvpn/ssl_openssl.c	/^tls_ctx_client_new(struct tls_root_ctx *ctx, unsigned int ssl_flags)$/;"	f
tls_ctx_client_new	src/openvpn/ssl_polarssl.c	/^tls_ctx_client_new(struct tls_root_ctx *ctx, unsigned int ssl_flags)$/;"	f
tls_ctx_free	src/openvpn/ssl_openssl.c	/^tls_ctx_free(struct tls_root_ctx *ctx)$/;"	f
tls_ctx_free	src/openvpn/ssl_polarssl.c	/^tls_ctx_free(struct tls_root_ctx *ctx)$/;"	f
tls_ctx_free_cert_file	src/openvpn/ssl_openssl.c	/^tls_ctx_free_cert_file (X509 *x509)$/;"	f
tls_ctx_initialised	src/openvpn/ssl_openssl.c	/^bool tls_ctx_initialised(struct tls_root_ctx *ctx)$/;"	f
tls_ctx_initialised	src/openvpn/ssl_polarssl.c	/^tls_ctx_initialised(struct tls_root_ctx *ctx)$/;"	f
tls_ctx_load_ca	src/openvpn/ssl_openssl.c	/^tls_ctx_load_ca (struct tls_root_ctx *ctx, const char *ca_file,$/;"	f
tls_ctx_load_ca	src/openvpn/ssl_polarssl.c	/^void tls_ctx_load_ca (struct tls_root_ctx *ctx, const char *ca_file,$/;"	f
tls_ctx_load_cert_file	src/openvpn/ssl_openssl.c	/^tls_ctx_load_cert_file (struct tls_root_ctx *ctx, const char *cert_file,$/;"	f
tls_ctx_load_cert_file	src/openvpn/ssl_polarssl.c	/^tls_ctx_load_cert_file (struct tls_root_ctx *ctx, const char *cert_file,$/;"	f
tls_ctx_load_cert_file_and_copy	src/openvpn/ssl_openssl.c	/^tls_ctx_load_cert_file_and_copy (struct tls_root_ctx *ctx,$/;"	f	file:
tls_ctx_load_cryptoapi	src/openvpn/ssl_openssl.c	/^tls_ctx_load_cryptoapi(struct tls_root_ctx *ctx, const char *cryptoapi_cert)$/;"	f
tls_ctx_load_cryptoapi	src/openvpn/ssl_polarssl.c	/^tls_ctx_load_cryptoapi(struct tls_root_ctx *ctx, const char *cryptoapi_cert)$/;"	f
tls_ctx_load_dh_params	src/openvpn/ssl_openssl.c	/^tls_ctx_load_dh_params (struct tls_root_ctx *ctx, const char *dh_file,$/;"	f
tls_ctx_load_dh_params	src/openvpn/ssl_polarssl.c	/^tls_ctx_load_dh_params (struct tls_root_ctx *ctx, const char *dh_file,$/;"	f
tls_ctx_load_extra_certs	src/openvpn/ssl_openssl.c	/^tls_ctx_load_extra_certs (struct tls_root_ctx *ctx, const char *extra_certs_file,$/;"	f
tls_ctx_load_extra_certs	src/openvpn/ssl_polarssl.c	/^tls_ctx_load_extra_certs (struct tls_root_ctx *ctx, const char *extra_certs_file,$/;"	f
tls_ctx_load_pkcs12	src/openvpn/ssl_openssl.c	/^tls_ctx_load_pkcs12(struct tls_root_ctx *ctx, const char *pkcs12_file,$/;"	f
tls_ctx_load_pkcs12	src/openvpn/ssl_polarssl.c	/^tls_ctx_load_pkcs12(struct tls_root_ctx *ctx, const char *pkcs12_file,$/;"	f
tls_ctx_load_priv_file	src/openvpn/ssl_openssl.c	/^tls_ctx_load_priv_file (struct tls_root_ctx *ctx, const char *priv_key_file,$/;"	f
tls_ctx_load_priv_file	src/openvpn/ssl_polarssl.c	/^tls_ctx_load_priv_file (struct tls_root_ctx *ctx, const char *priv_key_file,$/;"	f
tls_ctx_personalise_random	src/openvpn/ssl_polarssl.c	/^void tls_ctx_personalise_random(struct tls_root_ctx *ctx)$/;"	f
tls_ctx_restrict_ciphers	src/openvpn/ssl_openssl.c	/^tls_ctx_restrict_ciphers(struct tls_root_ctx *ctx, const char *ciphers)$/;"	f
tls_ctx_restrict_ciphers	src/openvpn/ssl_polarssl.c	/^tls_ctx_restrict_ciphers(struct tls_root_ctx *ctx, const char *ciphers)$/;"	f
tls_ctx_server_new	src/openvpn/ssl_openssl.c	/^tls_ctx_server_new(struct tls_root_ctx *ctx, unsigned int ssl_flags)$/;"	f
tls_ctx_server_new	src/openvpn/ssl_polarssl.c	/^tls_ctx_server_new(struct tls_root_ctx *ctx, unsigned int ssl_flags)$/;"	f
tls_ctx_set_options	src/openvpn/ssl_openssl.c	/^tls_ctx_set_options (struct tls_root_ctx *ctx, unsigned int ssl_flags)$/;"	f
tls_ctx_set_options	src/openvpn/ssl_polarssl.c	/^tls_ctx_set_options (struct tls_root_ctx *ctx, unsigned int ssl_flags)$/;"	f
tls_ctx_use_external_private_key	src/openvpn/ssl_openssl.c	/^tls_ctx_use_external_private_key (struct tls_root_ctx *ctx,$/;"	f
tls_ctx_use_external_private_key	src/openvpn/ssl_polarssl.c	/^tls_ctx_use_external_private_key (struct tls_root_ctx *ctx,$/;"	f
tls_ctx_use_pkcs11	src/openvpn/pkcs11.c	/^tls_ctx_use_pkcs11 ($/;"	f
tls_deauthenticate	src/openvpn/ssl_verify.c	/^tls_deauthenticate (struct tls_multi *multi)$/;"	f	file:
tls_exit	src/openvpn/options.h	/^  bool tls_exit;$/;"	m	struct:options
tls_exit_signal	src/openvpn/openvpn.h	/^  int tls_exit_signal;$/;"	m	struct:context_2
tls_export_cert	src/openvpn/options.h	/^  const char *tls_export_cert;$/;"	m	struct:options
tls_final	sample/sample-plugins/defer/simple.c	/^tls_final (struct plugin_context *context, struct plugin_per_client_context *pcc, const char *argv[], const char *envp[])$/;"	f	file:
tls_free_lib	src/openvpn/ssl_openssl.c	/^tls_free_lib()$/;"	f
tls_free_lib	src/openvpn/ssl_polarssl.c	/^tls_free_lib()$/;"	f
tls_get_cipher_name_pair	src/openvpn/ssl.c	/^tls_get_cipher_name_pair (const char * cipher_name, size_t len) {$/;"	f
tls_get_peer_info	src/openvpn/ssl.h	/^tls_get_peer_info(const struct tls_multi *multi)$/;"	f
tls_handshake_error	src/openvpn/ssl.c	/^static int tls_handshake_error;   \/* GLOBAL *\/$/;"	v	file:
tls_handshake_success	src/openvpn/ssl.c	/^static int tls_handshake_success; \/* GLOBAL *\/$/;"	v	file:
tls_init_control_channel_frame_parameters	src/openvpn/ssl.c	/^tls_init_control_channel_frame_parameters(const struct frame *data_channel_frame,$/;"	f	file:
tls_init_lib	src/openvpn/ssl_openssl.c	/^tls_init_lib()$/;"	f
tls_init_lib	src/openvpn/ssl_polarssl.c	/^tls_init_lib()$/;"	f
tls_initial_packet_received	src/openvpn/ssl.h	/^tls_initial_packet_received (const struct tls_multi *multi)$/;"	f
tls_lock_cert_hash_set	src/openvpn/ssl_verify.c	/^tls_lock_cert_hash_set (struct tls_multi *multi)$/;"	f
tls_lock_common_name	src/openvpn/ssl_verify.c	/^tls_lock_common_name (struct tls_multi *multi)$/;"	f
tls_lock_username	src/openvpn/ssl_verify.c	/^tls_lock_username (struct tls_multi *multi, const char *username)$/;"	f	file:
tls_multi	src/openvpn/openvpn.h	/^  struct tls_multi *tls_multi;  \/**< TLS state structure for this VPN$/;"	m	struct:context_2	typeref:struct:context_2::tls_multi
tls_multi	src/openvpn/ssl_common.h	/^struct tls_multi$/;"	s
tls_multi_free	src/openvpn/ssl.c	/^tls_multi_free (struct tls_multi *multi, bool clear)$/;"	f
tls_multi_init	src/openvpn/ssl.c	/^tls_multi_init (struct tls_options *tls_options)$/;"	f
tls_multi_init_finalize	src/openvpn/ssl.c	/^tls_multi_init_finalize (struct tls_multi* multi, const struct frame* frame)$/;"	f
tls_multi_init_set_options	src/openvpn/ssl.c	/^tls_multi_init_set_options (struct tls_multi* multi,$/;"	f
tls_multi_process	src/openvpn/ssl.c	/^tls_multi_process (struct tls_multi *multi,$/;"	f
tls_options	src/openvpn/ssl_common.h	/^struct tls_options$/;"	s
tls_packets_generated	src/openvpn/ssl.c	/^static int tls_packets_generated; \/* GLOBAL *\/$/;"	v	file:
tls_packets_sent	src/openvpn/ssl.c	/^static int tls_packets_sent;      \/* GLOBAL *\/$/;"	v	file:
tls_post_encrypt	src/openvpn/ssl.c	/^tls_post_encrypt (struct tls_multi *multi, struct buffer *buf)$/;"	f
tls_pre_decrypt	src/openvpn/ssl.c	/^tls_pre_decrypt (struct tls_multi *multi,$/;"	f
tls_pre_decrypt_lite	src/openvpn/ssl.c	/^tls_pre_decrypt_lite (const struct tls_auth_standalone *tas,$/;"	f
tls_pre_encrypt	src/openvpn/ssl.c	/^tls_pre_encrypt (struct tls_multi *multi,$/;"	f
tls_process	src/openvpn/ssl.c	/^tls_process (struct tls_multi *multi,$/;"	f	file:
tls_rec_payload	src/openvpn/ssl.c	/^tls_rec_payload (struct tls_multi *multi,$/;"	f
tls_root_ctx	src/openvpn/ssl_openssl.h	/^struct tls_root_ctx {$/;"	s
tls_root_ctx	src/openvpn/ssl_polarssl.h	/^struct tls_root_ctx {$/;"	s
tls_send_payload	src/openvpn/ssl.c	/^tls_send_payload (struct tls_multi *multi,$/;"	f
tls_server	src/openvpn/options.h	/^  bool tls_server;$/;"	m	struct:options
tls_session	src/openvpn/ssl_common.h	/^struct tls_session$/;"	s
tls_session_free	src/openvpn/ssl.c	/^tls_session_free (struct tls_session *session, bool clear)$/;"	f	file:
tls_session_init	src/openvpn/ssl.c	/^tls_session_init (struct tls_multi *multi, struct tls_session *session)$/;"	f	file:
tls_session_set_self_referential_pointers	src/openvpn/ssl.c	/^static inline void tls_session_set_self_referential_pointers (struct tls_session* session) {$/;"	f	file:
tls_set_single_session	src/openvpn/ssl.h	/^tls_set_single_session (struct tls_multi *multi)$/;"	f
tls_test_auth_deferred_interval	src/openvpn/ssl.h	/^tls_test_auth_deferred_interval (const struct tls_multi *multi)$/;"	f
tls_test_payload_len	src/openvpn/ssl.h	/^tls_test_payload_len (const struct tls_multi *multi)$/;"	f
tls_timeout	src/openvpn/options.h	/^  int tls_timeout;$/;"	m	struct:options
tls_translate_cipher_name	src/openvpn/ssl_polarssl.c	/^tls_translate_cipher_name (const char * cipher_name) {$/;"	f	file:
tls_username	src/openvpn/ssl_verify.c	/^tls_username (const struct tls_multi *multi, const bool null)$/;"	f
tls_verify	src/openvpn/options.h	/^  const char *tls_verify;$/;"	m	struct:options
tls_version_max	src/openvpn/ssl_openssl.c	/^tls_version_max(void)$/;"	f
tls_version_max	src/openvpn/ssl_polarssl.c	/^tls_version_max(void)$/;"	f
tls_version_parse	src/openvpn/ssl.c	/^tls_version_parse(const char *vstr, const char *extra)$/;"	f
tls_version_to_major_minor	src/openvpn/ssl_polarssl.c	/^static void tls_version_to_major_minor(int tls_ver, int *major, int *minor) {$/;"	f	file:
tmp_dir	src/openvpn/options.h	/^  const char *tmp_dir;$/;"	m	struct:options
tmp_dir	src/openvpn/ssl_common.h	/^  const char *tmp_dir;$/;"	m	struct:tls_options
tmp_int	src/openvpn/openvpn.h	/^  struct interval tmp_int;$/;"	m	struct:context_2	typeref:struct:context_2::interval
tmp_rsa_cb	src/openvpn/ssl_openssl.c	/^tmp_rsa_cb (SSL * s, int is_export, int keylength)$/;"	f	file:
to_link	src/openvpn/openvpn.h	/^  struct buffer to_link;$/;"	m	struct:context_2	typeref:struct:context_2::buffer
to_link_addr	src/openvpn/openvpn.h	/^  struct link_socket_actual *to_link_addr;	\/* IP address of remote *\/$/;"	m	struct:context_2	typeref:struct:context_2::link_socket_actual
to_link_addr	src/openvpn/ssl_common.h	/^  struct link_socket_actual to_link_addr;$/;"	m	struct:tls_multi	typeref:struct:tls_multi::link_socket_actual
to_tun	src/openvpn/openvpn.h	/^  struct buffer to_tun;$/;"	m	struct:context_2	typeref:struct:context_2::buffer
token_decode	src/openvpn/base64.c	/^token_decode(const char *token)$/;"	f	file:
top	src/openvpn/multi.h	/^  struct context top;           \/**< Storage structure for process-wide$/;"	m	struct:multi_context	typeref:struct:multi_context::context
topology	src/openvpn/options.h	/^  int topology; \/* one of the TOP_x values from proto.h *\/$/;"	m	struct:options
topology	src/openvpn/tun.h	/^  int topology; \/* one of the TOP_x values *\/$/;"	m	struct:tuntap
tos	src/openvpn/proto.h	/^  uint8_t    tos;$/;"	m	struct:openvpn_iphdr
tot_len	src/openvpn/proto.h	/^  uint16_t   tot_len;$/;"	m	struct:openvpn_iphdr
transition_window	src/openvpn/options.h	/^  int transition_window;$/;"	m	struct:options
transition_window	src/openvpn/ssl_common.h	/^  int transition_window;$/;"	m	struct:tls_options
translate_cipher_name_from_openvpn	src/openvpn/crypto_openssl.c	/^translate_cipher_name_from_openvpn (const char *cipher_name) {$/;"	f
translate_cipher_name_from_openvpn	src/openvpn/crypto_polarssl.c	/^translate_cipher_name_from_openvpn (const char *cipher_name) {$/;"	f
translate_cipher_name_to_openvpn	src/openvpn/crypto_openssl.c	/^translate_cipher_name_to_openvpn (const char *cipher_name) {$/;"	f
translate_cipher_name_to_openvpn	src/openvpn/crypto_polarssl.c	/^translate_cipher_name_to_openvpn (const char *cipher_name) {$/;"	f
translate_mtu_discover_type_name	src/openvpn/mtu.c	/^translate_mtu_discover_type_name (const char *name)$/;"	f
true	sample/sample-plugins/defer/simple.c	63;"	d	file:
true	src/compat/compat-stdbool.h	9;"	d
true	src/openvpnserv/openvpnserv.c	50;"	d	file:
try_load_engine	src/openvpn/crypto_openssl.c	/^try_load_engine (const char *engine)$/;"	f	file:
ttl	src/openvpn/mtu.c	/^  uint32_t ttl;$/;"	m	struct:probehdr	file:
ttl	src/openvpn/proto.h	/^  uint8_t    ttl;$/;"	m	struct:openvpn_iphdr
tun	src/openvpn/mtcp.c	/^  unsigned int tun;$/;"	m	struct:ta_iow_flags	file:
tun_abort	src/openvpn/init.c	/^tun_abort()$/;"	f
tun_adjust_frame_parameters	src/openvpn/tun.h	/^tun_adjust_frame_parameters (struct frame* frame, int size)$/;"	f
tun_event_handle	src/openvpn/tun.h	/^tun_event_handle (const struct tuntap *tt)$/;"	f
tun_finalize	src/openvpn/tun.c	/^tun_finalize ($/;"	f
tun_ipv6	src/openvpn/options.h	/^  bool tun_ipv6;                \/* Build tun dev that supports IPv6 *\/$/;"	m	struct:options
tun_mtu	src/openvpn/options.h	/^  int tun_mtu;           \/* MTU of tun device *\/$/;"	m	struct:connection_entry
tun_mtu_defined	src/openvpn/options.h	/^  bool tun_mtu_defined;  \/* true if user overriding parm with command line option *\/$/;"	m	struct:connection_entry
tun_mtu_extra	src/openvpn/options.h	/^  int tun_mtu_extra;$/;"	m	struct:connection_entry
tun_mtu_extra_defined	src/openvpn/options.h	/^  bool tun_mtu_extra_defined;$/;"	m	struct:connection_entry
tun_read_bytes	src/openvpn/openvpn.h	/^  counter_type tun_read_bytes;$/;"	m	struct:context_2
tun_read_queue	src/openvpn/tun.c	/^tun_read_queue (struct tuntap *tt, int maxsize)$/;"	f
tun_rwflags	src/openvpn/mtcp.h	/^  unsigned int tun_rwflags;$/;"	m	struct:multi_tcp
tun_set	src/openvpn/tun.h	/^tun_set (struct tuntap *tt,$/;"	f
tun_show_debug	src/openvpn/tun.c	/^tun_show_debug (struct tuntap *tt)$/;"	f
tun_standby	src/openvpn/tun.c	/^tun_standby (struct tuntap *tt)$/;"	f
tun_standby	src/openvpn/tun.h	/^tun_standby (struct tuntap *tt)$/;"	f
tun_standby_init	src/openvpn/tun.c	/^tun_standby_init (struct tuntap *tt)$/;"	f
tun_standby_init	src/openvpn/tun.h	/^tun_standby_init (struct tuntap *tt)$/;"	f
tun_stat	src/openvpn/tun.c	/^tun_stat (const struct tuntap *tt, unsigned int rwflags, struct gc_arena *gc)$/;"	f
tun_write_bytes	src/openvpn/openvpn.h	/^  counter_type tun_write_bytes;$/;"	m	struct:context_2
tun_write_queue	src/openvpn/tun.c	/^tun_write_queue (struct tuntap *tt, struct buffer *buf)$/;"	f
tun_write_win32	src/openvpn/tun.h	/^tun_write_win32 (struct tuntap *tt, struct buffer *buf)$/;"	f
tuncfg	src/openvpn/tun.c	/^tuncfg (const char *dev, const char *dev_type, const char *dev_node, int persist_mode, const char *username, const char *groupname, const struct tuntap_options *options)$/;"	f
tunnel_point_to_point	src/openvpn/openvpn.c	/^tunnel_point_to_point (struct context *c)$/;"	f	file:
tunnel_server	src/openvpn/multi.c	/^tunnel_server (struct context *top)$/;"	f
tunnel_server_tcp	src/openvpn/mtcp.c	/^tunnel_server_tcp (struct context *top)$/;"	f
tunnel_server_udp	src/openvpn/mudp.c	/^tunnel_server_udp (struct context *top)$/;"	f
tunnel_server_udp_single_threaded	src/openvpn/mudp.c	/^tunnel_server_udp_single_threaded (struct context *top)$/;"	f	file:
tuntap	src/openvpn/openvpn.h	/^  struct tuntap *tuntap;        \/**< Tun\/tap virtual network interface. *\/$/;"	m	struct:context_1	typeref:struct:context_1::tuntap
tuntap	src/openvpn/tun.h	/^struct tuntap$/;"	s
tuntap_abort	src/openvpn/tun.h	/^tuntap_abort(int status)$/;"	f
tuntap_defined	src/openvpn/tun.h	/^tuntap_defined (const struct tuntap *tt)$/;"	f
tuntap_options	src/openvpn/options.h	/^  struct tuntap_options tuntap_options;$/;"	m	struct:options	typeref:struct:options::tuntap_options
tuntap_options	src/openvpn/options.h	/^  struct tuntap_options tuntap_options;$/;"	m	struct:options_pre_pull	typeref:struct:options_pre_pull::tuntap_options
tuntap_options	src/openvpn/tun.h	/^struct tuntap_options {$/;"	s
tuntap_options_defined	src/openvpn/options.h	/^  bool tuntap_options_defined;$/;"	m	struct:options_pre_pull
tuntap_owned	src/openvpn/openvpn.h	/^  bool tuntap_owned;            \/**< Whether the tun\/tap interface should$/;"	m	struct:context_1
tuntap_stop	src/openvpn/tun.h	/^tuntap_stop (int status)$/;"	f
tv	src/openvpn/mtu.c	/^  struct timeval tv;$/;"	m	struct:probehdr	typeref:struct:probehdr::timeval	file:
tv	src/openvpn/schedule.h	/^  struct timeval tv;             \/* wakeup time *\/$/;"	m	struct:schedule_entry	typeref:struct:schedule_entry::timeval
tv_add	src/openvpn/otime.h	/^tv_add (struct timeval *dest, const struct timeval *src)$/;"	f
tv_clear	src/openvpn/otime.h	/^tv_clear (struct timeval *tv)$/;"	f
tv_defined	src/openvpn/otime.h	/^tv_defined (const struct timeval *tv)$/;"	f
tv_delta	src/openvpn/otime.h	/^tv_delta (struct timeval *dest, const struct timeval *t1, const struct timeval *t2)$/;"	f
tv_eq	src/openvpn/otime.h	/^tv_eq (const struct timeval *t1, const struct timeval *t2)$/;"	f
tv_ge	src/openvpn/otime.h	/^tv_ge (const struct timeval *t1, const struct timeval *t2)$/;"	f
tv_gt	src/openvpn/otime.h	/^tv_gt (const struct timeval *t1, const struct timeval *t2)$/;"	f
tv_le	src/openvpn/otime.h	/^tv_le (const struct timeval *t1, const struct timeval *t2)$/;"	f
tv_lt	src/openvpn/otime.h	/^tv_lt (const struct timeval *t1, const struct timeval *t2)$/;"	f
tv_randomize	src/openvpn/schedule.c	/^tv_randomize (struct timeval *tv)$/;"	f
tv_string	src/openvpn/otime.c	/^tv_string (const struct timeval *tv, struct gc_arena *gc)$/;"	f
tv_string_abs	src/openvpn/otime.c	/^tv_string_abs (const struct timeval *tv, struct gc_arena *gc)$/;"	f
tv_subtract	src/openvpn/otime.h	/^tv_subtract (const struct timeval *tv1, const struct timeval *tv2, const unsigned int max_seconds)$/;"	f
tv_to_ms_timeout	src/openvpn/event.c	/^tv_to_ms_timeout (const struct timeval *tv)$/;"	f	file:
tv_within_sigma	src/openvpn/otime.h	/^tv_within_sigma (const struct timeval *t1, const struct timeval *t2, unsigned int sigma)$/;"	f
txqueuelen	src/openvpn/tun.h	/^  int txqueuelen;$/;"	m	struct:tuntap
txqueuelen	src/openvpn/tun.h	/^  int txqueuelen;$/;"	m	struct:tuntap_options
type	include/openvpn-plugin.h	/^  const int type;$/;"	m	struct:openvpn_plugin_args_func_in
type	src/openvpn/clinat.h	/^  int type;$/;"	m	struct:client_nat_entry
type	src/openvpn/mroute.h	/^  uint8_t type;     \/* MR_ADDR\/MR_WITH flags *\/$/;"	m	struct:mroute_addr
type	src/openvpn/options.c	/^  int type;$/;"	m	struct:in_src	file:
type	src/openvpn/pool.h	/^  int type;$/;"	m	struct:ifconfig_pool
type	src/openvpn/tun.h	/^  int type; \/* DEV_TYPE_x as defined in proto.h *\/$/;"	m	struct:tuntap
type_mask	include/openvpn-plugin.h	/^  const int type_mask;$/;"	m	struct:openvpn_plugin_args_open_in
type_mask	include/openvpn-plugin.h	/^  int  type_mask;$/;"	m	struct:openvpn_plugin_args_open_return
u	src/openvpn/manage.h	/^  union log_entry_union u;$/;"	m	struct:log_entry	typeref:union:log_entry::log_entry_union
u	src/openvpn/options.c	/^  } u;$/;"	m	struct:in_src	typeref:union:in_src::__anon3	file:
u	src/openvpn/proto.h	/^  } u;$/;"	m	struct:ip_tcp_udp_hdr	typeref:union:ip_tcp_udp_hdr::__anon4
udp	src/openvpn/dhcp.h	/^  struct openvpn_udphdr udp;$/;"	m	struct:dhcp_full	typeref:struct:dhcp_full::openvpn_udphdr
udp	src/openvpn/proto.h	/^    struct openvpn_udphdr udp;$/;"	m	union:ip_tcp_udp_hdr::__anon4	typeref:struct:ip_tcp_udp_hdr::__anon4::openvpn_udphdr
udp_checksum	src/openvpn/dhcp.c	/^udp_checksum (const uint8_t *buf,$/;"	f	file:
uid_gid_set	src/openvpn/openvpn.h	/^  bool uid_gid_set;$/;"	m	struct:context_0
uid_gid_specified	src/openvpn/openvpn.h	/^  bool uid_gid_specified;$/;"	m	struct:context_0
uint16_t	config-msvc.h	/^typedef unsigned __int16	uint16_t;$/;"	t
uint32_t	config-msvc.h	/^typedef unsigned __int32	uint32_t;$/;"	t
uint64_t	config-msvc.h	/^typedef unsigned __int64	uint64_t;$/;"	t
uint8_t	config-msvc.h	/^typedef unsigned __int8		uint8_t;$/;"	t
undo_redirect_default_route_to_vpn	src/openvpn/route.c	/^undo_redirect_default_route_to_vpn (struct route_list *rl, const struct tuntap *tt, unsigned int flags, const struct env_set *es)$/;"	f	file:
ungenerate_prefix	src/openvpn/multi.c	/^ungenerate_prefix (struct multi_instance *mi)$/;"	f
unicodize	src/openvpn/ntlm.c	/^unicodize (char *dst, const char *src)$/;"	f	file:
uninit_management_callback	src/openvpn/init.c	/^uninit_management_callback (void)$/;"	f
uninit_management_callback_multi	src/openvpn/multi.c	/^uninit_management_callback_multi (struct multi_context *m)$/;"	f
uninit_options	src/openvpn/options.c	/^uninit_options (struct options *o)$/;"	f
uninit_proxy	src/openvpn/init.c	/^uninit_proxy (struct context *c)$/;"	f	file:
uninit_proxy_dowork	src/openvpn/init.c	/^uninit_proxy_dowork (struct context *c)$/;"	f	file:
uninit_static	src/openvpn/init.c	/^uninit_static (void)$/;"	f
uninit_win32	src/openvpn/win32.c	/^uninit_win32 (void)$/;"	f
unit	src/openvpn/packet_id.h	/^  int unit;$/;"	m	struct:packet_id_rec
unix_socket_get_peer_uid_gid	src/openvpn/socket.c	/^unix_socket_get_peer_uid_gid (const socket_descriptor_t sd, int *uid, int *gid)$/;"	f
unlikely	src/openvpn/syshead.h	34;"	d
unlikely	src/openvpn/syshead.h	37;"	d
unprintable_char_fmt	src/openvpn/crypto.c	/^static const char unprintable_char_fmt[] =$/;"	v	file:
untrusted_addr	src/openvpn/ssl_common.h	/^  struct link_socket_actual untrusted_addr;$/;"	m	struct:tls_session	typeref:struct:tls_session::link_socket_actual
unused	src/openvpn/mroute.h	/^  uint8_t unused;$/;"	m	struct:mroute_addr
up	src/openvpn/gremlin.c	/^static bool up;          \/* GLOBAL *\/$/;"	v	file:
up	src/openvpn/manage.h	/^  struct user_pass up;$/;"	m	struct:man_settings	typeref:struct:man_settings::user_pass
up	src/openvpn/proxy.h	/^  struct user_pass up;$/;"	m	struct:http_proxy_info	typeref:struct:http_proxy_info::user_pass
up_delay	src/openvpn/options.h	/^  bool up_delay;$/;"	m	struct:options
up_high	src/openvpn/gremlin.c	/^static const int up_high[] = { 600, 60, 10 };$/;"	v	file:
up_low	src/openvpn/gremlin.c	/^static const int up_low[] =  {  60, 10,  5 };$/;"	v	file:
up_query	src/openvpn/manage.h	/^  struct user_pass up_query;$/;"	m	struct:man_connection	typeref:struct:man_connection::user_pass
up_query_mode	src/openvpn/manage.h	/^  int up_query_mode;$/;"	m	struct:man_connection
up_query_type	src/openvpn/manage.h	/^  const char *up_query_type;$/;"	m	struct:man_connection
up_restart	src/openvpn/options.h	/^  bool up_restart;$/;"	m	struct:options
up_script	src/openvpn/options.h	/^  const char *up_script;$/;"	m	struct:options
update_mstat_n_clients	src/openvpn/multi.c	/^update_mstat_n_clients(const int n_clients)$/;"	f	file:
update_now	src/openvpn/otime.c	/^update_now (const time_t system_time)$/;"	f
update_now_usec	src/openvpn/otime.c	/^update_now_usec (struct timeval *tv)$/;"	f
update_options_ce_post	src/openvpn/init.c	/^update_options_ce_post (struct options *options)$/;"	f	file:
update_remote	src/openvpn/socket.c	/^update_remote (const char* host,$/;"	f	file:
update_sofar	src/openvpn/perf.c	/^update_sofar (struct perf *p)$/;"	f	file:
update_time	src/openvpn/otime.h	/^update_time (void)$/;"	f
update_timeout_random_component	src/openvpn/openvpn.h	/^  time_t update_timeout_random_component;$/;"	m	struct:context_2
upper	src/openvpn/sig.c	/^  const char *upper;$/;"	m	struct:signame	file:
urg_ptr	src/openvpn/proto.h	/^  uint16_t      urg_ptr;$/;"	m	struct:openvpn_tcphdr
usage	src/openvpn/options.c	/^usage (void)$/;"	f	file:
usage_error	test-driver	/^usage_error ()$/;"	f
usage_message	src/openvpn/options.c	/^static const char usage_message[] =$/;"	v	file:
usage_small	src/openvpn/options.c	/^usage_small (void)$/;"	f
usage_version	src/openvpn/options.c	/^usage_version (void)$/;"	f	file:
use_iv	src/openvpn/options.h	/^  bool use_iv;$/;"	m	struct:options
use_peer_id	src/openvpn/options.h	/^  bool use_peer_id;$/;"	m	struct:options
use_peer_id	src/openvpn/ssl_common.h	/^  bool use_peer_id;$/;"	m	struct:tls_multi
use_prediction_resistance	src/openvpn/options.h	/^  bool use_prediction_resistance;$/;"	m	struct:options
use_syslog	src/openvpn/error.c	/^static bool use_syslog;     \/* GLOBAL *\/$/;"	v	file:
usec_timer	src/openvpn/interval.h	/^struct usec_timer {$/;"	s
usec_timer_end	src/openvpn/interval.h	/^usec_timer_end (struct usec_timer *obj)$/;"	f
usec_timer_interval	src/openvpn/interval.h	/^usec_timer_interval (struct usec_timer *obj)$/;"	f
usec_timer_interval_defined	src/openvpn/interval.h	/^usec_timer_interval_defined (struct usec_timer *obj)$/;"	f
usec_timer_start	src/openvpn/interval.h	/^usec_timer_start (struct usec_timer *obj)$/;"	f
user	src/openvpn/misc.h	/^  const char *user;$/;"	m	struct:auth_challenge_info
user_agent	src/openvpn/proxy.h	/^  const char *user_agent;$/;"	m	struct:http_proxy_options
user_pass	src/openvpn/misc.h	/^struct user_pass$/;"	s
user_pass	src/plugins/auth-pam/auth-pam.c	/^struct user_pass {$/;"	s	file:
user_script_used	src/openvpn/options.h	/^  bool user_script_used;$/;"	m	struct:options
username	sample/sample-plugins/log/log.c	/^  const char *username;$/;"	m	struct:plugin_context	file:
username	sample/sample-plugins/log/log_v3.c	/^  const char *username;$/;"	m	struct:plugin_context	file:
username	sample/sample-plugins/simple/simple.c	/^  const char *username;$/;"	m	struct:plugin_context	file:
username	src/openvpn/misc.h	/^  char username[USER_PASS_LEN];$/;"	m	struct:user_pass
username	src/openvpn/options.h	/^  const char *username;$/;"	m	struct:options
username	src/openvpn/platform.h	/^  const char *username;$/;"	m	struct:platform_state_user
username	src/plugins/auth-pam/auth-pam.c	/^  char username[128];$/;"	m	struct:user_pass	file:
username_password_as_base64	src/openvpn/proxy.c	/^username_password_as_base64 (const struct http_proxy_info *p,$/;"	f	file:
utun_open_helper	src/openvpn/tun.c	/^int utun_open_helper (struct ctl_info ctlInfo, int utunnum)$/;"	f	file:
vaddr_handle	src/openvpn/multi.h	/^  ifconfig_pool_handle vaddr_handle;$/;"	m	struct:multi_instance
validate_peer_info_line	src/openvpn/manage.c	/^validate_peer_info_line(const char *line)$/;"	f	file:
valign4	src/openvpn/buffer.c	/^valign4 (const struct buffer *buf, const char *file, const int line)$/;"	f
value	include/openvpn-plugin.h	/^  char *value;$/;"	m	struct:openvpn_plugin_string_list
value	src/openvpn/list.h	/^  void *value;$/;"	m	struct:hash_element
value	src/openvpn/sig.c	/^  int value;$/;"	m	struct:signame	file:
value	src/plugins/auth-pam/auth-pam.c	/^  const char *value;$/;"	m	struct:name_value	file:
verb	src/plugins/auth-pam/auth-pam.c	/^  int verb;$/;"	m	struct:auth_pam_context	file:
verb	src/plugins/auth-pam/auth-pam.c	/^  int verb;$/;"	m	struct:user_pass	file:
verb	src/plugins/down-root/down-root.c	/^  int verb;$/;"	m	struct:down_root_context	file:
verbosity	src/openvpn/options.h	/^  int verbosity;$/;"	m	struct:options
verified	src/openvpn/ssl_common.h	/^  bool verified;                \/* true if peer certificate was verified against CA *\/$/;"	m	struct:tls_session
verify_255_255_255_252	src/openvpn/tun.c	/^verify_255_255_255_252 (in_addr_t local, in_addr_t remote)$/;"	f
verify_align_4	src/openvpn/buffer.h	768;"	d
verify_align_4	src/openvpn/buffer.h	770;"	d
verify_callback	src/openvpn/ssl_verify_openssl.c	/^verify_callback (int preverify_ok, X509_STORE_CTX * ctx)$/;"	f
verify_callback	src/openvpn/ssl_verify_polarssl.c	/^verify_callback (void *session_obj, x509_cert *cert, int cert_depth,$/;"	f
verify_cert	src/openvpn/ssl_verify.c	/^verify_cert(struct tls_session *session, openvpn_x509_cert_t *cert, int cert_depth)$/;"	f
verify_cert_call_command	src/openvpn/ssl_verify.c	/^verify_cert_call_command(const char *verify_command, struct env_set *es,$/;"	f	file:
verify_cert_call_plugin	src/openvpn/ssl_verify.c	/^verify_cert_call_plugin(const struct plugin_list *plugins, struct env_set *es,$/;"	f	file:
verify_cert_export_cert	src/openvpn/ssl_verify.c	/^verify_cert_export_cert(openvpn_x509_cert_t *peercert, const char *tmp_dir, struct gc_arena *gc)$/;"	f	file:
verify_cert_set_env	src/openvpn/ssl_verify.c	/^verify_cert_set_env(struct env_set *es, openvpn_x509_cert_t *peer_cert, int cert_depth,$/;"	f	file:
verify_check_crl_dir	src/openvpn/ssl_verify.c	/^verify_check_crl_dir(const char *crl_dir, openvpn_x509_cert_t *cert)$/;"	f	file:
verify_command	src/openvpn/ssl_common.h	/^  const char *verify_command;$/;"	m	struct:tls_options
verify_common_subnet	src/openvpn/helper.c	/^verify_common_subnet (const char *opt, const in_addr_t a, const in_addr_t b, const in_addr_t subnet)$/;"	f	file:
verify_export_cert	src/openvpn/ssl_common.h	/^  const char *verify_export_cert;$/;"	m	struct:tls_options
verify_final_auth_checks	src/openvpn/ssl_verify.c	/^verify_final_auth_checks(struct tls_multi *multi, struct tls_session *session)$/;"	f
verify_fix_key2	src/openvpn/crypto.c	/^verify_fix_key2 (struct key2 *key2, const struct key_type *kt, const char *shared_secret_file)$/;"	f
verify_hash	src/openvpn/options.h	/^  uint8_t *verify_hash;$/;"	m	struct:options
verify_hash	src/openvpn/ssl_common.h	/^  uint8_t *verify_hash;$/;"	m	struct:tls_options
verify_maxlevel	src/openvpn/ssl_common.h	/^  int verify_maxlevel;$/;"	m	struct:tls_session
verify_peer_cert	src/openvpn/ssl_verify.c	/^verify_peer_cert(const struct tls_options *opt, openvpn_x509_cert_t *peer_cert,$/;"	f	file:
verify_permission	src/openvpn/options.c	/^verify_permission (const char *name,$/;"	f	file:
verify_user_pass	src/openvpn/ssl_verify.c	/^verify_user_pass(struct user_pass *up, struct tls_multi *multi,$/;"	f
verify_user_pass_enabled	src/openvpn/ssl_verify.h	/^static inline bool verify_user_pass_enabled(struct tls_session *session)$/;"	f
verify_user_pass_management	src/openvpn/ssl_verify.c	/^verify_user_pass_management (struct tls_session *session, const struct user_pass *up, const char *raw_username)$/;"	f	file:
verify_user_pass_plugin	src/openvpn/ssl_verify.c	/^verify_user_pass_plugin (struct tls_session *session, const struct user_pass *up, const char *raw_username)$/;"	f	file:
verify_user_pass_script	src/openvpn/ssl_verify.c	/^verify_user_pass_script (struct tls_session *session, const struct user_pass *up)$/;"	f	file:
verify_x509_name	src/openvpn/options.h	/^  const char *verify_x509_name;$/;"	m	struct:options
verify_x509_name	src/openvpn/ssl_common.h	/^  const char *verify_x509_name;$/;"	m	struct:tls_options
verify_x509_type	src/openvpn/options.h	/^  int verify_x509_type;$/;"	m	struct:options
verify_x509_type	src/openvpn/ssl_common.h	/^  int verify_x509_type;$/;"	m	struct:tls_options
version_len	src/openvpn/proto.h	/^  uint8_t    version_len;$/;"	m	struct:openvpn_iphdr
version_prio	src/openvpn/proto.h	/^        uint8_t		version_prio;$/;"	m	struct:openvpn_ipv6hdr
vhash	src/openvpn/multi.h	/^  struct hash *vhash;           \/**< VPN tunnel instances indexed by$/;"	m	struct:multi_context	typeref:struct:multi_context::hash
virtual_hash_size	src/openvpn/options.h	/^  int virtual_hash_size;$/;"	m	struct:options
virtual_output	src/openvpn/status.h	/^struct virtual_output {$/;"	s
virtual_output_callback_func	src/openvpn/manage.c	/^virtual_output_callback_func (void *arg, const unsigned int flags, const char *str)$/;"	f	file:
virtual_output_print	src/openvpn/status.h	/^virtual_output_print (const struct virtual_output *vo, const unsigned int flags, const char *str)$/;"	f
void_ptr_compare_function	src/openvpn/list.c	/^void_ptr_compare_function (const void *key1, const void *key2)$/;"	f
void_ptr_hash_function	src/openvpn/list.c	/^void_ptr_hash_function (const void *key, uint32_t iv)$/;"	f
vout	src/openvpn/manage.h	/^  struct virtual_output vout;$/;"	m	struct:man_persist	typeref:struct:man_persist::virtual_output
vout	src/openvpn/status.h	/^  const struct virtual_output *vout;$/;"	m	struct:status_output	typeref:struct:status_output::virtual_output
wait	src/openvpn/event.h	/^  int  (*wait)(struct event_set *es, const struct timeval *tv, struct event_set_return *out, int outlen);$/;"	m	struct:event_set_functions
wait_for_connect	src/openvpn/openvpn.h	/^  struct event_timeout wait_for_connect;$/;"	m	struct:context_2	typeref:struct:context_2::event_timeout
wait_signal	src/openvpn/event.h	/^wait_signal (struct event_set *es, void *arg)$/;"	f
wait_status_string	src/openvpn/forward.c	/^wait_status_string (struct context *c, struct gc_arena *gc)$/;"	f
wakeup	src/openvpn/fragment.h	/^  struct event_timeout wakeup;  \/**< Timeout structure used by the main$/;"	m	struct:fragment_master	typeref:struct:fragment_master::event_timeout
wakeup	src/openvpn/multi.h	/^  struct timeval wakeup;       \/* absolute time *\/$/;"	m	struct:multi_instance	typeref:struct:multi_instance::timeval
wakeup	src/openvpn/shaper.h	/^  struct timeval wakeup;$/;"	m	struct:shaper	typeref:struct:shaper::timeval
warn_if_group_others_accessible	src/openvpn/misc.c	/^warn_if_group_others_accessible (const char* filename)$/;"	f
warn_on_use_of_common_subnets	src/openvpn/tun.c	/^warn_on_use_of_common_subnets (void)$/;"	f
we_append_event	src/openvpn/event.c	/^we_append_event (struct we_set *wes, event_t event, unsigned int rwflags, void *arg)$/;"	f	file:
we_ctl	src/openvpn/event.c	/^we_ctl (struct event_set *es, event_t event, unsigned int rwflags, void *arg)$/;"	f	file:
we_del	src/openvpn/event.c	/^we_del (struct event_set *es, event_t event)$/;"	f	file:
we_del_event	src/openvpn/event.c	/^we_del_event (struct we_set *wes, event_t event)$/;"	f	file:
we_del_index	src/openvpn/event.c	/^we_del_index (struct we_set *wes, int index)$/;"	f	file:
we_free	src/openvpn/event.c	/^we_free (struct event_set *es)$/;"	f	file:
we_get_rw_indices	src/openvpn/event.c	/^we_get_rw_indices (struct we_set *wes, event_t event, int *ri, int *wi)$/;"	f	file:
we_init	src/openvpn/event.c	/^we_init (int *maxevents, unsigned int flags)$/;"	f	file:
we_reset	src/openvpn/event.c	/^we_reset (struct event_set *es)$/;"	f	file:
we_set	src/openvpn/event.c	/^struct we_set$/;"	s	file:
we_set_event	src/openvpn/event.c	/^we_set_event (struct we_set *wes, int i, event_t event, unsigned int rwflags, void *arg)$/;"	f	file:
we_wait	src/openvpn/event.c	/^we_wait (struct event_set *es, const struct timeval *tv, struct event_set_return *out, int outlen)$/;"	f	file:
wide_cmd_line	src/openvpn/win32.c	/^wide_cmd_line (const struct argv *a, struct gc_arena *gc)$/;"	f	file:
wide_string	src/openvpn/win32.c	/^wide_string (const char* utf8, struct gc_arena *gc)$/;"	f
win32_keyboard_get	src/openvpn/win32.c	/^win32_keyboard_get (struct win32_signal *ws)$/;"	f	file:
win32_pause	src/openvpn/win32.c	/^win32_pause (struct win32_signal *ws)$/;"	f
win32_service_interrupt	src/openvpn/win32.c	/^win32_service_interrupt (struct win32_signal *ws)$/;"	f
win32_signal	src/openvpn/win32.c	/^struct win32_signal win32_signal; \/* GLOBAL *\/$/;"	v	typeref:struct:win32_signal
win32_signal	src/openvpn/win32.h	/^struct win32_signal {$/;"	s
win32_signal_clear	src/openvpn/win32.c	/^win32_signal_clear (struct win32_signal *ws)$/;"	f
win32_signal_close	src/openvpn/win32.c	/^win32_signal_close (struct win32_signal *ws)$/;"	f
win32_signal_get	src/openvpn/win32.c	/^win32_signal_get (struct win32_signal *ws)$/;"	f
win32_signal_open	src/openvpn/win32.c	/^win32_signal_open (struct win32_signal *ws,$/;"	f
win_get_tempdir	src/openvpn/win32.c	/^win_get_tempdir()$/;"	f
win_safe_filename	src/openvpn/win32.c	/^win_safe_filename (const char *fn)$/;"	f
win_sys_path	src/openvpn/win32.c	/^static char *win_sys_path = NULL; \/* GLOBAL *\/$/;"	v	file:
window	src/openvpn/proto.h	/^  uint16_t      window;$/;"	m	struct:openvpn_tcphdr
window_title	src/openvpn/win32.c	/^struct window_title window_title; \/* GLOBAL*\/$/;"	v	typeref:struct:window_title
window_title	src/openvpn/win32.h	/^struct window_title$/;"	s
window_title_clear	src/openvpn/win32.c	/^window_title_clear (struct window_title *wt)$/;"	f
window_title_generate	src/openvpn/win32.c	/^window_title_generate (const char *title)$/;"	f
window_title_restore	src/openvpn/win32.c	/^window_title_restore (const struct window_title *wt)$/;"	f
window_title_save	src/openvpn/win32.c	/^window_title_save (struct window_title *wt)$/;"	f
windows_route_find_if_index	src/openvpn/route.c	/^windows_route_find_if_index (const struct route_ipv4 *r, const struct tuntap *tt)$/;"	f	file:
wins	src/openvpn/tun.h	/^  in_addr_t wins[N_DHCP_ADDR];$/;"	m	struct:tuntap_options
wins_len	src/openvpn/tun.h	/^  int wins_len;$/;"	m	struct:tuntap_options
wmain	src/openvpn/openvpn.c	/^wmain (int argc, wchar_t *wargv[]) {$/;"	f
wmem	src/openvpn/lzo.h	/^  lzo_voidp wmem;$/;"	m	struct:lzo_compress_workspace
wmem_size	src/openvpn/lzo.h	/^  int wmem_size;$/;"	m	struct:lzo_compress_workspace
word	src/openvpn/list.c	/^  const char *word;$/;"	m	struct:word	file:
word	src/openvpn/list.c	/^struct word$/;"	s	file:
word_compare_function	src/openvpn/list.c	/^word_compare_function (const void *key1, const void *key2)$/;"	f	file:
word_hash_function	src/openvpn/list.c	/^word_hash_function (const void *key, uint32_t iv)$/;"	f	file:
write	src/openvpn/win32.h	/^  HANDLE write;$/;"	m	struct:rw_handle
write_control_auth	src/openvpn/ssl.c	/^write_control_auth (struct tls_session *session,$/;"	f	file:
write_dhcp_str	src/openvpn/tun.c	/^write_dhcp_str (struct buffer *buf, const int type, const char *str, bool *error)$/;"	f	file:
write_dhcp_u32_array	src/openvpn/tun.c	/^write_dhcp_u32_array (struct buffer *buf, const int type, const uint32_t *data, const unsigned int len, bool *error)$/;"	f	file:
write_dhcp_u8	src/openvpn/tun.c	/^write_dhcp_u8 (struct buffer *buf, const int type, const int data, bool *error)$/;"	f	file:
write_empty_string	src/openvpn/ssl.c	/^write_empty_string (struct buffer *buf)$/;"	f	file:
write_key	src/openvpn/crypto.c	/^write_key (const struct key *key, const struct key_type *kt,$/;"	f
write_key_file	src/openvpn/crypto.c	/^write_key_file (const int nkeys, const char *filename)$/;"	f
write_peer_info_file	src/openvpn/manage.h	/^  char *write_peer_info_file;$/;"	m	struct:man_settings
write_pid	src/openvpn/misc.c	/^write_pid (const struct pid_state *state)$/;"	f
write_string	src/openvpn/ssl.c	/^write_string (struct buffer *buf, const char *str, const int maxlen)$/;"	f	file:
write_tun	src/openvpn/tun.c	/^write_tun (struct tuntap* tt, uint8_t *buf, int len)$/;"	f
write_tun	src/openvpn/tun.c	/^write_tun(struct tuntap *tt, uint8_t *buf, int len)$/;"	f
write_tun_buffered	src/openvpn/tun.h	/^write_tun_buffered (struct tuntap *tt, struct buffer *buf)$/;"	f
write_tun_header	src/openvpn/tun.c	/^write_tun_header (struct tuntap* tt, uint8_t *buf, int len)$/;"	f
writefds	src/openvpn/event.c	/^  fd_set writefds;$/;"	m	struct:se_set	file:
writepid	src/openvpn/options.h	/^  const char *writepid;$/;"	m	struct:options
writes	src/openvpn/socket.h	/^  struct overlapped_io writes;$/;"	m	struct:link_socket	typeref:struct:link_socket::overlapped_io
writes	src/openvpn/tun.h	/^  struct overlapped_io writes;$/;"	m	struct:tuntap	typeref:struct:tuntap::overlapped_io
wsa_state	src/openvpn/win32.c	/^static struct WSAData wsa_state; \/* GLOBAL *\/$/;"	v	typeref:struct:WSAData	file:
x509_get_sha1_hash	src/openvpn/ssl_verify_openssl.c	/^x509_get_sha1_hash (X509 *cert, struct gc_arena *gc)$/;"	f
x509_get_sha1_hash	src/openvpn/ssl_verify_polarssl.c	/^x509_get_sha1_hash (x509_cert *cert, struct gc_arena *gc)$/;"	f
x509_get_subject	src/openvpn/ssl_verify_openssl.c	/^x509_get_subject (X509 *cert, struct gc_arena *gc)$/;"	f
x509_get_subject	src/openvpn/ssl_verify_polarssl.c	/^x509_get_subject(x509_cert *cert, struct gc_arena *gc)$/;"	f
x509_get_username	src/openvpn/ssl_verify_openssl.c	/^x509_get_username (char *common_name, int cn_len,$/;"	f
x509_get_username	src/openvpn/ssl_verify_polarssl.c	/^x509_get_username (char *cn, int cn_len,$/;"	f
x509_print_info	sample/sample-plugins/log/log_v3.c	/^x509_print_info (X509 *x509crt)$/;"	f	file:
x509_setenv	src/openvpn/ssl_verify_openssl.c	/^x509_setenv (struct env_set *es, int cert_depth, openvpn_x509_cert_t *peer_cert)$/;"	f
x509_setenv	src/openvpn/ssl_verify_polarssl.c	/^x509_setenv (struct env_set *es, int cert_depth, openvpn_x509_cert_t *cert)$/;"	f
x509_setenv_track	src/openvpn/ssl_verify_openssl.c	/^x509_setenv_track (const struct x509_track *xt, struct env_set *es, const int depth, X509 *x509)$/;"	f
x509_track	src/openvpn/options.h	/^  const struct x509_track *x509_track;$/;"	m	struct:options	typeref:struct:options::x509_track
x509_track	src/openvpn/ssl_common.h	/^  const struct x509_track *x509_track;$/;"	m	struct:tls_options	typeref:struct:tls_options::x509_track
x509_track	src/openvpn/ssl_verify.h	/^struct x509_track$/;"	s
x509_track_add	src/openvpn/ssl_verify_openssl.c	/^x509_track_add (const struct x509_track **ll_head, const char *name, int msglevel, struct gc_arena *gc)$/;"	f
x509_username_field	src/openvpn/options.h	/^  char *x509_username_field;$/;"	m	struct:options
x509_username_field	src/openvpn/ssl_common.h	/^  char *x509_username_field;$/;"	m	struct:tls_options
x509_verify_cert_eku	src/openvpn/ssl_verify_openssl.c	/^x509_verify_cert_eku (X509 *x509, const char * const expected_oid)$/;"	f
x509_verify_cert_eku	src/openvpn/ssl_verify_polarssl.c	/^x509_verify_cert_eku (x509_cert *cert, const char * const expected_oid)$/;"	f
x509_verify_cert_ku	src/openvpn/ssl_verify_openssl.c	/^x509_verify_cert_ku (X509 *x509, const unsigned * const expected_ku,$/;"	f
x509_verify_cert_ku	src/openvpn/ssl_verify_polarssl.c	/^x509_verify_cert_ku (x509_cert *cert, const unsigned * const expected_ku,$/;"	f
x509_verify_crl	src/openvpn/ssl_verify_openssl.c	/^x509_verify_crl(const char *crl_file, X509 *peer_cert, const char *subject)$/;"	f
x509_verify_crl	src/openvpn/ssl_verify_polarssl.c	/^x509_verify_crl(const char *crl_file, x509_cert *cert, const char *subject)$/;"	f
x509_verify_ns_cert_type	src/openvpn/ssl_verify_openssl.c	/^x509_verify_ns_cert_type(const openvpn_x509_cert_t *peer_cert, const int usage)$/;"	f
x509_verify_ns_cert_type	src/openvpn/ssl_verify_polarssl.c	/^x509_verify_ns_cert_type(const x509_cert *cert, const int usage)$/;"	f
x509_write_pem	src/openvpn/ssl_verify_openssl.c	/^x509_write_pem(FILE *peercert_file, X509 *peercert)$/;"	f
x509_write_pem	src/openvpn/ssl_verify_polarssl.c	/^x509_write_pem(FILE *peercert_file, x509_cert *peercert)$/;"	f
x_check_status	src/openvpn/error.c	/^x_check_status (int status,$/;"	f
x_cs_err_delay_ms	src/openvpn/error.c	/^unsigned int x_cs_err_delay_ms;  \/* GLOBAL *\/$/;"	v
x_cs_info_level	src/openvpn/error.c	/^unsigned int x_cs_info_level;    \/* GLOBAL *\/$/;"	v
x_cs_verbose_level	src/openvpn/error.c	/^unsigned int x_cs_verbose_level; \/* GLOBAL *\/$/;"	v
x_debug_level	src/openvpn/error.c	/^unsigned int x_debug_level; \/* GLOBAL *\/$/;"	v
x_gc_free	src/openvpn/buffer.c	/^x_gc_free (struct gc_arena *a)$/;"	f
x_msg	src/openvpn/error.c	/^void x_msg (const unsigned int flags, const char *format, ...)$/;"	f
x_msg_line_num	src/openvpn/error.c	/^int x_msg_line_num; \/* GLOBAL *\/$/;"	v
x_msg_prefix	src/openvpn/error.c	/^const char *x_msg_prefix; \/* GLOBAL *\/$/;"	v
x_msg_va	src/openvpn/error.c	/^void x_msg_va (const unsigned int flags, const char *format, va_list arglist)$/;"	f
x_msg_virtual_output	src/openvpn/error.c	/^const struct virtual_output *x_msg_virtual_output; \/* GLOBAL *\/$/;"	v	typeref:struct:virtual_output
x_session_id_zero	src/openvpn/session_id.c	/^const struct session_id x_session_id_zero;$/;"	v	typeref:struct:session_id
xid	src/openvpn/dhcp.h	/^  uint32_t xid;        \/* transaction ID, chosen by client *\/$/;"	m	struct:dhcp
xmit_hold	src/openvpn/ssl_common.h	/^  bool xmit_hold;$/;"	m	struct:tls_options
yiaddr	src/openvpn/dhcp.h	/^  uint32_t yiaddr;     \/* 'your' IP address -- server's response to client *\/$/;"	m	struct:dhcp
z	src/openvpn/schedule.c	/^static struct status z;$/;"	v	typeref:struct:status	file:
